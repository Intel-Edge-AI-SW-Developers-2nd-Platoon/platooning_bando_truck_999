
stm32f103_uart_l298n_dc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000467c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049bc  080049bc  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  080049bc  080049bc  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049bc  080049bc  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049c0  080049c0  000149c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  080049c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002d8  20000068  08004a2c  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08004a2c  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020091  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000d1e4  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022e5  00000000  00000000  0002d2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d40  00000000  00000000  0002f5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a47  00000000  00000000  000302e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018f44  00000000  00000000  00030d27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fa78  00000000  00000000  00049c6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c2f2  00000000  00000000  000596e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000040dc  00000000  00000000  000e59d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  000e9ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004770 	.word	0x08004770

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004770 	.word	0x08004770

0800014c <strcmp>:
 800014c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000150:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000154:	2a01      	cmp	r2, #1
 8000156:	bf28      	it	cs
 8000158:	429a      	cmpcs	r2, r3
 800015a:	d0f7      	beq.n	800014c <strcmp>
 800015c:	1ad0      	subs	r0, r2, r3
 800015e:	4770      	bx	lr

08000160 <app>:
void app(void);
void app_init(void);
bool app_parser(uint8_t* buf);

void app(void)
{
 8000160:	b580      	push	{r7, lr}
 8000162:	af00      	add	r7, sp, #0
	app_init();
 8000164:	f000 f80e 	bl	8000184 <app_init>

	//set init_led
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000168:	2201      	movs	r2, #1
 800016a:	2104      	movs	r1, #4
 800016c:	4804      	ldr	r0, [pc, #16]	; (8000180 <app+0x20>)
 800016e:	f001 f933 	bl	80013d8 <HAL_GPIO_WritePin>

	while (1)
	{
		uart_proc();
 8000172:	f000 fcc1 	bl	8000af8 <uart_proc>
		HAL_Delay(100);
 8000176:	2064      	movs	r0, #100	; 0x64
 8000178:	f000 fdc6 	bl	8000d08 <HAL_Delay>
		uart_proc();
 800017c:	e7f9      	b.n	8000172 <app+0x12>
 800017e:	bf00      	nop
 8000180:	40010800 	.word	0x40010800

08000184 <app_init>:
	}
}

void app_init(void)
{
 8000184:	b580      	push	{r7, lr}
 8000186:	af00      	add	r7, sp, #0
	//set motor init
	l298n_dc_motor_init();
 8000188:	f000 f86c 	bl	8000264 <l298n_dc_motor_init>

	//uart receive init
	uart_init();
 800018c:	f000 fc8a 	bl	8000aa4 <uart_init>
	//link uart input to app_parser
	uart_regcbf(app_parser);
 8000190:	4802      	ldr	r0, [pc, #8]	; (800019c <app_init+0x18>)
 8000192:	f000 fca3 	bl	8000adc <uart_regcbf>
}
 8000196:	bf00      	nop
 8000198:	bd80      	pop	{r7, pc}
 800019a:	bf00      	nop
 800019c:	080001a1 	.word	0x080001a1

080001a0 <app_parser>:

#define D_DELIMITER	"@ ,\r\n"
bool app_parser(uint8_t* buf)
{
 80001a0:	b580      	push	{r7, lr}
 80001a2:	b090      	sub	sp, #64	; 0x40
 80001a4:	af00      	add	r7, sp, #0
 80001a6:	6078      	str	r0, [r7, #4]
	int argc = 0;
 80001a8:	2300      	movs	r3, #0
 80001aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	uint8_t motor_direction = 0, motor_pwm_1 = 0, motor_pwm_2 = 0;
 80001ac:	2300      	movs	r3, #0
 80001ae:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80001b2:	2300      	movs	r3, #0
 80001b4:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 80001b8:	2300      	movs	r3, #0
 80001ba:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35

	char *ptr;
	char *argv[10];

	ptr = buf;
 80001be:	687b      	ldr	r3, [r7, #4]
 80001c0:	63bb      	str	r3, [r7, #56]	; 0x38
	if(ptr!=NULL)
 80001c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d041      	beq.n	800024c <app_parser+0xac>
	{
		ptr = strtok(ptr, D_DELIMITER);
 80001c8:	4923      	ldr	r1, [pc, #140]	; (8000258 <app_parser+0xb8>)
 80001ca:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80001cc:	f003 fc68 	bl	8003aa0 <strtok>
 80001d0:	63b8      	str	r0, [r7, #56]	; 0x38

		while(ptr != NULL)
 80001d2:	e00e      	b.n	80001f2 <app_parser+0x52>
		{
			argv[argc] = ptr;
 80001d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001d6:	009b      	lsls	r3, r3, #2
 80001d8:	3340      	adds	r3, #64	; 0x40
 80001da:	443b      	add	r3, r7
 80001dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80001de:	f843 2c34 	str.w	r2, [r3, #-52]
			argc++;
 80001e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80001e4:	3301      	adds	r3, #1
 80001e6:	63fb      	str	r3, [r7, #60]	; 0x3c
			ptr = strtok(NULL, D_DELIMITER);
 80001e8:	491b      	ldr	r1, [pc, #108]	; (8000258 <app_parser+0xb8>)
 80001ea:	2000      	movs	r0, #0
 80001ec:	f003 fc58 	bl	8003aa0 <strtok>
 80001f0:	63b8      	str	r0, [r7, #56]	; 0x38
		while(ptr != NULL)
 80001f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d1ed      	bne.n	80001d4 <app_parser+0x34>
		}

		if(strcmp(argv[0], "CAR_B") == 0)
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	4918      	ldr	r1, [pc, #96]	; (800025c <app_parser+0xbc>)
 80001fc:	4618      	mov	r0, r3
 80001fe:	f7ff ffa5 	bl	800014c <strcmp>
 8000202:	4603      	mov	r3, r0
 8000204:	2b00      	cmp	r3, #0
 8000206:	d121      	bne.n	800024c <app_parser+0xac>
		{
			motor_direction = atoi(argv[1]);
 8000208:	693b      	ldr	r3, [r7, #16]
 800020a:	4618      	mov	r0, r3
 800020c:	f003 f9be 	bl	800358c <atoi>
 8000210:	4603      	mov	r3, r0
 8000212:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			motor_pwm_1 = atoi(argv[2]);
 8000216:	697b      	ldr	r3, [r7, #20]
 8000218:	4618      	mov	r0, r3
 800021a:	f003 f9b7 	bl	800358c <atoi>
 800021e:	4603      	mov	r3, r0
 8000220:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			motor_pwm_2 = atoi(argv[3]);
 8000224:	69bb      	ldr	r3, [r7, #24]
 8000226:	4618      	mov	r0, r3
 8000228:	f003 f9b0 	bl	800358c <atoi>
 800022c:	4603      	mov	r3, r0
 800022e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			l298n_dc_motor_movement(motor_direction, motor_pwm_1, motor_pwm_2);
 8000232:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8000236:	f897 1036 	ldrb.w	r1, [r7, #54]	; 0x36
 800023a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800023e:	4618      	mov	r0, r3
 8000240:	f000 f900 	bl	8000444 <l298n_dc_motor_movement>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_2);
 8000244:	2104      	movs	r1, #4
 8000246:	4806      	ldr	r0, [pc, #24]	; (8000260 <app_parser+0xc0>)
 8000248:	f001 f8de 	bl	8001408 <HAL_GPIO_TogglePin>
		}
	}
}
 800024c:	bf00      	nop
 800024e:	4618      	mov	r0, r3
 8000250:	3740      	adds	r7, #64	; 0x40
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	bf00      	nop
 8000258:	08004788 	.word	0x08004788
 800025c:	08004790 	.word	0x08004790
 8000260:	40010800 	.word	0x40010800

08000264 <l298n_dc_motor_init>:
#define IN4 GPIO_PIN_6
#define MOTOR_PWM_CH1 TIM_CHANNEL_3
#define MOTOR_PWM_CH2 TIM_CHANNEL_4

void l298n_dc_motor_init()
{
 8000264:	b580      	push	{r7, lr}
 8000266:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
 8000268:	2200      	movs	r2, #0
 800026a:	2108      	movs	r1, #8
 800026c:	480f      	ldr	r0, [pc, #60]	; (80002ac <l298n_dc_motor_init+0x48>)
 800026e:	f001 f8b3 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
 8000272:	2200      	movs	r2, #0
 8000274:	2110      	movs	r1, #16
 8000276:	480d      	ldr	r0, [pc, #52]	; (80002ac <l298n_dc_motor_init+0x48>)
 8000278:	f001 f8ae 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 800027c:	2200      	movs	r2, #0
 800027e:	2120      	movs	r1, #32
 8000280:	480a      	ldr	r0, [pc, #40]	; (80002ac <l298n_dc_motor_init+0x48>)
 8000282:	f001 f8a9 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 8000286:	2200      	movs	r2, #0
 8000288:	2140      	movs	r1, #64	; 0x40
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <l298n_dc_motor_init+0x48>)
 800028c:	f001 f8a4 	bl	80013d8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start(&htim2);
 8000290:	4807      	ldr	r0, [pc, #28]	; (80002b0 <l298n_dc_motor_init+0x4c>)
 8000292:	f001 fd33 	bl	8001cfc <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_PWM_CH1);
 8000296:	2108      	movs	r1, #8
 8000298:	4805      	ldr	r0, [pc, #20]	; (80002b0 <l298n_dc_motor_init+0x4c>)
 800029a:	f001 fdd1 	bl	8001e40 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, MOTOR_PWM_CH2);
 800029e:	210c      	movs	r1, #12
 80002a0:	4803      	ldr	r0, [pc, #12]	; (80002b0 <l298n_dc_motor_init+0x4c>)
 80002a2:	f001 fdcd 	bl	8001e40 <HAL_TIM_PWM_Start>
}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	40010800 	.word	0x40010800
 80002b0:	20000084 	.word	0x20000084

080002b4 <l298n_dc_motor_direction_set>:

void l298n_dc_motor_direction_set(uint8_t motor_direction)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0
 80002ba:	4603      	mov	r3, r0
 80002bc:	71fb      	strb	r3, [r7, #7]
	//move straight front
	if(motor_direction == 1)
 80002be:	79fb      	ldrb	r3, [r7, #7]
 80002c0:	2b01      	cmp	r3, #1
 80002c2:	d114      	bne.n	80002ee <l298n_dc_motor_direction_set+0x3a>
	{
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_SET);
 80002c4:	2201      	movs	r2, #1
 80002c6:	2108      	movs	r1, #8
 80002c8:	4851      	ldr	r0, [pc, #324]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80002ca:	f001 f885 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
 80002ce:	2200      	movs	r2, #0
 80002d0:	2110      	movs	r1, #16
 80002d2:	484f      	ldr	r0, [pc, #316]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80002d4:	f001 f880 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 80002d8:	2200      	movs	r2, #0
 80002da:	2120      	movs	r1, #32
 80002dc:	484c      	ldr	r0, [pc, #304]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80002de:	f001 f87b 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2140      	movs	r1, #64	; 0x40
 80002e6:	484a      	ldr	r0, [pc, #296]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80002e8:	f001 f876 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
	}
}
 80002ec:	e08b      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
	else if(motor_direction == 2)
 80002ee:	79fb      	ldrb	r3, [r7, #7]
 80002f0:	2b02      	cmp	r3, #2
 80002f2:	d114      	bne.n	800031e <l298n_dc_motor_direction_set+0x6a>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
 80002f4:	2200      	movs	r2, #0
 80002f6:	2108      	movs	r1, #8
 80002f8:	4845      	ldr	r0, [pc, #276]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80002fa:	f001 f86d 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_SET);
 80002fe:	2201      	movs	r2, #1
 8000300:	2110      	movs	r1, #16
 8000302:	4843      	ldr	r0, [pc, #268]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000304:	f001 f868 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 8000308:	2200      	movs	r2, #0
 800030a:	2120      	movs	r1, #32
 800030c:	4840      	ldr	r0, [pc, #256]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800030e:	f001 f863 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 8000312:	2200      	movs	r2, #0
 8000314:	2140      	movs	r1, #64	; 0x40
 8000316:	483e      	ldr	r0, [pc, #248]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000318:	f001 f85e 	bl	80013d8 <HAL_GPIO_WritePin>
}
 800031c:	e073      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
	else if(motor_direction == 3)
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	2b03      	cmp	r3, #3
 8000322:	d114      	bne.n	800034e <l298n_dc_motor_direction_set+0x9a>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_SET);
 8000324:	2201      	movs	r2, #1
 8000326:	2108      	movs	r1, #8
 8000328:	4839      	ldr	r0, [pc, #228]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800032a:	f001 f855 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
 800032e:	2200      	movs	r2, #0
 8000330:	2110      	movs	r1, #16
 8000332:	4837      	ldr	r0, [pc, #220]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000334:	f001 f850 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_SET);
 8000338:	2201      	movs	r2, #1
 800033a:	2120      	movs	r1, #32
 800033c:	4834      	ldr	r0, [pc, #208]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800033e:	f001 f84b 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 8000342:	2200      	movs	r2, #0
 8000344:	2140      	movs	r1, #64	; 0x40
 8000346:	4832      	ldr	r0, [pc, #200]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000348:	f001 f846 	bl	80013d8 <HAL_GPIO_WritePin>
}
 800034c:	e05b      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
	else if(motor_direction == 4)
 800034e:	79fb      	ldrb	r3, [r7, #7]
 8000350:	2b04      	cmp	r3, #4
 8000352:	d114      	bne.n	800037e <l298n_dc_motor_direction_set+0xca>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2108      	movs	r1, #8
 8000358:	482d      	ldr	r0, [pc, #180]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800035a:	f001 f83d 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
 800035e:	2200      	movs	r2, #0
 8000360:	2110      	movs	r1, #16
 8000362:	482b      	ldr	r0, [pc, #172]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000364:	f001 f838 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 8000368:	2200      	movs	r2, #0
 800036a:	2120      	movs	r1, #32
 800036c:	4828      	ldr	r0, [pc, #160]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800036e:	f001 f833 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_SET);
 8000372:	2201      	movs	r2, #1
 8000374:	2140      	movs	r1, #64	; 0x40
 8000376:	4826      	ldr	r0, [pc, #152]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000378:	f001 f82e 	bl	80013d8 <HAL_GPIO_WritePin>
}
 800037c:	e043      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
	else if(motor_direction == 5)
 800037e:	79fb      	ldrb	r3, [r7, #7]
 8000380:	2b05      	cmp	r3, #5
 8000382:	d114      	bne.n	80003ae <l298n_dc_motor_direction_set+0xfa>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	2108      	movs	r1, #8
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800038a:	f001 f825 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_SET);
 800038e:	2201      	movs	r2, #1
 8000390:	2110      	movs	r1, #16
 8000392:	481f      	ldr	r0, [pc, #124]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000394:	f001 f820 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_SET);
 8000398:	2201      	movs	r2, #1
 800039a:	2120      	movs	r1, #32
 800039c:	481c      	ldr	r0, [pc, #112]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 800039e:	f001 f81b 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 80003a2:	2200      	movs	r2, #0
 80003a4:	2140      	movs	r1, #64	; 0x40
 80003a6:	481a      	ldr	r0, [pc, #104]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003a8:	f001 f816 	bl	80013d8 <HAL_GPIO_WritePin>
}
 80003ac:	e02b      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
	else if(motor_direction == 6)
 80003ae:	79fb      	ldrb	r3, [r7, #7]
 80003b0:	2b06      	cmp	r3, #6
 80003b2:	d114      	bne.n	80003de <l298n_dc_motor_direction_set+0x12a>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2108      	movs	r1, #8
 80003b8:	4815      	ldr	r0, [pc, #84]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003ba:	f001 f80d 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_SET);
 80003be:	2201      	movs	r2, #1
 80003c0:	2110      	movs	r1, #16
 80003c2:	4813      	ldr	r0, [pc, #76]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003c4:	f001 f808 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 80003c8:	2200      	movs	r2, #0
 80003ca:	2120      	movs	r1, #32
 80003cc:	4810      	ldr	r0, [pc, #64]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003ce:	f001 f803 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_SET);
 80003d2:	2201      	movs	r2, #1
 80003d4:	2140      	movs	r1, #64	; 0x40
 80003d6:	480e      	ldr	r0, [pc, #56]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003d8:	f000 fffe 	bl	80013d8 <HAL_GPIO_WritePin>
}
 80003dc:	e013      	b.n	8000406 <l298n_dc_motor_direction_set+0x152>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN1, GPIO_PIN_RESET);
 80003de:	2200      	movs	r2, #0
 80003e0:	2108      	movs	r1, #8
 80003e2:	480b      	ldr	r0, [pc, #44]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003e4:	f000 fff8 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN2, GPIO_PIN_RESET);
 80003e8:	2200      	movs	r2, #0
 80003ea:	2110      	movs	r1, #16
 80003ec:	4808      	ldr	r0, [pc, #32]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003ee:	f000 fff3 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN3, GPIO_PIN_RESET);
 80003f2:	2200      	movs	r2, #0
 80003f4:	2120      	movs	r1, #32
 80003f6:	4806      	ldr	r0, [pc, #24]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 80003f8:	f000 ffee 	bl	80013d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(IN_GPIO_PORT,IN4, GPIO_PIN_RESET);
 80003fc:	2200      	movs	r2, #0
 80003fe:	2140      	movs	r1, #64	; 0x40
 8000400:	4803      	ldr	r0, [pc, #12]	; (8000410 <l298n_dc_motor_direction_set+0x15c>)
 8000402:	f000 ffe9 	bl	80013d8 <HAL_GPIO_WritePin>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40010800 	.word	0x40010800

08000414 <l298n_dc_motor_pwm_set>:

void l298n_dc_motor_pwm_set(uint8_t motor_pwm_1, uint8_t motor_pwm_2)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	4603      	mov	r3, r0
 800041c:	460a      	mov	r2, r1
 800041e:	71fb      	strb	r3, [r7, #7]
 8000420:	4613      	mov	r3, r2
 8000422:	71bb      	strb	r3, [r7, #6]
	 __HAL_TIM_SET_COMPARE(&htim2, MOTOR_PWM_CH1, motor_pwm_1);
 8000424:	4b06      	ldr	r3, [pc, #24]	; (8000440 <l298n_dc_motor_pwm_set+0x2c>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	79fa      	ldrb	r2, [r7, #7]
 800042a:	63da      	str	r2, [r3, #60]	; 0x3c
	 __HAL_TIM_SET_COMPARE(&htim2, MOTOR_PWM_CH2, motor_pwm_2);
 800042c:	4b04      	ldr	r3, [pc, #16]	; (8000440 <l298n_dc_motor_pwm_set+0x2c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	79ba      	ldrb	r2, [r7, #6]
 8000432:	641a      	str	r2, [r3, #64]	; 0x40
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	bc80      	pop	{r7}
 800043c:	4770      	bx	lr
 800043e:	bf00      	nop
 8000440:	20000084 	.word	0x20000084

08000444 <l298n_dc_motor_movement>:

void l298n_dc_motor_movement(uint8_t movement, uint8_t motor_pwm_1, uint8_t motor_pwm_2)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
 800044e:	460b      	mov	r3, r1
 8000450:	71bb      	strb	r3, [r7, #6]
 8000452:	4613      	mov	r3, r2
 8000454:	717b      	strb	r3, [r7, #5]
	l298n_dc_motor_direction_set(movement);
 8000456:	79fb      	ldrb	r3, [r7, #7]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff ff2b 	bl	80002b4 <l298n_dc_motor_direction_set>
	l298n_dc_motor_pwm_set(motor_pwm_1, motor_pwm_2);
 800045e:	797a      	ldrb	r2, [r7, #5]
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	4611      	mov	r1, r2
 8000464:	4618      	mov	r0, r3
 8000466:	f7ff ffd5 	bl	8000414 <l298n_dc_motor_pwm_set>
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}

08000472 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000472:	b580      	push	{r7, lr}
 8000474:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000476:	f000 fbe5 	bl	8000c44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800047a:	f000 f809 	bl	8000490 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800047e:	f000 f8ed 	bl	800065c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000482:	f000 f8c1 	bl	8000608 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000486:	f000 f83f 	bl	8000508 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  app();
 800048a:	f7ff fe69 	bl	8000160 <app>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048e:	e7fe      	b.n	800048e <main+0x1c>

08000490 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b090      	sub	sp, #64	; 0x40
 8000494:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000496:	f107 0318 	add.w	r3, r7, #24
 800049a:	2228      	movs	r2, #40	; 0x28
 800049c:	2100      	movs	r1, #0
 800049e:	4618      	mov	r0, r3
 80004a0:	f003 faf6 	bl	8003a90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a4:	1d3b      	adds	r3, r7, #4
 80004a6:	2200      	movs	r2, #0
 80004a8:	601a      	str	r2, [r3, #0]
 80004aa:	605a      	str	r2, [r3, #4]
 80004ac:	609a      	str	r2, [r3, #8]
 80004ae:	60da      	str	r2, [r3, #12]
 80004b0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004b2:	2302      	movs	r3, #2
 80004b4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b6:	2301      	movs	r3, #1
 80004b8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004ba:	2310      	movs	r3, #16
 80004bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004be:	2300      	movs	r3, #0
 80004c0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004c2:	f107 0318 	add.w	r3, r7, #24
 80004c6:	4618      	mov	r0, r3
 80004c8:	f000 ffb8 	bl	800143c <HAL_RCC_OscConfig>
 80004cc:	4603      	mov	r3, r0
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	d001      	beq.n	80004d6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80004d2:	f000 f901 	bl	80006d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d6:	230f      	movs	r3, #15
 80004d8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004da:	2300      	movs	r3, #0
 80004dc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e6:	2300      	movs	r3, #0
 80004e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	2100      	movs	r1, #0
 80004ee:	4618      	mov	r0, r3
 80004f0:	f001 fa26 	bl	8001940 <HAL_RCC_ClockConfig>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004fa:	f000 f8ed 	bl	80006d8 <Error_Handler>
  }
}
 80004fe:	bf00      	nop
 8000500:	3740      	adds	r7, #64	; 0x40
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b08e      	sub	sp, #56	; 0x38
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051c:	f107 0320 	add.w	r3, r7, #32
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2200      	movs	r2, #0
 800052a:	601a      	str	r2, [r3, #0]
 800052c:	605a      	str	r2, [r3, #4]
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	60da      	str	r2, [r3, #12]
 8000532:	611a      	str	r2, [r3, #16]
 8000534:	615a      	str	r2, [r3, #20]
 8000536:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000538:	4b32      	ldr	r3, [pc, #200]	; (8000604 <MX_TIM2_Init+0xfc>)
 800053a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3;
 8000540:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_TIM2_Init+0xfc>)
 8000542:	2203      	movs	r2, #3
 8000544:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000546:	4b2f      	ldr	r3, [pc, #188]	; (8000604 <MX_TIM2_Init+0xfc>)
 8000548:	2200      	movs	r2, #0
 800054a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 800054c:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_TIM2_Init+0xfc>)
 800054e:	2263      	movs	r2, #99	; 0x63
 8000550:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000552:	4b2c      	ldr	r3, [pc, #176]	; (8000604 <MX_TIM2_Init+0xfc>)
 8000554:	2200      	movs	r2, #0
 8000556:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000558:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_TIM2_Init+0xfc>)
 800055a:	2200      	movs	r2, #0
 800055c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800055e:	4829      	ldr	r0, [pc, #164]	; (8000604 <MX_TIM2_Init+0xfc>)
 8000560:	f001 fb7c 	bl	8001c5c <HAL_TIM_Base_Init>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d001      	beq.n	800056e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800056a:	f000 f8b5 	bl	80006d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800056e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000572:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000574:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000578:	4619      	mov	r1, r3
 800057a:	4822      	ldr	r0, [pc, #136]	; (8000604 <MX_TIM2_Init+0xfc>)
 800057c:	f001 fdc4 	bl	8002108 <HAL_TIM_ConfigClockSource>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000586:	f000 f8a7 	bl	80006d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800058a:	481e      	ldr	r0, [pc, #120]	; (8000604 <MX_TIM2_Init+0xfc>)
 800058c:	f001 fc00 	bl	8001d90 <HAL_TIM_PWM_Init>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000596:	f000 f89f 	bl	80006d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800059a:	2300      	movs	r3, #0
 800059c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059e:	2300      	movs	r3, #0
 80005a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005a2:	f107 0320 	add.w	r3, r7, #32
 80005a6:	4619      	mov	r1, r3
 80005a8:	4816      	ldr	r0, [pc, #88]	; (8000604 <MX_TIM2_Init+0xfc>)
 80005aa:	f002 f919 	bl	80027e0 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80005b4:	f000 f890 	bl	80006d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005b8:	2360      	movs	r3, #96	; 0x60
 80005ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005c0:	2300      	movs	r3, #0
 80005c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2208      	movs	r2, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <MX_TIM2_Init+0xfc>)
 80005d0:	f001 fcd8 	bl	8001f84 <HAL_TIM_PWM_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80005da:	f000 f87d 	bl	80006d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	220c      	movs	r2, #12
 80005e2:	4619      	mov	r1, r3
 80005e4:	4807      	ldr	r0, [pc, #28]	; (8000604 <MX_TIM2_Init+0xfc>)
 80005e6:	f001 fccd 	bl	8001f84 <HAL_TIM_PWM_ConfigChannel>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80005f0:	f000 f872 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <MX_TIM2_Init+0xfc>)
 80005f6:	f000 f8c3 	bl	8000780 <HAL_TIM_MspPostInit>

}
 80005fa:	bf00      	nop
 80005fc:	3738      	adds	r7, #56	; 0x38
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000084 	.word	0x20000084

08000608 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800060c:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	; (8000658 <MX_USART1_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	; (8000654 <MX_USART1_UART_Init+0x4c>)
 8000640:	f002 f92c 	bl	800289c <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f845 	bl	80006d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	200000cc 	.word	0x200000cc
 8000658:	40013800 	.word	0x40013800

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b086      	sub	sp, #24
 8000660:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000662:	f107 0308 	add.w	r3, r7, #8
 8000666:	2200      	movs	r2, #0
 8000668:	601a      	str	r2, [r3, #0]
 800066a:	605a      	str	r2, [r3, #4]
 800066c:	609a      	str	r2, [r3, #8]
 800066e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000670:	4b17      	ldr	r3, [pc, #92]	; (80006d0 <MX_GPIO_Init+0x74>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <MX_GPIO_Init+0x74>)
 8000676:	f043 0304 	orr.w	r3, r3, #4
 800067a:	6193      	str	r3, [r2, #24]
 800067c:	4b14      	ldr	r3, [pc, #80]	; (80006d0 <MX_GPIO_Init+0x74>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	f003 0304 	and.w	r3, r3, #4
 8000684:	607b      	str	r3, [r7, #4]
 8000686:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_GPIO_Init+0x74>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a10      	ldr	r2, [pc, #64]	; (80006d0 <MX_GPIO_Init+0x74>)
 800068e:	f043 0308 	orr.w	r3, r3, #8
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_GPIO_Init+0x74>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0308 	and.w	r3, r3, #8
 800069c:	603b      	str	r3, [r7, #0]
 800069e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006a0:	2200      	movs	r2, #0
 80006a2:	217c      	movs	r1, #124	; 0x7c
 80006a4:	480b      	ldr	r0, [pc, #44]	; (80006d4 <MX_GPIO_Init+0x78>)
 80006a6:	f000 fe97 	bl	80013d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PA2 PA3 PA4 PA5
                           PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80006aa:	237c      	movs	r3, #124	; 0x7c
 80006ac:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ae:	2301      	movs	r3, #1
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b2:	2302      	movs	r3, #2
 80006b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b6:	2302      	movs	r3, #2
 80006b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ba:	f107 0308 	add.w	r3, r7, #8
 80006be:	4619      	mov	r1, r3
 80006c0:	4804      	ldr	r0, [pc, #16]	; (80006d4 <MX_GPIO_Init+0x78>)
 80006c2:	f000 fd05 	bl	80010d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006c6:	bf00      	nop
 80006c8:	3718      	adds	r7, #24
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000
 80006d4:	40010800 	.word	0x40010800

080006d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006dc:	b672      	cpsid	i
}
 80006de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e0:	e7fe      	b.n	80006e0 <Error_Handler+0x8>
	...

080006e4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ea:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_MspInit+0x5c>)
 80006ec:	699b      	ldr	r3, [r3, #24]
 80006ee:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_MspInit+0x5c>)
 80006f0:	f043 0301 	orr.w	r3, r3, #1
 80006f4:	6193      	str	r3, [r2, #24]
 80006f6:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_MspInit+0x5c>)
 80006f8:	699b      	ldr	r3, [r3, #24]
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	60bb      	str	r3, [r7, #8]
 8000700:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <HAL_MspInit+0x5c>)
 8000704:	69db      	ldr	r3, [r3, #28]
 8000706:	4a0e      	ldr	r2, [pc, #56]	; (8000740 <HAL_MspInit+0x5c>)
 8000708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800070c:	61d3      	str	r3, [r2, #28]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <HAL_MspInit+0x5c>)
 8000710:	69db      	ldr	r3, [r3, #28]
 8000712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000716:	607b      	str	r3, [r7, #4]
 8000718:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800071a:	4b0a      	ldr	r3, [pc, #40]	; (8000744 <HAL_MspInit+0x60>)
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	60fb      	str	r3, [r7, #12]
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000726:	60fb      	str	r3, [r7, #12]
 8000728:	68fb      	ldr	r3, [r7, #12]
 800072a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_MspInit+0x60>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	3714      	adds	r7, #20
 800073a:	46bd      	mov	sp, r7
 800073c:	bc80      	pop	{r7}
 800073e:	4770      	bx	lr
 8000740:	40021000 	.word	0x40021000
 8000744:	40010000 	.word	0x40010000

08000748 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000758:	d10b      	bne.n	8000772 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800075a:	4b08      	ldr	r3, [pc, #32]	; (800077c <HAL_TIM_Base_MspInit+0x34>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a07      	ldr	r2, [pc, #28]	; (800077c <HAL_TIM_Base_MspInit+0x34>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b05      	ldr	r3, [pc, #20]	; (800077c <HAL_TIM_Base_MspInit+0x34>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60fb      	str	r3, [r7, #12]
 8000770:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b088      	sub	sp, #32
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800079e:	d12a      	bne.n	80007f6 <HAL_TIM_MspPostInit+0x76>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_TIM_MspPostInit+0x80>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_TIM_MspPostInit+0x80>)
 80007a6:	f043 0308 	orr.w	r3, r3, #8
 80007aa:	6193      	str	r3, [r2, #24]
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_TIM_MspPostInit+0x80>)
 80007ae:	699b      	ldr	r3, [r3, #24]
 80007b0:	f003 0308 	and.w	r3, r3, #8
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007bc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007be:	2302      	movs	r3, #2
 80007c0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c2:	2302      	movs	r3, #2
 80007c4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c6:	f107 030c 	add.w	r3, r7, #12
 80007ca:	4619      	mov	r1, r3
 80007cc:	480d      	ldr	r0, [pc, #52]	; (8000804 <HAL_TIM_MspPostInit+0x84>)
 80007ce:	f000 fc7f 	bl	80010d0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_2();
 80007d2:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <HAL_TIM_MspPostInit+0x88>)
 80007d4:	685b      	ldr	r3, [r3, #4]
 80007d6:	61fb      	str	r3, [r7, #28]
 80007d8:	69fb      	ldr	r3, [r7, #28]
 80007da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80007de:	61fb      	str	r3, [r7, #28]
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
 80007ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ee:	61fb      	str	r3, [r7, #28]
 80007f0:	4a05      	ldr	r2, [pc, #20]	; (8000808 <HAL_TIM_MspPostInit+0x88>)
 80007f2:	69fb      	ldr	r3, [r7, #28]
 80007f4:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000
 8000804:	40010c00 	.word	0x40010c00
 8000808:	40010000 	.word	0x40010000

0800080c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b088      	sub	sp, #32
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000814:	f107 0310 	add.w	r3, r7, #16
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4a20      	ldr	r2, [pc, #128]	; (80008a8 <HAL_UART_MspInit+0x9c>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d139      	bne.n	80008a0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800082c:	4b1f      	ldr	r3, [pc, #124]	; (80008ac <HAL_UART_MspInit+0xa0>)
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000832:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000836:	6193      	str	r3, [r2, #24]
 8000838:	4b1c      	ldr	r3, [pc, #112]	; (80008ac <HAL_UART_MspInit+0xa0>)
 800083a:	699b      	ldr	r3, [r3, #24]
 800083c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000840:	60fb      	str	r3, [r7, #12]
 8000842:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000844:	4b19      	ldr	r3, [pc, #100]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	4a18      	ldr	r2, [pc, #96]	; (80008ac <HAL_UART_MspInit+0xa0>)
 800084a:	f043 0304 	orr.w	r3, r3, #4
 800084e:	6193      	str	r3, [r2, #24]
 8000850:	4b16      	ldr	r3, [pc, #88]	; (80008ac <HAL_UART_MspInit+0xa0>)
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	f003 0304 	and.w	r3, r3, #4
 8000858:	60bb      	str	r3, [r7, #8]
 800085a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800085c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000860:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000862:	2302      	movs	r3, #2
 8000864:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0310 	add.w	r3, r7, #16
 800086e:	4619      	mov	r1, r3
 8000870:	480f      	ldr	r0, [pc, #60]	; (80008b0 <HAL_UART_MspInit+0xa4>)
 8000872:	f000 fc2d 	bl	80010d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000876:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800087a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0310 	add.w	r3, r7, #16
 8000888:	4619      	mov	r1, r3
 800088a:	4809      	ldr	r0, [pc, #36]	; (80008b0 <HAL_UART_MspInit+0xa4>)
 800088c:	f000 fc20 	bl	80010d0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000890:	2200      	movs	r2, #0
 8000892:	2100      	movs	r1, #0
 8000894:	2025      	movs	r0, #37	; 0x25
 8000896:	f000 fb32 	bl	8000efe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800089a:	2025      	movs	r0, #37	; 0x25
 800089c:	f000 fb4b 	bl	8000f36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80008a0:	bf00      	nop
 80008a2:	3720      	adds	r7, #32
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40013800 	.word	0x40013800
 80008ac:	40021000 	.word	0x40021000
 80008b0:	40010800 	.word	0x40010800

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f9e9 	bl	8000cd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}
	...

08000904 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <USART1_IRQHandler+0x10>)
 800090a:	f002 f8bf 	bl	8002a8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000cc 	.word	0x200000cc

08000918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  return 1;
 800091c:	2301      	movs	r3, #1
}
 800091e:	4618      	mov	r0, r3
 8000920:	46bd      	mov	sp, r7
 8000922:	bc80      	pop	{r7}
 8000924:	4770      	bx	lr

08000926 <_kill>:

int _kill(int pid, int sig)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	6078      	str	r0, [r7, #4]
 800092e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000930:	f003 f958 	bl	8003be4 <__errno>
 8000934:	4603      	mov	r3, r0
 8000936:	2216      	movs	r2, #22
 8000938:	601a      	str	r2, [r3, #0]
  return -1;
 800093a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800093e:	4618      	mov	r0, r3
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <_exit>:

void _exit (int status)
{
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800094e:	f04f 31ff 	mov.w	r1, #4294967295
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffe7 	bl	8000926 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000958:	e7fe      	b.n	8000958 <_exit+0x12>

0800095a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800095a:	b580      	push	{r7, lr}
 800095c:	b086      	sub	sp, #24
 800095e:	af00      	add	r7, sp, #0
 8000960:	60f8      	str	r0, [r7, #12]
 8000962:	60b9      	str	r1, [r7, #8]
 8000964:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
 800096a:	e00a      	b.n	8000982 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800096c:	f3af 8000 	nop.w
 8000970:	4601      	mov	r1, r0
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	1c5a      	adds	r2, r3, #1
 8000976:	60ba      	str	r2, [r7, #8]
 8000978:	b2ca      	uxtb	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	3301      	adds	r3, #1
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	697a      	ldr	r2, [r7, #20]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	429a      	cmp	r2, r3
 8000988:	dbf0      	blt.n	800096c <_read+0x12>
  }

  return len;
 800098a:	687b      	ldr	r3, [r7, #4]
}
 800098c:	4618      	mov	r0, r3
 800098e:	3718      	adds	r7, #24
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
 80009a4:	e009      	b.n	80009ba <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009a6:	68bb      	ldr	r3, [r7, #8]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	60ba      	str	r2, [r7, #8]
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f910 	bl	8000bd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	3301      	adds	r3, #1
 80009b8:	617b      	str	r3, [r7, #20]
 80009ba:	697a      	ldr	r2, [r7, #20]
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	429a      	cmp	r2, r3
 80009c0:	dbf1      	blt.n	80009a6 <_write+0x12>
  }
  return len;
 80009c2:	687b      	ldr	r3, [r7, #4]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3718      	adds	r7, #24
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}

080009cc <_close>:

int _close(int file)
{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009d8:	4618      	mov	r0, r3
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009f2:	605a      	str	r2, [r3, #4]
  return 0;
 80009f4:	2300      	movs	r3, #0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	370c      	adds	r7, #12
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bc80      	pop	{r7}
 80009fe:	4770      	bx	lr

08000a00 <_isatty>:

int _isatty(int file)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a08:	2301      	movs	r3, #1
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bc80      	pop	{r7}
 8000a12:	4770      	bx	lr

08000a14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	60f8      	str	r0, [r7, #12]
 8000a1c:	60b9      	str	r1, [r7, #8]
 8000a1e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bc80      	pop	{r7}
 8000a2a:	4770      	bx	lr

08000a2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b086      	sub	sp, #24
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a34:	4a14      	ldr	r2, [pc, #80]	; (8000a88 <_sbrk+0x5c>)
 8000a36:	4b15      	ldr	r3, [pc, #84]	; (8000a8c <_sbrk+0x60>)
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a3c:	697b      	ldr	r3, [r7, #20]
 8000a3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a40:	4b13      	ldr	r3, [pc, #76]	; (8000a90 <_sbrk+0x64>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d102      	bne.n	8000a4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <_sbrk+0x64>)
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <_sbrk+0x68>)
 8000a4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <_sbrk+0x64>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4413      	add	r3, r2
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d207      	bcs.n	8000a6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a5c:	f003 f8c2 	bl	8003be4 <__errno>
 8000a60:	4603      	mov	r3, r0
 8000a62:	220c      	movs	r2, #12
 8000a64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a66:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6a:	e009      	b.n	8000a80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <_sbrk+0x64>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a72:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <_sbrk+0x64>)
 8000a74:	681a      	ldr	r2, [r3, #0]
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4413      	add	r3, r2
 8000a7a:	4a05      	ldr	r2, [pc, #20]	; (8000a90 <_sbrk+0x64>)
 8000a7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a7e:	68fb      	ldr	r3, [r7, #12]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	20005000 	.word	0x20005000
 8000a8c:	00000400 	.word	0x00000400
 8000a90:	20000114 	.word	0x20000114
 8000a94:	20000340 	.word	0x20000340

08000a98 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bc80      	pop	{r7}
 8000aa2:	4770      	bx	lr

08000aa4 <uart_init>:

static UART_CBF uart_cbf;
volatile uint8_t rxd;

void uart_init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
    gBufObj[0].idx = 0;
 8000aa8:	4b08      	ldr	r3, [pc, #32]	; (8000acc <uart_init+0x28>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    gBufObj[0].flag = false;
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <uart_init+0x28>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxd, 1);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	4905      	ldr	r1, [pc, #20]	; (8000ad0 <uart_init+0x2c>)
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <uart_init+0x30>)
 8000abe:	f001 ffc0 	bl	8002a42 <HAL_UART_Receive_IT>

    printf("UART Initialized...\r\n");
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <uart_init+0x34>)
 8000ac4:	f002 ff04 	bl	80038d0 <puts>
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000118 	.word	0x20000118
 8000ad0:	200001ec 	.word	0x200001ec
 8000ad4:	200000cc 	.word	0x200000cc
 8000ad8:	08004798 	.word	0x08004798

08000adc <uart_regcbf>:

void uart_regcbf(UART_CBF cbf)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
    uart_cbf = cbf;
 8000ae4:	4a03      	ldr	r2, [pc, #12]	; (8000af4 <uart_regcbf+0x18>)
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	6013      	str	r3, [r2, #0]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr
 8000af4:	200001e8 	.word	0x200001e8

08000af8 <uart_proc>:

// non-blocking procedure routine
void uart_proc(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
    BUF_T* p = (BUF_T*)&gBufObj[0];
 8000afe:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <uart_proc+0x40>)
 8000b00:	607b      	str	r3, [r7, #4]

    if (p->flag == true) {
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d110      	bne.n	8000b2e <uart_proc+0x36>
        //printf("%s:%s", __func__, p->buf);
        // uart parsing
        if (uart_cbf != NULL) uart_cbf(p->buf);
 8000b0c:	4b0b      	ldr	r3, [pc, #44]	; (8000b3c <uart_proc+0x44>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d004      	beq.n	8000b1e <uart_proc+0x26>
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <uart_proc+0x44>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	687a      	ldr	r2, [r7, #4]
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4798      	blx	r3

        p->idx = 0;
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2200      	movs	r2, #0
 8000b22:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        p->flag = false;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
    }
}
 8000b2e:	bf00      	nop
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000118 	.word	0x20000118
 8000b3c:	200001e8 	.word	0x200001e8

08000b40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b084      	sub	sp, #16
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
    if (huart == &huart1) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a1f      	ldr	r2, [pc, #124]	; (8000bc8 <HAL_UART_RxCpltCallback+0x88>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d136      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0x7e>
        BUF_T* p = (BUF_T*)&gBufObj[0];
 8000b50:	4b1e      	ldr	r3, [pc, #120]	; (8000bcc <HAL_UART_RxCpltCallback+0x8c>)
 8000b52:	60fb      	str	r3, [r7, #12]

        if (p->flag == false) {
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d12a      	bne.n	8000bb4 <HAL_UART_RxCpltCallback+0x74>
            p->buf[p->idx] = rxd;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <HAL_UART_RxCpltCallback+0x90>)
 8000b68:	781b      	ldrb	r3, [r3, #0]
 8000b6a:	b2d9      	uxtb	r1, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	5499      	strb	r1, [r3, r2]
            //p->idx++;
            //p->idx %= D_BUF_MAX;
            if (p->idx < D_BUF_MAX) {
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000b76:	2b63      	cmp	r3, #99	; 0x63
 8000b78:	d807      	bhi.n	8000b8a <HAL_UART_RxCpltCallback+0x4a>
                p->idx++;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000b80:	3301      	adds	r3, #1
 8000b82:	b2da      	uxtb	r2, r3
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
            }

            if (rxd == '\r' || rxd == '\n') {
 8000b8a:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <HAL_UART_RxCpltCallback+0x90>)
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	2b0d      	cmp	r3, #13
 8000b92:	d004      	beq.n	8000b9e <HAL_UART_RxCpltCallback+0x5e>
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <HAL_UART_RxCpltCallback+0x90>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	b2db      	uxtb	r3, r3
 8000b9a:	2b0a      	cmp	r3, #10
 8000b9c:	d10a      	bne.n	8000bb4 <HAL_UART_RxCpltCallback+0x74>
                p->buf[p->idx] = '\0';
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	2100      	movs	r1, #0
 8000baa:	5499      	strb	r1, [r3, r2]
                p->flag = true;
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	2201      	movs	r2, #1
 8000bb0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
            }
        }

        HAL_UART_Receive_IT(&huart1, (uint8_t*)&rxd, 1);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4906      	ldr	r1, [pc, #24]	; (8000bd0 <HAL_UART_RxCpltCallback+0x90>)
 8000bb8:	4803      	ldr	r0, [pc, #12]	; (8000bc8 <HAL_UART_RxCpltCallback+0x88>)
 8000bba:	f001 ff42 	bl	8002a42 <HAL_UART_Receive_IT>
    }
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000cc 	.word	0x200000cc
 8000bcc:	20000118 	.word	0x20000118
 8000bd0:	200001ec 	.word	0x200001ec

08000bd4 <__io_putchar>:


int __io_putchar(int ch)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, 0xffff);
 8000bdc:	1d39      	adds	r1, r7, #4
 8000bde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000be2:	2201      	movs	r2, #1
 8000be4:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <__io_putchar+0x20>)
 8000be6:	f001 fea9 	bl	800293c <HAL_UART_Transmit>
    return ch;
 8000bea:	687b      	ldr	r3, [r7, #4]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	200000cc 	.word	0x200000cc

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ff4e 	bl	8000a98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480b      	ldr	r0, [pc, #44]	; (8000c2c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000bfe:	490c      	ldr	r1, [pc, #48]	; (8000c30 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c00:	4a0c      	ldr	r2, [pc, #48]	; (8000c34 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a09      	ldr	r2, [pc, #36]	; (8000c38 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c14:	4c09      	ldr	r4, [pc, #36]	; (8000c3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f002 ffe5 	bl	8003bf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c26:	f7ff fc24 	bl	8000472 <main>
  bx lr
 8000c2a:	4770      	bx	lr
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c34:	080049c4 	.word	0x080049c4
  ldr r2, =_sbss
 8000c38:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c3c:	20000340 	.word	0x20000340

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_Init+0x28>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a07      	ldr	r2, [pc, #28]	; (8000c6c <HAL_Init+0x28>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c54:	2003      	movs	r0, #3
 8000c56:	f000 f947 	bl	8000ee8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5a:	200f      	movs	r0, #15
 8000c5c:	f000 f808 	bl	8000c70 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c60:	f7ff fd40 	bl	80006e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c64:	2300      	movs	r3, #0
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	40022000 	.word	0x40022000

08000c70 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x54>)
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	4b12      	ldr	r3, [pc, #72]	; (8000cc8 <HAL_InitTick+0x58>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	4619      	mov	r1, r3
 8000c82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 f95f 	bl	8000f52 <HAL_SYSTICK_Config>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e00e      	b.n	8000cbc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2b0f      	cmp	r3, #15
 8000ca2:	d80a      	bhi.n	8000cba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cac:	f000 f927 	bl	8000efe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cb0:	4a06      	ldr	r2, [pc, #24]	; (8000ccc <HAL_InitTick+0x5c>)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e000      	b.n	8000cbc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cba:	2301      	movs	r3, #1
}
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	3708      	adds	r7, #8
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000008 	.word	0x20000008
 8000ccc:	20000004 	.word	0x20000004

08000cd0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x1c>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <HAL_IncTick+0x20>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4413      	add	r3, r2
 8000ce0:	4a03      	ldr	r2, [pc, #12]	; (8000cf0 <HAL_IncTick+0x20>)
 8000ce2:	6013      	str	r3, [r2, #0]
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bc80      	pop	{r7}
 8000cea:	4770      	bx	lr
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	200001f0 	.word	0x200001f0

08000cf4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf8:	4b02      	ldr	r3, [pc, #8]	; (8000d04 <HAL_GetTick+0x10>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
}
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	200001f0 	.word	0x200001f0

08000d08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d10:	f7ff fff0 	bl	8000cf4 <HAL_GetTick>
 8000d14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d20:	d005      	beq.n	8000d2e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_Delay+0x44>)
 8000d24:	781b      	ldrb	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d2e:	bf00      	nop
 8000d30:	f7ff ffe0 	bl	8000cf4 <HAL_GetTick>
 8000d34:	4602      	mov	r2, r0
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	68fa      	ldr	r2, [r7, #12]
 8000d3c:	429a      	cmp	r2, r3
 8000d3e:	d8f7      	bhi.n	8000d30 <HAL_Delay+0x28>
  {
  }
}
 8000d40:	bf00      	nop
 8000d42:	bf00      	nop
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000008 	.word	0x20000008

08000d50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d60:	4b0c      	ldr	r3, [pc, #48]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d62:	68db      	ldr	r3, [r3, #12]
 8000d64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d66:	68ba      	ldr	r2, [r7, #8]
 8000d68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d82:	4a04      	ldr	r2, [pc, #16]	; (8000d94 <__NVIC_SetPriorityGrouping+0x44>)
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	60d3      	str	r3, [r2, #12]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d9c:	4b04      	ldr	r3, [pc, #16]	; (8000db0 <__NVIC_GetPriorityGrouping+0x18>)
 8000d9e:	68db      	ldr	r3, [r3, #12]
 8000da0:	0a1b      	lsrs	r3, r3, #8
 8000da2:	f003 0307 	and.w	r3, r3, #7
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	4603      	mov	r3, r0
 8000dbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	db0b      	blt.n	8000dde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dc6:	79fb      	ldrb	r3, [r7, #7]
 8000dc8:	f003 021f 	and.w	r2, r3, #31
 8000dcc:	4906      	ldr	r1, [pc, #24]	; (8000de8 <__NVIC_EnableIRQ+0x34>)
 8000dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd2:	095b      	lsrs	r3, r3, #5
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	fa00 f202 	lsl.w	r2, r0, r2
 8000dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bc80      	pop	{r7}
 8000de6:	4770      	bx	lr
 8000de8:	e000e100 	.word	0xe000e100

08000dec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	6039      	str	r1, [r7, #0]
 8000df6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	db0a      	blt.n	8000e16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	b2da      	uxtb	r2, r3
 8000e04:	490c      	ldr	r1, [pc, #48]	; (8000e38 <__NVIC_SetPriority+0x4c>)
 8000e06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0a:	0112      	lsls	r2, r2, #4
 8000e0c:	b2d2      	uxtb	r2, r2
 8000e0e:	440b      	add	r3, r1
 8000e10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e14:	e00a      	b.n	8000e2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	b2da      	uxtb	r2, r3
 8000e1a:	4908      	ldr	r1, [pc, #32]	; (8000e3c <__NVIC_SetPriority+0x50>)
 8000e1c:	79fb      	ldrb	r3, [r7, #7]
 8000e1e:	f003 030f 	and.w	r3, r3, #15
 8000e22:	3b04      	subs	r3, #4
 8000e24:	0112      	lsls	r2, r2, #4
 8000e26:	b2d2      	uxtb	r2, r2
 8000e28:	440b      	add	r3, r1
 8000e2a:	761a      	strb	r2, [r3, #24]
}
 8000e2c:	bf00      	nop
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bc80      	pop	{r7}
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100
 8000e3c:	e000ed00 	.word	0xe000ed00

08000e40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b089      	sub	sp, #36	; 0x24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e54:	69fb      	ldr	r3, [r7, #28]
 8000e56:	f1c3 0307 	rsb	r3, r3, #7
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	bf28      	it	cs
 8000e5e:	2304      	movcs	r3, #4
 8000e60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3304      	adds	r3, #4
 8000e66:	2b06      	cmp	r3, #6
 8000e68:	d902      	bls.n	8000e70 <NVIC_EncodePriority+0x30>
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3b03      	subs	r3, #3
 8000e6e:	e000      	b.n	8000e72 <NVIC_EncodePriority+0x32>
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e74:	f04f 32ff 	mov.w	r2, #4294967295
 8000e78:	69bb      	ldr	r3, [r7, #24]
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43da      	mvns	r2, r3
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	401a      	ands	r2, r3
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e88:	f04f 31ff 	mov.w	r1, #4294967295
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e92:	43d9      	mvns	r1, r3
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e98:	4313      	orrs	r3, r2
         );
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3724      	adds	r7, #36	; 0x24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr

08000ea4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb4:	d301      	bcc.n	8000eba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e00f      	b.n	8000eda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eba:	4a0a      	ldr	r2, [pc, #40]	; (8000ee4 <SysTick_Config+0x40>)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ec2:	210f      	movs	r1, #15
 8000ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec8:	f7ff ff90 	bl	8000dec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <SysTick_Config+0x40>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ed2:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <SysTick_Config+0x40>)
 8000ed4:	2207      	movs	r2, #7
 8000ed6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed8:	2300      	movs	r3, #0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	e000e010 	.word	0xe000e010

08000ee8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ef0:	6878      	ldr	r0, [r7, #4]
 8000ef2:	f7ff ff2d 	bl	8000d50 <__NVIC_SetPriorityGrouping>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b086      	sub	sp, #24
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	4603      	mov	r3, r0
 8000f06:	60b9      	str	r1, [r7, #8]
 8000f08:	607a      	str	r2, [r7, #4]
 8000f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f10:	f7ff ff42 	bl	8000d98 <__NVIC_GetPriorityGrouping>
 8000f14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f16:	687a      	ldr	r2, [r7, #4]
 8000f18:	68b9      	ldr	r1, [r7, #8]
 8000f1a:	6978      	ldr	r0, [r7, #20]
 8000f1c:	f7ff ff90 	bl	8000e40 <NVIC_EncodePriority>
 8000f20:	4602      	mov	r2, r0
 8000f22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff5f 	bl	8000dec <__NVIC_SetPriority>
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b082      	sub	sp, #8
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff35 	bl	8000db4 <__NVIC_EnableIRQ>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffa2 	bl	8000ea4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}

08000f6a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	b085      	sub	sp, #20
 8000f6e:	af00      	add	r7, sp, #0
 8000f70:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f7c:	b2db      	uxtb	r3, r3
 8000f7e:	2b02      	cmp	r3, #2
 8000f80:	d008      	beq.n	8000f94 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2204      	movs	r2, #4
 8000f86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e020      	b.n	8000fd6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f022 020e 	bic.w	r2, r2, #14
 8000fa2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f022 0201 	bic.w	r2, r2, #1
 8000fb2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fbc:	2101      	movs	r1, #1
 8000fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000fc2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr

08000fe0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b084      	sub	sp, #16
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	2b02      	cmp	r3, #2
 8000ff6:	d005      	beq.n	8001004 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	73fb      	strb	r3, [r7, #15]
 8001002:	e051      	b.n	80010a8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f022 020e 	bic.w	r2, r2, #14
 8001012:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f022 0201 	bic.w	r2, r2, #1
 8001022:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a22      	ldr	r2, [pc, #136]	; (80010b4 <HAL_DMA_Abort_IT+0xd4>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d029      	beq.n	8001082 <HAL_DMA_Abort_IT+0xa2>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <HAL_DMA_Abort_IT+0xd8>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d022      	beq.n	800107e <HAL_DMA_Abort_IT+0x9e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a1f      	ldr	r2, [pc, #124]	; (80010bc <HAL_DMA_Abort_IT+0xdc>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d01a      	beq.n	8001078 <HAL_DMA_Abort_IT+0x98>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a1e      	ldr	r2, [pc, #120]	; (80010c0 <HAL_DMA_Abort_IT+0xe0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d012      	beq.n	8001072 <HAL_DMA_Abort_IT+0x92>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a1c      	ldr	r2, [pc, #112]	; (80010c4 <HAL_DMA_Abort_IT+0xe4>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d00a      	beq.n	800106c <HAL_DMA_Abort_IT+0x8c>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a1b      	ldr	r2, [pc, #108]	; (80010c8 <HAL_DMA_Abort_IT+0xe8>)
 800105c:	4293      	cmp	r3, r2
 800105e:	d102      	bne.n	8001066 <HAL_DMA_Abort_IT+0x86>
 8001060:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001064:	e00e      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001066:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800106a:	e00b      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 800106c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001070:	e008      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001072:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001076:	e005      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001078:	f44f 7380 	mov.w	r3, #256	; 0x100
 800107c:	e002      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 800107e:	2310      	movs	r3, #16
 8001080:	e000      	b.n	8001084 <HAL_DMA_Abort_IT+0xa4>
 8001082:	2301      	movs	r3, #1
 8001084:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_DMA_Abort_IT+0xec>)
 8001086:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2201      	movs	r2, #1
 800108c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2200      	movs	r2, #0
 8001094:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800109c:	2b00      	cmp	r3, #0
 800109e:	d003      	beq.n	80010a8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a4:	6878      	ldr	r0, [r7, #4]
 80010a6:	4798      	blx	r3
    } 
  }
  return status;
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3710      	adds	r7, #16
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020008 	.word	0x40020008
 80010b8:	4002001c 	.word	0x4002001c
 80010bc:	40020030 	.word	0x40020030
 80010c0:	40020044 	.word	0x40020044
 80010c4:	40020058 	.word	0x40020058
 80010c8:	4002006c 	.word	0x4002006c
 80010cc:	40020000 	.word	0x40020000

080010d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b08b      	sub	sp, #44	; 0x2c
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010e2:	e169      	b.n	80013b8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010e4:	2201      	movs	r2, #1
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	69fa      	ldr	r2, [r7, #28]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	69fb      	ldr	r3, [r7, #28]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f040 8158 	bne.w	80013b2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	4a9a      	ldr	r2, [pc, #616]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d05e      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800110c:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_GPIO_Init+0x2a0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d875      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001112:	4a98      	ldr	r2, [pc, #608]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d058      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001118:	4a96      	ldr	r2, [pc, #600]	; (8001374 <HAL_GPIO_Init+0x2a4>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d86f      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800111e:	4a96      	ldr	r2, [pc, #600]	; (8001378 <HAL_GPIO_Init+0x2a8>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d052      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001124:	4a94      	ldr	r2, [pc, #592]	; (8001378 <HAL_GPIO_Init+0x2a8>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d869      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800112a:	4a94      	ldr	r2, [pc, #592]	; (800137c <HAL_GPIO_Init+0x2ac>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d04c      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 8001130:	4a92      	ldr	r2, [pc, #584]	; (800137c <HAL_GPIO_Init+0x2ac>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d863      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001136:	4a92      	ldr	r2, [pc, #584]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d046      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
 800113c:	4a90      	ldr	r2, [pc, #576]	; (8001380 <HAL_GPIO_Init+0x2b0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d85d      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 8001142:	2b12      	cmp	r3, #18
 8001144:	d82a      	bhi.n	800119c <HAL_GPIO_Init+0xcc>
 8001146:	2b12      	cmp	r3, #18
 8001148:	d859      	bhi.n	80011fe <HAL_GPIO_Init+0x12e>
 800114a:	a201      	add	r2, pc, #4	; (adr r2, 8001150 <HAL_GPIO_Init+0x80>)
 800114c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001150:	080011cb 	.word	0x080011cb
 8001154:	080011a5 	.word	0x080011a5
 8001158:	080011b7 	.word	0x080011b7
 800115c:	080011f9 	.word	0x080011f9
 8001160:	080011ff 	.word	0x080011ff
 8001164:	080011ff 	.word	0x080011ff
 8001168:	080011ff 	.word	0x080011ff
 800116c:	080011ff 	.word	0x080011ff
 8001170:	080011ff 	.word	0x080011ff
 8001174:	080011ff 	.word	0x080011ff
 8001178:	080011ff 	.word	0x080011ff
 800117c:	080011ff 	.word	0x080011ff
 8001180:	080011ff 	.word	0x080011ff
 8001184:	080011ff 	.word	0x080011ff
 8001188:	080011ff 	.word	0x080011ff
 800118c:	080011ff 	.word	0x080011ff
 8001190:	080011ff 	.word	0x080011ff
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011c1 	.word	0x080011c1
 800119c:	4a79      	ldr	r2, [pc, #484]	; (8001384 <HAL_GPIO_Init+0x2b4>)
 800119e:	4293      	cmp	r3, r2
 80011a0:	d013      	beq.n	80011ca <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011a2:	e02c      	b.n	80011fe <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	623b      	str	r3, [r7, #32]
          break;
 80011aa:	e029      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	3304      	adds	r3, #4
 80011b2:	623b      	str	r3, [r7, #32]
          break;
 80011b4:	e024      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	3308      	adds	r3, #8
 80011bc:	623b      	str	r3, [r7, #32]
          break;
 80011be:	e01f      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	330c      	adds	r3, #12
 80011c6:	623b      	str	r3, [r7, #32]
          break;
 80011c8:	e01a      	b.n	8001200 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d102      	bne.n	80011d8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011d2:	2304      	movs	r3, #4
 80011d4:	623b      	str	r3, [r7, #32]
          break;
 80011d6:	e013      	b.n	8001200 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d105      	bne.n	80011ec <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e0:	2308      	movs	r3, #8
 80011e2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	69fa      	ldr	r2, [r7, #28]
 80011e8:	611a      	str	r2, [r3, #16]
          break;
 80011ea:	e009      	b.n	8001200 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011ec:	2308      	movs	r3, #8
 80011ee:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69fa      	ldr	r2, [r7, #28]
 80011f4:	615a      	str	r2, [r3, #20]
          break;
 80011f6:	e003      	b.n	8001200 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80011f8:	2300      	movs	r3, #0
 80011fa:	623b      	str	r3, [r7, #32]
          break;
 80011fc:	e000      	b.n	8001200 <HAL_GPIO_Init+0x130>
          break;
 80011fe:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001200:	69bb      	ldr	r3, [r7, #24]
 8001202:	2bff      	cmp	r3, #255	; 0xff
 8001204:	d801      	bhi.n	800120a <HAL_GPIO_Init+0x13a>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	e001      	b.n	800120e <HAL_GPIO_Init+0x13e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	3304      	adds	r3, #4
 800120e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d802      	bhi.n	800121c <HAL_GPIO_Init+0x14c>
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x152>
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	3b08      	subs	r3, #8
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	210f      	movs	r1, #15
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	401a      	ands	r2, r3
 8001234:	6a39      	ldr	r1, [r7, #32]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	fa01 f303 	lsl.w	r3, r1, r3
 800123c:	431a      	orrs	r2, r3
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800124a:	2b00      	cmp	r3, #0
 800124c:	f000 80b1 	beq.w	80013b2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001250:	4b4d      	ldr	r3, [pc, #308]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	4a4c      	ldr	r2, [pc, #304]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 8001256:	f043 0301 	orr.w	r3, r3, #1
 800125a:	6193      	str	r3, [r2, #24]
 800125c:	4b4a      	ldr	r3, [pc, #296]	; (8001388 <HAL_GPIO_Init+0x2b8>)
 800125e:	699b      	ldr	r3, [r3, #24]
 8001260:	f003 0301 	and.w	r3, r3, #1
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001268:	4a48      	ldr	r2, [pc, #288]	; (800138c <HAL_GPIO_Init+0x2bc>)
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001274:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001278:	f003 0303 	and.w	r3, r3, #3
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	68fa      	ldr	r2, [r7, #12]
 8001288:	4013      	ands	r3, r2
 800128a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a40      	ldr	r2, [pc, #256]	; (8001390 <HAL_GPIO_Init+0x2c0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d013      	beq.n	80012bc <HAL_GPIO_Init+0x1ec>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a3f      	ldr	r2, [pc, #252]	; (8001394 <HAL_GPIO_Init+0x2c4>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d00d      	beq.n	80012b8 <HAL_GPIO_Init+0x1e8>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3e      	ldr	r2, [pc, #248]	; (8001398 <HAL_GPIO_Init+0x2c8>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d007      	beq.n	80012b4 <HAL_GPIO_Init+0x1e4>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3d      	ldr	r2, [pc, #244]	; (800139c <HAL_GPIO_Init+0x2cc>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_GPIO_Init+0x1e0>
 80012ac:	2303      	movs	r3, #3
 80012ae:	e006      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b0:	2304      	movs	r3, #4
 80012b2:	e004      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b4:	2302      	movs	r3, #2
 80012b6:	e002      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_GPIO_Init+0x1ee>
 80012bc:	2300      	movs	r3, #0
 80012be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012c0:	f002 0203 	and.w	r2, r2, #3
 80012c4:	0092      	lsls	r2, r2, #2
 80012c6:	4093      	lsls	r3, r2
 80012c8:	68fa      	ldr	r2, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012ce:	492f      	ldr	r1, [pc, #188]	; (800138c <HAL_GPIO_Init+0x2bc>)
 80012d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	3302      	adds	r3, #2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	685b      	ldr	r3, [r3, #4]
 80012e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012e8:	4b2d      	ldr	r3, [pc, #180]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	492c      	ldr	r1, [pc, #176]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	4313      	orrs	r3, r2
 80012f2:	608b      	str	r3, [r1, #8]
 80012f4:	e006      	b.n	8001304 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012f6:	4b2a      	ldr	r3, [pc, #168]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	69bb      	ldr	r3, [r7, #24]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	4928      	ldr	r1, [pc, #160]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001300:	4013      	ands	r3, r2
 8001302:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d006      	beq.n	800131e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001310:	4b23      	ldr	r3, [pc, #140]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001312:	68da      	ldr	r2, [r3, #12]
 8001314:	4922      	ldr	r1, [pc, #136]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001316:	69bb      	ldr	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	60cb      	str	r3, [r1, #12]
 800131c:	e006      	b.n	800132c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800131e:	4b20      	ldr	r3, [pc, #128]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001320:	68da      	ldr	r2, [r3, #12]
 8001322:	69bb      	ldr	r3, [r7, #24]
 8001324:	43db      	mvns	r3, r3
 8001326:	491e      	ldr	r1, [pc, #120]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001328:	4013      	ands	r3, r2
 800132a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d006      	beq.n	8001346 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001338:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 800133a:	685a      	ldr	r2, [r3, #4]
 800133c:	4918      	ldr	r1, [pc, #96]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	4313      	orrs	r3, r2
 8001342:	604b      	str	r3, [r1, #4]
 8001344:	e006      	b.n	8001354 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	43db      	mvns	r3, r3
 800134e:	4914      	ldr	r1, [pc, #80]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001350:	4013      	ands	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800135c:	2b00      	cmp	r3, #0
 800135e:	d021      	beq.n	80013a4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001360:	4b0f      	ldr	r3, [pc, #60]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001362:	681a      	ldr	r2, [r3, #0]
 8001364:	490e      	ldr	r1, [pc, #56]	; (80013a0 <HAL_GPIO_Init+0x2d0>)
 8001366:	69bb      	ldr	r3, [r7, #24]
 8001368:	4313      	orrs	r3, r2
 800136a:	600b      	str	r3, [r1, #0]
 800136c:	e021      	b.n	80013b2 <HAL_GPIO_Init+0x2e2>
 800136e:	bf00      	nop
 8001370:	10320000 	.word	0x10320000
 8001374:	10310000 	.word	0x10310000
 8001378:	10220000 	.word	0x10220000
 800137c:	10210000 	.word	0x10210000
 8001380:	10120000 	.word	0x10120000
 8001384:	10110000 	.word	0x10110000
 8001388:	40021000 	.word	0x40021000
 800138c:	40010000 	.word	0x40010000
 8001390:	40010800 	.word	0x40010800
 8001394:	40010c00 	.word	0x40010c00
 8001398:	40011000 	.word	0x40011000
 800139c:	40011400 	.word	0x40011400
 80013a0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013a4:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	4909      	ldr	r1, [pc, #36]	; (80013d4 <HAL_GPIO_Init+0x304>)
 80013ae:	4013      	ands	r3, r2
 80013b0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b4:	3301      	adds	r3, #1
 80013b6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013be:	fa22 f303 	lsr.w	r3, r2, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f47f ae8e 	bne.w	80010e4 <HAL_GPIO_Init+0x14>
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	372c      	adds	r7, #44	; 0x2c
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bc80      	pop	{r7}
 80013d2:	4770      	bx	lr
 80013d4:	40010400 	.word	0x40010400

080013d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	460b      	mov	r3, r1
 80013e2:	807b      	strh	r3, [r7, #2]
 80013e4:	4613      	mov	r3, r2
 80013e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013e8:	787b      	ldrb	r3, [r7, #1]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d003      	beq.n	80013f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ee:	887a      	ldrh	r2, [r7, #2]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013f4:	e003      	b.n	80013fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	041a      	lsls	r2, r3, #16
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	611a      	str	r2, [r3, #16]
}
 80013fe:	bf00      	nop
 8001400:	370c      	adds	r7, #12
 8001402:	46bd      	mov	sp, r7
 8001404:	bc80      	pop	{r7}
 8001406:	4770      	bx	lr

08001408 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	460b      	mov	r3, r1
 8001412:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800141a:	887a      	ldrh	r2, [r7, #2]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	041a      	lsls	r2, r3, #16
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	43d9      	mvns	r1, r3
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	400b      	ands	r3, r1
 800142a:	431a      	orrs	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	611a      	str	r2, [r3, #16]
}
 8001430:	bf00      	nop
 8001432:	3714      	adds	r7, #20
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
	...

0800143c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b086      	sub	sp, #24
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e272      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b00      	cmp	r3, #0
 8001458:	f000 8087 	beq.w	800156a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800145c:	4b92      	ldr	r3, [pc, #584]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 030c 	and.w	r3, r3, #12
 8001464:	2b04      	cmp	r3, #4
 8001466:	d00c      	beq.n	8001482 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001468:	4b8f      	ldr	r3, [pc, #572]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f003 030c 	and.w	r3, r3, #12
 8001470:	2b08      	cmp	r3, #8
 8001472:	d112      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
 8001474:	4b8c      	ldr	r3, [pc, #560]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001480:	d10b      	bne.n	800149a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001482:	4b89      	ldr	r3, [pc, #548]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d06c      	beq.n	8001568 <HAL_RCC_OscConfig+0x12c>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d168      	bne.n	8001568 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e24c      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014a2:	d106      	bne.n	80014b2 <HAL_RCC_OscConfig+0x76>
 80014a4:	4b80      	ldr	r3, [pc, #512]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a7f      	ldr	r2, [pc, #508]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	e02e      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10c      	bne.n	80014d4 <HAL_RCC_OscConfig+0x98>
 80014ba:	4b7b      	ldr	r3, [pc, #492]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a7a      	ldr	r2, [pc, #488]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014c4:	6013      	str	r3, [r2, #0]
 80014c6:	4b78      	ldr	r3, [pc, #480]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a77      	ldr	r2, [pc, #476]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014d0:	6013      	str	r3, [r2, #0]
 80014d2:	e01d      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014dc:	d10c      	bne.n	80014f8 <HAL_RCC_OscConfig+0xbc>
 80014de:	4b72      	ldr	r3, [pc, #456]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	4a71      	ldr	r2, [pc, #452]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014e8:	6013      	str	r3, [r2, #0]
 80014ea:	4b6f      	ldr	r3, [pc, #444]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a6e      	ldr	r2, [pc, #440]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	e00b      	b.n	8001510 <HAL_RCC_OscConfig+0xd4>
 80014f8:	4b6b      	ldr	r3, [pc, #428]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a6a      	ldr	r2, [pc, #424]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80014fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001502:	6013      	str	r3, [r2, #0]
 8001504:	4b68      	ldr	r3, [pc, #416]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a67      	ldr	r2, [pc, #412]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800150a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800150e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d013      	beq.n	8001540 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001518:	f7ff fbec 	bl	8000cf4 <HAL_GetTick>
 800151c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001520:	f7ff fbe8 	bl	8000cf4 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b64      	cmp	r3, #100	; 0x64
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e200      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001532:	4b5d      	ldr	r3, [pc, #372]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f0      	beq.n	8001520 <HAL_RCC_OscConfig+0xe4>
 800153e:	e014      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fbd8 	bl	8000cf4 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001548:	f7ff fbd4 	bl	8000cf4 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b64      	cmp	r3, #100	; 0x64
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1ec      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800155a:	4b53      	ldr	r3, [pc, #332]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x10c>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d063      	beq.n	800163e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001576:	4b4c      	ldr	r3, [pc, #304]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f003 030c 	and.w	r3, r3, #12
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00b      	beq.n	800159a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001582:	4b49      	ldr	r3, [pc, #292]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	2b08      	cmp	r3, #8
 800158c:	d11c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
 800158e:	4b46      	ldr	r3, [pc, #280]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d116      	bne.n	80015c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	4b43      	ldr	r3, [pc, #268]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d005      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	691b      	ldr	r3, [r3, #16]
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d001      	beq.n	80015b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015ae:	2301      	movs	r3, #1
 80015b0:	e1c0      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015b2:	4b3d      	ldr	r3, [pc, #244]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	00db      	lsls	r3, r3, #3
 80015c0:	4939      	ldr	r1, [pc, #228]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015c2:	4313      	orrs	r3, r2
 80015c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c6:	e03a      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	691b      	ldr	r3, [r3, #16]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d020      	beq.n	8001612 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015d0:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 80015d2:	2201      	movs	r2, #1
 80015d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d6:	f7ff fb8d 	bl	8000cf4 <HAL_GetTick>
 80015da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015dc:	e008      	b.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015de:	f7ff fb89 	bl	8000cf4 <HAL_GetTick>
 80015e2:	4602      	mov	r2, r0
 80015e4:	693b      	ldr	r3, [r7, #16]
 80015e6:	1ad3      	subs	r3, r2, r3
 80015e8:	2b02      	cmp	r3, #2
 80015ea:	d901      	bls.n	80015f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015ec:	2303      	movs	r3, #3
 80015ee:	e1a1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015f0:	4b2d      	ldr	r3, [pc, #180]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d0f0      	beq.n	80015de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015fc:	4b2a      	ldr	r3, [pc, #168]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	695b      	ldr	r3, [r3, #20]
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4927      	ldr	r1, [pc, #156]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
 8001610:	e015      	b.n	800163e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001612:	4b26      	ldr	r3, [pc, #152]	; (80016ac <HAL_RCC_OscConfig+0x270>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001618:	f7ff fb6c 	bl	8000cf4 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001620:	f7ff fb68 	bl	8000cf4 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e180      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001632:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	2b00      	cmp	r3, #0
 8001648:	d03a      	beq.n	80016c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d019      	beq.n	8001686 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001658:	f7ff fb4c 	bl	8000cf4 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001660:	f7ff fb48 	bl	8000cf4 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b02      	cmp	r3, #2
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e160      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001672:	4b0d      	ldr	r3, [pc, #52]	; (80016a8 <HAL_RCC_OscConfig+0x26c>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d0f0      	beq.n	8001660 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800167e:	2001      	movs	r0, #1
 8001680:	f000 face 	bl	8001c20 <RCC_Delay>
 8001684:	e01c      	b.n	80016c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001686:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <HAL_RCC_OscConfig+0x274>)
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fb32 	bl	8000cf4 <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001692:	e00f      	b.n	80016b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fb2e 	bl	8000cf4 <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d908      	bls.n	80016b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e146      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	42420000 	.word	0x42420000
 80016b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016b4:	4b92      	ldr	r3, [pc, #584]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e9      	bne.n	8001694 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0304 	and.w	r3, r3, #4
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	f000 80a6 	beq.w	800181a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016ce:	2300      	movs	r3, #0
 80016d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016d2:	4b8b      	ldr	r3, [pc, #556]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d10d      	bne.n	80016fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016de:	4b88      	ldr	r3, [pc, #544]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	69db      	ldr	r3, [r3, #28]
 80016e2:	4a87      	ldr	r2, [pc, #540]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016e8:	61d3      	str	r3, [r2, #28]
 80016ea:	4b85      	ldr	r3, [pc, #532]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80016ec:	69db      	ldr	r3, [r3, #28]
 80016ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016f6:	2301      	movs	r3, #1
 80016f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fa:	4b82      	ldr	r3, [pc, #520]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d118      	bne.n	8001738 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001706:	4b7f      	ldr	r3, [pc, #508]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a7e      	ldr	r2, [pc, #504]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001712:	f7ff faef 	bl	8000cf4 <HAL_GetTick>
 8001716:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800171a:	f7ff faeb 	bl	8000cf4 <HAL_GetTick>
 800171e:	4602      	mov	r2, r0
 8001720:	693b      	ldr	r3, [r7, #16]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b64      	cmp	r3, #100	; 0x64
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e103      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172c:	4b75      	ldr	r3, [pc, #468]	; (8001904 <HAL_RCC_OscConfig+0x4c8>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0f0      	beq.n	800171a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d106      	bne.n	800174e <HAL_RCC_OscConfig+0x312>
 8001740:	4b6f      	ldr	r3, [pc, #444]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4a6e      	ldr	r2, [pc, #440]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001746:	f043 0301 	orr.w	r3, r3, #1
 800174a:	6213      	str	r3, [r2, #32]
 800174c:	e02d      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68db      	ldr	r3, [r3, #12]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d10c      	bne.n	8001770 <HAL_RCC_OscConfig+0x334>
 8001756:	4b6a      	ldr	r3, [pc, #424]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	6a1b      	ldr	r3, [r3, #32]
 800175a:	4a69      	ldr	r2, [pc, #420]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	6213      	str	r3, [r2, #32]
 8001762:	4b67      	ldr	r3, [pc, #412]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	4a66      	ldr	r2, [pc, #408]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	f023 0304 	bic.w	r3, r3, #4
 800176c:	6213      	str	r3, [r2, #32]
 800176e:	e01c      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	2b05      	cmp	r3, #5
 8001776:	d10c      	bne.n	8001792 <HAL_RCC_OscConfig+0x356>
 8001778:	4b61      	ldr	r3, [pc, #388]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177a:	6a1b      	ldr	r3, [r3, #32]
 800177c:	4a60      	ldr	r2, [pc, #384]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6213      	str	r3, [r2, #32]
 8001784:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	4a5d      	ldr	r2, [pc, #372]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800178a:	f043 0301 	orr.w	r3, r3, #1
 800178e:	6213      	str	r3, [r2, #32]
 8001790:	e00b      	b.n	80017aa <HAL_RCC_OscConfig+0x36e>
 8001792:	4b5b      	ldr	r3, [pc, #364]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	4a5a      	ldr	r2, [pc, #360]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001798:	f023 0301 	bic.w	r3, r3, #1
 800179c:	6213      	str	r3, [r2, #32]
 800179e:	4b58      	ldr	r3, [pc, #352]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	6a1b      	ldr	r3, [r3, #32]
 80017a2:	4a57      	ldr	r2, [pc, #348]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017a4:	f023 0304 	bic.w	r3, r3, #4
 80017a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d015      	beq.n	80017de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa9f 	bl	8000cf4 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fa9b 	bl	8000cf4 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e0b1      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017d0:	4b4b      	ldr	r3, [pc, #300]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ee      	beq.n	80017ba <HAL_RCC_OscConfig+0x37e>
 80017dc:	e014      	b.n	8001808 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017de:	f7ff fa89 	bl	8000cf4 <HAL_GetTick>
 80017e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017e4:	e00a      	b.n	80017fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e6:	f7ff fa85 	bl	8000cf4 <HAL_GetTick>
 80017ea:	4602      	mov	r2, r0
 80017ec:	693b      	ldr	r3, [r7, #16]
 80017ee:	1ad3      	subs	r3, r2, r3
 80017f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d901      	bls.n	80017fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017f8:	2303      	movs	r3, #3
 80017fa:	e09b      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017fc:	4b40      	ldr	r3, [pc, #256]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d1ee      	bne.n	80017e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001808:	7dfb      	ldrb	r3, [r7, #23]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d105      	bne.n	800181a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800180e:	4b3c      	ldr	r3, [pc, #240]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001810:	69db      	ldr	r3, [r3, #28]
 8001812:	4a3b      	ldr	r2, [pc, #236]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001814:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001818:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	69db      	ldr	r3, [r3, #28]
 800181e:	2b00      	cmp	r3, #0
 8001820:	f000 8087 	beq.w	8001932 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001824:	4b36      	ldr	r3, [pc, #216]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 030c 	and.w	r3, r3, #12
 800182c:	2b08      	cmp	r3, #8
 800182e:	d061      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	69db      	ldr	r3, [r3, #28]
 8001834:	2b02      	cmp	r3, #2
 8001836:	d146      	bne.n	80018c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001838:	4b33      	ldr	r3, [pc, #204]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff fa59 	bl	8000cf4 <HAL_GetTick>
 8001842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001844:	e008      	b.n	8001858 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001846:	f7ff fa55 	bl	8000cf4 <HAL_GetTick>
 800184a:	4602      	mov	r2, r0
 800184c:	693b      	ldr	r3, [r7, #16]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	2b02      	cmp	r3, #2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e06d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001858:	4b29      	ldr	r3, [pc, #164]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	d1f0      	bne.n	8001846 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a1b      	ldr	r3, [r3, #32]
 8001868:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800186c:	d108      	bne.n	8001880 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800186e:	4b24      	ldr	r3, [pc, #144]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	4921      	ldr	r1, [pc, #132]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	4313      	orrs	r3, r2
 800187e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001880:	4b1f      	ldr	r3, [pc, #124]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6a19      	ldr	r1, [r3, #32]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001890:	430b      	orrs	r3, r1
 8001892:	491b      	ldr	r1, [pc, #108]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 8001894:	4313      	orrs	r3, r2
 8001896:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001898:	4b1b      	ldr	r3, [pc, #108]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 800189a:	2201      	movs	r2, #1
 800189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800189e:	f7ff fa29 	bl	8000cf4 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a6:	f7ff fa25 	bl	8000cf4 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e03d      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018b8:	4b11      	ldr	r3, [pc, #68]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x46a>
 80018c4:	e035      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018c6:	4b10      	ldr	r3, [pc, #64]	; (8001908 <HAL_RCC_OscConfig+0x4cc>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018cc:	f7ff fa12 	bl	8000cf4 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018d4:	f7ff fa0e 	bl	8000cf4 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e026      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018e6:	4b06      	ldr	r3, [pc, #24]	; (8001900 <HAL_RCC_OscConfig+0x4c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x498>
 80018f2:	e01e      	b.n	8001932 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d107      	bne.n	800190c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e019      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
 8001900:	40021000 	.word	0x40021000
 8001904:	40007000 	.word	0x40007000
 8001908:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_OscConfig+0x500>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	429a      	cmp	r2, r3
 800191e:	d106      	bne.n	800192e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800192a:	429a      	cmp	r2, r3
 800192c:	d001      	beq.n	8001932 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	40021000 	.word	0x40021000

08001940 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d101      	bne.n	8001954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e0d0      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001954:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f003 0307 	and.w	r3, r3, #7
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	429a      	cmp	r2, r3
 8001960:	d910      	bls.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001962:	4b67      	ldr	r3, [pc, #412]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 0207 	bic.w	r2, r3, #7
 800196a:	4965      	ldr	r1, [pc, #404]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	4313      	orrs	r3, r2
 8001970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001972:	4b63      	ldr	r3, [pc, #396]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0307 	and.w	r3, r3, #7
 800197a:	683a      	ldr	r2, [r7, #0]
 800197c:	429a      	cmp	r2, r3
 800197e:	d001      	beq.n	8001984 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0b8      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d020      	beq.n	80019d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d005      	beq.n	80019a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800199c:	4b59      	ldr	r3, [pc, #356]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	4a58      	ldr	r2, [pc, #352]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f003 0308 	and.w	r3, r3, #8
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d005      	beq.n	80019c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019c0:	4b50      	ldr	r3, [pc, #320]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	494d      	ldr	r1, [pc, #308]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d040      	beq.n	8001a60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d107      	bne.n	80019f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019e6:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d115      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
 80019f4:	e07f      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d107      	bne.n	8001a0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d109      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e073      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0302 	and.w	r3, r3, #2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d101      	bne.n	8001a1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e06b      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a1e:	4b39      	ldr	r3, [pc, #228]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	f023 0203 	bic.w	r2, r3, #3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	4936      	ldr	r1, [pc, #216]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a30:	f7ff f960 	bl	8000cf4 <HAL_GetTick>
 8001a34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a36:	e00a      	b.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a38:	f7ff f95c 	bl	8000cf4 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e053      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a4e:	4b2d      	ldr	r3, [pc, #180]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f003 020c 	and.w	r2, r3, #12
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d1eb      	bne.n	8001a38 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d210      	bcs.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4922      	ldr	r1, [pc, #136]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b20      	ldr	r3, [pc, #128]	; (8001b00 <HAL_RCC_ClockConfig+0x1c0>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e032      	b.n	8001af6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0304 	and.w	r3, r3, #4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d008      	beq.n	8001aae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a9c:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	4916      	ldr	r1, [pc, #88]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0308 	and.w	r3, r3, #8
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d009      	beq.n	8001ace <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aba:	4b12      	ldr	r3, [pc, #72]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	490e      	ldr	r1, [pc, #56]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001ace:	f000 f821 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_ClockConfig+0x1c4>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	490a      	ldr	r1, [pc, #40]	; (8001b08 <HAL_RCC_ClockConfig+0x1c8>)
 8001ae0:	5ccb      	ldrb	r3, [r1, r3]
 8001ae2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <HAL_RCC_ClockConfig+0x1cc>)
 8001ae8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_ClockConfig+0x1d0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff f8be 	bl	8000c70 <HAL_InitTick>

  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	080047b0 	.word	0x080047b0
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	20000004 	.word	0x20000004

08001b14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b087      	sub	sp, #28
 8001b18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	2300      	movs	r3, #0
 8001b24:	617b      	str	r3, [r7, #20]
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b2e:	4b1e      	ldr	r3, [pc, #120]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d002      	beq.n	8001b44 <HAL_RCC_GetSysClockFreq+0x30>
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d003      	beq.n	8001b4a <HAL_RCC_GetSysClockFreq+0x36>
 8001b42:	e027      	b.n	8001b94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b44:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_RCC_GetSysClockFreq+0x98>)
 8001b46:	613b      	str	r3, [r7, #16]
      break;
 8001b48:	e027      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	0c9b      	lsrs	r3, r3, #18
 8001b4e:	f003 030f 	and.w	r3, r3, #15
 8001b52:	4a17      	ldr	r2, [pc, #92]	; (8001bb0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b54:	5cd3      	ldrb	r3, [r2, r3]
 8001b56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d010      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b62:	4b11      	ldr	r3, [pc, #68]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	0c5b      	lsrs	r3, r3, #17
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	4a11      	ldr	r2, [pc, #68]	; (8001bb4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b6e:	5cd3      	ldrb	r3, [r2, r3]
 8001b70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_RCC_GetSysClockFreq+0x98>)
 8001b76:	fb03 f202 	mul.w	r2, r3, r2
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b80:	617b      	str	r3, [r7, #20]
 8001b82:	e004      	b.n	8001b8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a0c      	ldr	r2, [pc, #48]	; (8001bb8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	613b      	str	r3, [r7, #16]
      break;
 8001b92:	e002      	b.n	8001b9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <HAL_RCC_GetSysClockFreq+0x98>)
 8001b96:	613b      	str	r3, [r7, #16]
      break;
 8001b98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b9a:	693b      	ldr	r3, [r7, #16]
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	371c      	adds	r7, #28
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	007a1200 	.word	0x007a1200
 8001bb0:	080047c8 	.word	0x080047c8
 8001bb4:	080047d8 	.word	0x080047d8
 8001bb8:	003d0900 	.word	0x003d0900

08001bbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bc0:	4b02      	ldr	r3, [pc, #8]	; (8001bcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bc80      	pop	{r7}
 8001bca:	4770      	bx	lr
 8001bcc:	20000000 	.word	0x20000000

08001bd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001bd4:	f7ff fff2 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 0307 	and.w	r3, r3, #7
 8001be4:	4903      	ldr	r1, [pc, #12]	; (8001bf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001be6:	5ccb      	ldrb	r3, [r1, r3]
 8001be8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40021000 	.word	0x40021000
 8001bf4:	080047c0 	.word	0x080047c0

08001bf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001bfc:	f7ff ffde 	bl	8001bbc <HAL_RCC_GetHCLKFreq>
 8001c00:	4602      	mov	r2, r0
 8001c02:	4b05      	ldr	r3, [pc, #20]	; (8001c18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	0adb      	lsrs	r3, r3, #11
 8001c08:	f003 0307 	and.w	r3, r3, #7
 8001c0c:	4903      	ldr	r1, [pc, #12]	; (8001c1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c0e:	5ccb      	ldrb	r3, [r1, r3]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	080047c0 	.word	0x080047c0

08001c20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b085      	sub	sp, #20
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c28:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <RCC_Delay+0x34>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <RCC_Delay+0x38>)
 8001c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c32:	0a5b      	lsrs	r3, r3, #9
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	fb02 f303 	mul.w	r3, r2, r3
 8001c3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c3c:	bf00      	nop
  }
  while (Delay --);
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	60fa      	str	r2, [r7, #12]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d1f9      	bne.n	8001c3c <RCC_Delay+0x1c>
}
 8001c48:	bf00      	nop
 8001c4a:	bf00      	nop
 8001c4c:	3714      	adds	r7, #20
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr
 8001c54:	20000000 	.word	0x20000000
 8001c58:	10624dd3 	.word	0x10624dd3

08001c5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b082      	sub	sp, #8
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e041      	b.n	8001cf2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c74:	b2db      	uxtb	r3, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d106      	bne.n	8001c88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7fe fd60 	bl	8000748 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	3304      	adds	r3, #4
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f000 fafc 	bl	8002298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2201      	movs	r2, #1
 8001cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
	...

08001cfc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b085      	sub	sp, #20
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0a:	b2db      	uxtb	r3, r3
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d001      	beq.n	8001d14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e032      	b.n	8001d7a <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2202      	movs	r2, #2
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a18      	ldr	r2, [pc, #96]	; (8001d84 <HAL_TIM_Base_Start+0x88>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00e      	beq.n	8001d44 <HAL_TIM_Base_Start+0x48>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d2e:	d009      	beq.n	8001d44 <HAL_TIM_Base_Start+0x48>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a14      	ldr	r2, [pc, #80]	; (8001d88 <HAL_TIM_Base_Start+0x8c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d004      	beq.n	8001d44 <HAL_TIM_Base_Start+0x48>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a13      	ldr	r2, [pc, #76]	; (8001d8c <HAL_TIM_Base_Start+0x90>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d111      	bne.n	8001d68 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	2b06      	cmp	r3, #6
 8001d54:	d010      	beq.n	8001d78 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d66:	e007      	b.n	8001d78 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d78:	2300      	movs	r3, #0
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	3714      	adds	r7, #20
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bc80      	pop	{r7}
 8001d82:	4770      	bx	lr
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40000400 	.word	0x40000400
 8001d8c:	40000800 	.word	0x40000800

08001d90 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d101      	bne.n	8001da2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	e041      	b.n	8001e26 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d106      	bne.n	8001dbc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 f839 	bl	8001e2e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2202      	movs	r2, #2
 8001dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	3304      	adds	r3, #4
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4610      	mov	r0, r2
 8001dd0:	f000 fa62 	bl	8002298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2201      	movs	r2, #1
 8001e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2201      	movs	r2, #1
 8001e10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2201      	movs	r2, #1
 8001e18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2201      	movs	r2, #1
 8001e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bc80      	pop	{r7}
 8001e3e:	4770      	bx	lr

08001e40 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d109      	bne.n	8001e64 <HAL_TIM_PWM_Start+0x24>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	bf14      	ite	ne
 8001e5c:	2301      	movne	r3, #1
 8001e5e:	2300      	moveq	r3, #0
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	e022      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b04      	cmp	r3, #4
 8001e68:	d109      	bne.n	8001e7e <HAL_TIM_PWM_Start+0x3e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	bf14      	ite	ne
 8001e76:	2301      	movne	r3, #1
 8001e78:	2300      	moveq	r3, #0
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	e015      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d109      	bne.n	8001e98 <HAL_TIM_PWM_Start+0x58>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	bf14      	ite	ne
 8001e90:	2301      	movne	r3, #1
 8001e92:	2300      	moveq	r3, #0
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e008      	b.n	8001eaa <HAL_TIM_PWM_Start+0x6a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	bf14      	ite	ne
 8001ea4:	2301      	movne	r3, #1
 8001ea6:	2300      	moveq	r3, #0
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e05e      	b.n	8001f70 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <HAL_TIM_PWM_Start+0x82>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ec0:	e013      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b04      	cmp	r3, #4
 8001ec6:	d104      	bne.n	8001ed2 <HAL_TIM_PWM_Start+0x92>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2202      	movs	r2, #2
 8001ecc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001ed0:	e00b      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b08      	cmp	r3, #8
 8001ed6:	d104      	bne.n	8001ee2 <HAL_TIM_PWM_Start+0xa2>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2202      	movs	r2, #2
 8001edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001ee0:	e003      	b.n	8001eea <HAL_TIM_PWM_Start+0xaa>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2202      	movs	r2, #2
 8001ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	6839      	ldr	r1, [r7, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 fc50 	bl	8002798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a1e      	ldr	r2, [pc, #120]	; (8001f78 <HAL_TIM_PWM_Start+0x138>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d107      	bne.n	8001f12 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f10:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a18      	ldr	r2, [pc, #96]	; (8001f78 <HAL_TIM_PWM_Start+0x138>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00e      	beq.n	8001f3a <HAL_TIM_PWM_Start+0xfa>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f24:	d009      	beq.n	8001f3a <HAL_TIM_PWM_Start+0xfa>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a14      	ldr	r2, [pc, #80]	; (8001f7c <HAL_TIM_PWM_Start+0x13c>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d004      	beq.n	8001f3a <HAL_TIM_PWM_Start+0xfa>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a12      	ldr	r2, [pc, #72]	; (8001f80 <HAL_TIM_PWM_Start+0x140>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d111      	bne.n	8001f5e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f003 0307 	and.w	r3, r3, #7
 8001f44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b06      	cmp	r3, #6
 8001f4a:	d010      	beq.n	8001f6e <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f042 0201 	orr.w	r2, r2, #1
 8001f5a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	e007      	b.n	8001f6e <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f042 0201 	orr.w	r2, r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3710      	adds	r7, #16
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40012c00 	.word	0x40012c00
 8001f7c:	40000400 	.word	0x40000400
 8001f80:	40000800 	.word	0x40000800

08001f84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d101      	bne.n	8001fa2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	e0ae      	b.n	8002100 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2b0c      	cmp	r3, #12
 8001fae:	f200 809f 	bhi.w	80020f0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001fb2:	a201      	add	r2, pc, #4	; (adr r2, 8001fb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb8:	08001fed 	.word	0x08001fed
 8001fbc:	080020f1 	.word	0x080020f1
 8001fc0:	080020f1 	.word	0x080020f1
 8001fc4:	080020f1 	.word	0x080020f1
 8001fc8:	0800202d 	.word	0x0800202d
 8001fcc:	080020f1 	.word	0x080020f1
 8001fd0:	080020f1 	.word	0x080020f1
 8001fd4:	080020f1 	.word	0x080020f1
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	080020f1 	.word	0x080020f1
 8001fe0:	080020f1 	.word	0x080020f1
 8001fe4:	080020f1 	.word	0x080020f1
 8001fe8:	080020af 	.word	0x080020af
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	68b9      	ldr	r1, [r7, #8]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f9b2 	bl	800235c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	699a      	ldr	r2, [r3, #24]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 0208 	orr.w	r2, r2, #8
 8002006:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	699a      	ldr	r2, [r3, #24]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 0204 	bic.w	r2, r2, #4
 8002016:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6999      	ldr	r1, [r3, #24]
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	691a      	ldr	r2, [r3, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	619a      	str	r2, [r3, #24]
      break;
 800202a:	e064      	b.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	4618      	mov	r0, r3
 8002034:	f000 f9f8 	bl	8002428 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	699a      	ldr	r2, [r3, #24]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002046:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	699a      	ldr	r2, [r3, #24]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002056:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6999      	ldr	r1, [r3, #24]
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	691b      	ldr	r3, [r3, #16]
 8002062:	021a      	lsls	r2, r3, #8
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	619a      	str	r2, [r3, #24]
      break;
 800206c:	e043      	b.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	4618      	mov	r0, r3
 8002076:	f000 fa41 	bl	80024fc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	69da      	ldr	r2, [r3, #28]
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f042 0208 	orr.w	r2, r2, #8
 8002088:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	69da      	ldr	r2, [r3, #28]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0204 	bic.w	r2, r2, #4
 8002098:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	69d9      	ldr	r1, [r3, #28]
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	691a      	ldr	r2, [r3, #16]
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	61da      	str	r2, [r3, #28]
      break;
 80020ac:	e023      	b.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68b9      	ldr	r1, [r7, #8]
 80020b4:	4618      	mov	r0, r3
 80020b6:	f000 fa8b 	bl	80025d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	69da      	ldr	r2, [r3, #28]
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020c8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	69d9      	ldr	r1, [r3, #28]
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	691b      	ldr	r3, [r3, #16]
 80020e4:	021a      	lsls	r2, r3, #8
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	61da      	str	r2, [r3, #28]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	75fb      	strb	r3, [r7, #23]
      break;
 80020f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80020fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002100:	4618      	mov	r0, r3
 8002102:	3718      	adds	r7, #24
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800211c:	2b01      	cmp	r3, #1
 800211e:	d101      	bne.n	8002124 <HAL_TIM_ConfigClockSource+0x1c>
 8002120:	2302      	movs	r3, #2
 8002122:	e0b4      	b.n	800228e <HAL_TIM_ConfigClockSource+0x186>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2202      	movs	r2, #2
 8002130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002142:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68ba      	ldr	r2, [r7, #8]
 8002152:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800215c:	d03e      	beq.n	80021dc <HAL_TIM_ConfigClockSource+0xd4>
 800215e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002162:	f200 8087 	bhi.w	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 8002166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800216a:	f000 8086 	beq.w	800227a <HAL_TIM_ConfigClockSource+0x172>
 800216e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002172:	d87f      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 8002174:	2b70      	cmp	r3, #112	; 0x70
 8002176:	d01a      	beq.n	80021ae <HAL_TIM_ConfigClockSource+0xa6>
 8002178:	2b70      	cmp	r3, #112	; 0x70
 800217a:	d87b      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 800217c:	2b60      	cmp	r3, #96	; 0x60
 800217e:	d050      	beq.n	8002222 <HAL_TIM_ConfigClockSource+0x11a>
 8002180:	2b60      	cmp	r3, #96	; 0x60
 8002182:	d877      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 8002184:	2b50      	cmp	r3, #80	; 0x50
 8002186:	d03c      	beq.n	8002202 <HAL_TIM_ConfigClockSource+0xfa>
 8002188:	2b50      	cmp	r3, #80	; 0x50
 800218a:	d873      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 800218c:	2b40      	cmp	r3, #64	; 0x40
 800218e:	d058      	beq.n	8002242 <HAL_TIM_ConfigClockSource+0x13a>
 8002190:	2b40      	cmp	r3, #64	; 0x40
 8002192:	d86f      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 8002194:	2b30      	cmp	r3, #48	; 0x30
 8002196:	d064      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x15a>
 8002198:	2b30      	cmp	r3, #48	; 0x30
 800219a:	d86b      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 800219c:	2b20      	cmp	r3, #32
 800219e:	d060      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x15a>
 80021a0:	2b20      	cmp	r3, #32
 80021a2:	d867      	bhi.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d05c      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x15a>
 80021a8:	2b10      	cmp	r3, #16
 80021aa:	d05a      	beq.n	8002262 <HAL_TIM_ConfigClockSource+0x15a>
 80021ac:	e062      	b.n	8002274 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021be:	f000 facc 	bl	800275a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ca:	68bb      	ldr	r3, [r7, #8]
 80021cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80021d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	609a      	str	r2, [r3, #8]
      break;
 80021da:	e04f      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80021ec:	f000 fab5 	bl	800275a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	689a      	ldr	r2, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021fe:	609a      	str	r2, [r3, #8]
      break;
 8002200:	e03c      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800220e:	461a      	mov	r2, r3
 8002210:	f000 fa2c 	bl	800266c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2150      	movs	r1, #80	; 0x50
 800221a:	4618      	mov	r0, r3
 800221c:	f000 fa83 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 8002220:	e02c      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800222e:	461a      	mov	r2, r3
 8002230:	f000 fa4a 	bl	80026c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2160      	movs	r1, #96	; 0x60
 800223a:	4618      	mov	r0, r3
 800223c:	f000 fa73 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 8002240:	e01c      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800224e:	461a      	mov	r2, r3
 8002250:	f000 fa0c 	bl	800266c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2140      	movs	r1, #64	; 0x40
 800225a:	4618      	mov	r0, r3
 800225c:	f000 fa63 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 8002260:	e00c      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4619      	mov	r1, r3
 800226c:	4610      	mov	r0, r2
 800226e:	f000 fa5a 	bl	8002726 <TIM_ITRx_SetConfig>
      break;
 8002272:	e003      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      break;
 8002278:	e000      	b.n	800227c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800227a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2201      	movs	r2, #1
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800228c:	7bfb      	ldrb	r3, [r7, #15]
}
 800228e:	4618      	mov	r0, r3
 8002290:	3710      	adds	r7, #16
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
	...

08002298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a29      	ldr	r2, [pc, #164]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d00b      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022b6:	d007      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a26      	ldr	r2, [pc, #152]	; (8002354 <TIM_Base_SetConfig+0xbc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d003      	beq.n	80022c8 <TIM_Base_SetConfig+0x30>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	4a25      	ldr	r2, [pc, #148]	; (8002358 <TIM_Base_SetConfig+0xc0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d108      	bne.n	80022da <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	68fa      	ldr	r2, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a1c      	ldr	r2, [pc, #112]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d00b      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022e8:	d007      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4a19      	ldr	r2, [pc, #100]	; (8002354 <TIM_Base_SetConfig+0xbc>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d003      	beq.n	80022fa <TIM_Base_SetConfig+0x62>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a18      	ldr	r2, [pc, #96]	; (8002358 <TIM_Base_SetConfig+0xc0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d108      	bne.n	800230c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002300:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	68db      	ldr	r3, [r3, #12]
 8002306:	68fa      	ldr	r2, [r7, #12]
 8002308:	4313      	orrs	r3, r2
 800230a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	695b      	ldr	r3, [r3, #20]
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68fa      	ldr	r2, [r7, #12]
 800231e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a07      	ldr	r2, [pc, #28]	; (8002350 <TIM_Base_SetConfig+0xb8>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d103      	bne.n	8002340 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	615a      	str	r2, [r3, #20]
}
 8002346:	bf00      	nop
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr
 8002350:	40012c00 	.word	0x40012c00
 8002354:	40000400 	.word	0x40000400
 8002358:	40000800 	.word	0x40000800

0800235c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800235c:	b480      	push	{r7}
 800235e:	b087      	sub	sp, #28
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6a1b      	ldr	r3, [r3, #32]
 8002370:	f023 0201 	bic.w	r2, r3, #1
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f023 0303 	bic.w	r3, r3, #3
 8002392:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	68fa      	ldr	r2, [r7, #12]
 800239a:	4313      	orrs	r3, r2
 800239c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f023 0302 	bic.w	r3, r3, #2
 80023a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	4a1c      	ldr	r2, [pc, #112]	; (8002424 <TIM_OC1_SetConfig+0xc8>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d10c      	bne.n	80023d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	f023 0308 	bic.w	r3, r3, #8
 80023be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	f023 0304 	bic.w	r3, r3, #4
 80023d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a13      	ldr	r2, [pc, #76]	; (8002424 <TIM_OC1_SetConfig+0xc8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d111      	bne.n	80023fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80023e2:	693b      	ldr	r3, [r7, #16]
 80023e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80023e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	695b      	ldr	r3, [r3, #20]
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	693a      	ldr	r2, [r7, #16]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	693a      	ldr	r2, [r7, #16]
 8002402:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	68fa      	ldr	r2, [r7, #12]
 8002408:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685a      	ldr	r2, [r3, #4]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	621a      	str	r2, [r3, #32]
}
 8002418:	bf00      	nop
 800241a:	371c      	adds	r7, #28
 800241c:	46bd      	mov	sp, r7
 800241e:	bc80      	pop	{r7}
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40012c00 	.word	0x40012c00

08002428 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002428:	b480      	push	{r7}
 800242a:	b087      	sub	sp, #28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a1b      	ldr	r3, [r3, #32]
 800243c:	f023 0210 	bic.w	r2, r3, #16
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002456:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800245e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	021b      	lsls	r3, r3, #8
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	4313      	orrs	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f023 0320 	bic.w	r3, r3, #32
 8002472:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	4a1d      	ldr	r2, [pc, #116]	; (80024f8 <TIM_OC2_SetConfig+0xd0>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d10d      	bne.n	80024a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800248e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	011b      	lsls	r3, r3, #4
 8002496:	697a      	ldr	r2, [r7, #20]
 8002498:	4313      	orrs	r3, r2
 800249a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a14      	ldr	r2, [pc, #80]	; (80024f8 <TIM_OC2_SetConfig+0xd0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d113      	bne.n	80024d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80024b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80024ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	695b      	ldr	r3, [r3, #20]
 80024c0:	009b      	lsls	r3, r3, #2
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	693a      	ldr	r2, [r7, #16]
 80024d0:	4313      	orrs	r3, r2
 80024d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	693a      	ldr	r2, [r7, #16]
 80024d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	685a      	ldr	r2, [r3, #4]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bc80      	pop	{r7}
 80024f6:	4770      	bx	lr
 80024f8:	40012c00 	.word	0x40012c00

080024fc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b087      	sub	sp, #28
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6a1b      	ldr	r3, [r3, #32]
 8002510:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f023 0303 	bic.w	r3, r3, #3
 8002532:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002544:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	697a      	ldr	r2, [r7, #20]
 800254e:	4313      	orrs	r3, r2
 8002550:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	4a1d      	ldr	r2, [pc, #116]	; (80025cc <TIM_OC3_SetConfig+0xd0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d10d      	bne.n	8002576 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800255a:	697b      	ldr	r3, [r7, #20]
 800255c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002560:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	021b      	lsls	r3, r3, #8
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	4313      	orrs	r3, r2
 800256c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002574:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a14      	ldr	r2, [pc, #80]	; (80025cc <TIM_OC3_SetConfig+0xd0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d113      	bne.n	80025a6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800257e:	693b      	ldr	r3, [r7, #16]
 8002580:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002584:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800258c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	011b      	lsls	r3, r3, #4
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	699b      	ldr	r3, [r3, #24]
 800259e:	011b      	lsls	r3, r3, #4
 80025a0:	693a      	ldr	r2, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	693a      	ldr	r2, [r7, #16]
 80025aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	621a      	str	r2, [r3, #32]
}
 80025c0:	bf00      	nop
 80025c2:	371c      	adds	r7, #28
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bc80      	pop	{r7}
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40012c00 	.word	0x40012c00

080025d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b087      	sub	sp, #28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a1b      	ldr	r3, [r3, #32]
 80025de:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002606:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	68fa      	ldr	r2, [r7, #12]
 8002610:	4313      	orrs	r3, r2
 8002612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800261a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	031b      	lsls	r3, r3, #12
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	4313      	orrs	r3, r2
 8002626:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	4a0f      	ldr	r2, [pc, #60]	; (8002668 <TIM_OC4_SetConfig+0x98>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d109      	bne.n	8002644 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002636:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	695b      	ldr	r3, [r3, #20]
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	4313      	orrs	r3, r2
 8002642:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685a      	ldr	r2, [r3, #4]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	693a      	ldr	r2, [r7, #16]
 800265c:	621a      	str	r2, [r3, #32]
}
 800265e:	bf00      	nop
 8002660:	371c      	adds	r7, #28
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	40012c00 	.word	0x40012c00

0800266c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800266c:	b480      	push	{r7}
 800266e:	b087      	sub	sp, #28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6a1b      	ldr	r3, [r3, #32]
 8002682:	f023 0201 	bic.w	r2, r3, #1
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	693a      	ldr	r2, [r7, #16]
 800269e:	4313      	orrs	r3, r2
 80026a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	f023 030a 	bic.w	r3, r3, #10
 80026a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	4313      	orrs	r3, r2
 80026b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	693a      	ldr	r2, [r7, #16]
 80026b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	697a      	ldr	r2, [r7, #20]
 80026bc:	621a      	str	r2, [r3, #32]
}
 80026be:	bf00      	nop
 80026c0:	371c      	adds	r7, #28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr

080026c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	6a1b      	ldr	r3, [r3, #32]
 80026d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	f023 0210 	bic.w	r2, r3, #16
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80026f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	693a      	ldr	r2, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002704:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002706:	68bb      	ldr	r3, [r7, #8]
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	4313      	orrs	r3, r2
 800270e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	693a      	ldr	r2, [r7, #16]
 8002714:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	621a      	str	r2, [r3, #32]
}
 800271c:	bf00      	nop
 800271e:	371c      	adds	r7, #28
 8002720:	46bd      	mov	sp, r7
 8002722:	bc80      	pop	{r7}
 8002724:	4770      	bx	lr

08002726 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002726:	b480      	push	{r7}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800273c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	4313      	orrs	r3, r2
 8002744:	f043 0307 	orr.w	r3, r3, #7
 8002748:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	609a      	str	r2, [r3, #8]
}
 8002750:	bf00      	nop
 8002752:	3714      	adds	r7, #20
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800275a:	b480      	push	{r7}
 800275c:	b087      	sub	sp, #28
 800275e:	af00      	add	r7, sp, #0
 8002760:	60f8      	str	r0, [r7, #12]
 8002762:	60b9      	str	r1, [r7, #8]
 8002764:	607a      	str	r2, [r7, #4]
 8002766:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002774:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	021a      	lsls	r2, r3, #8
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	431a      	orrs	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4313      	orrs	r3, r2
 8002782:	697a      	ldr	r2, [r7, #20]
 8002784:	4313      	orrs	r3, r2
 8002786:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	609a      	str	r2, [r3, #8]
}
 800278e:	bf00      	nop
 8002790:	371c      	adds	r7, #28
 8002792:	46bd      	mov	sp, r7
 8002794:	bc80      	pop	{r7}
 8002796:	4770      	bx	lr

08002798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002798:	b480      	push	{r7}
 800279a:	b087      	sub	sp, #28
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	f003 031f 	and.w	r3, r3, #31
 80027aa:	2201      	movs	r2, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6a1a      	ldr	r2, [r3, #32]
 80027b6:	697b      	ldr	r3, [r7, #20]
 80027b8:	43db      	mvns	r3, r3
 80027ba:	401a      	ands	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	6a1a      	ldr	r2, [r3, #32]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	f003 031f 	and.w	r3, r3, #31
 80027ca:	6879      	ldr	r1, [r7, #4]
 80027cc:	fa01 f303 	lsl.w	r3, r1, r3
 80027d0:	431a      	orrs	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	621a      	str	r2, [r3, #32]
}
 80027d6:	bf00      	nop
 80027d8:	371c      	adds	r7, #28
 80027da:	46bd      	mov	sp, r7
 80027dc:	bc80      	pop	{r7}
 80027de:	4770      	bx	lr

080027e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e046      	b.n	8002886 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2202      	movs	r2, #2
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800281e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68fa      	ldr	r2, [r7, #12]
 8002826:	4313      	orrs	r3, r2
 8002828:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a16      	ldr	r2, [pc, #88]	; (8002890 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d00e      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002844:	d009      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a12      	ldr	r2, [pc, #72]	; (8002894 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d004      	beq.n	800285a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a10      	ldr	r2, [pc, #64]	; (8002898 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d10c      	bne.n	8002874 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002860:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	68ba      	ldr	r2, [r7, #8]
 8002868:	4313      	orrs	r3, r2
 800286a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d101      	bne.n	80028ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e042      	b.n	8002934 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d106      	bne.n	80028c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f7fd ffa2 	bl	800080c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2224      	movs	r2, #36	; 0x24
 80028cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68da      	ldr	r2, [r3, #12]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80028de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 fdc5 	bl	8003470 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2220      	movs	r2, #32
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2220      	movs	r2, #32
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002932:	2300      	movs	r3, #0
}
 8002934:	4618      	mov	r0, r3
 8002936:	3708      	adds	r7, #8
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	; 0x28
 8002940:	af02      	add	r7, sp, #8
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	603b      	str	r3, [r7, #0]
 8002948:	4613      	mov	r3, r2
 800294a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002956:	b2db      	uxtb	r3, r3
 8002958:	2b20      	cmp	r3, #32
 800295a:	d16d      	bne.n	8002a38 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800295c:	68bb      	ldr	r3, [r7, #8]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d002      	beq.n	8002968 <HAL_UART_Transmit+0x2c>
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d101      	bne.n	800296c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002968:	2301      	movs	r3, #1
 800296a:	e066      	b.n	8002a3a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2221      	movs	r2, #33	; 0x21
 8002976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800297a:	f7fe f9bb 	bl	8000cf4 <HAL_GetTick>
 800297e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	88fa      	ldrh	r2, [r7, #6]
 8002984:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	88fa      	ldrh	r2, [r7, #6]
 800298a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002994:	d108      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d104      	bne.n	80029a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	61bb      	str	r3, [r7, #24]
 80029a6:	e003      	b.n	80029b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80029b0:	e02a      	b.n	8002a08 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2200      	movs	r2, #0
 80029ba:	2180      	movs	r1, #128	; 0x80
 80029bc:	68f8      	ldr	r0, [r7, #12]
 80029be:	f000 fb14 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80029c8:	2303      	movs	r3, #3
 80029ca:	e036      	b.n	8002a3a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10b      	bne.n	80029ea <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80029d2:	69bb      	ldr	r3, [r7, #24]
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80029e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	3302      	adds	r3, #2
 80029e6:	61bb      	str	r3, [r7, #24]
 80029e8:	e007      	b.n	80029fa <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	3301      	adds	r3, #1
 80029f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	3b01      	subs	r3, #1
 8002a02:	b29a      	uxth	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d1cf      	bne.n	80029b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2140      	movs	r1, #64	; 0x40
 8002a1c:	68f8      	ldr	r0, [r7, #12]
 8002a1e:	f000 fae4 	bl	8002fea <UART_WaitOnFlagUntilTimeout>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	e006      	b.n	8002a3a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2220      	movs	r2, #32
 8002a30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002a34:	2300      	movs	r3, #0
 8002a36:	e000      	b.n	8002a3a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002a38:	2302      	movs	r3, #2
  }
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3720      	adds	r7, #32
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	4613      	mov	r3, r2
 8002a4e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a56:	b2db      	uxtb	r3, r3
 8002a58:	2b20      	cmp	r3, #32
 8002a5a:	d112      	bne.n	8002a82 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d002      	beq.n	8002a68 <HAL_UART_Receive_IT+0x26>
 8002a62:	88fb      	ldrh	r3, [r7, #6]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e00b      	b.n	8002a84 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	461a      	mov	r2, r3
 8002a76:	68b9      	ldr	r1, [r7, #8]
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fb24 	bl	80030c6 <UART_Start_Receive_IT>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	e000      	b.n	8002a84 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002a82:	2302      	movs	r3, #2
  }
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b0ba      	sub	sp, #232	; 0xe8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	695b      	ldr	r3, [r3, #20]
 8002aae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002abe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10f      	bne.n	8002af2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad6:	f003 0320 	and.w	r3, r3, #32
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d009      	beq.n	8002af2 <HAL_UART_IRQHandler+0x66>
 8002ade:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ae2:	f003 0320 	and.w	r3, r3, #32
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d003      	beq.n	8002af2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f000 fc01 	bl	80032f2 <UART_Receive_IT>
      return;
 8002af0:	e25b      	b.n	8002faa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002af2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 80de 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x22c>
 8002afc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b00:	f003 0301 	and.w	r3, r3, #1
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d106      	bne.n	8002b16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002b08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b0c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80d1 	beq.w	8002cb8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b1a:	f003 0301 	and.w	r3, r3, #1
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00b      	beq.n	8002b3a <HAL_UART_IRQHandler+0xae>
 8002b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b32:	f043 0201 	orr.w	r2, r3, #1
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b3e:	f003 0304 	and.w	r3, r3, #4
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00b      	beq.n	8002b5e <HAL_UART_IRQHandler+0xd2>
 8002b46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f043 0202 	orr.w	r2, r3, #2
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_UART_IRQHandler+0xf6>
 8002b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d005      	beq.n	8002b82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b7a:	f043 0204 	orr.w	r2, r3, #4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d011      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x126>
 8002b8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d105      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d005      	beq.n	8002bb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f043 0208 	orr.w	r2, r3, #8
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f000 81f2 	beq.w	8002fa0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d008      	beq.n	8002bda <HAL_UART_IRQHandler+0x14e>
 8002bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bcc:	f003 0320 	and.w	r3, r3, #32
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d002      	beq.n	8002bda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f000 fb8c 	bl	80032f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf6:	f003 0308 	and.w	r3, r3, #8
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <HAL_UART_IRQHandler+0x17a>
 8002bfe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d04f      	beq.n	8002ca6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fa96 	bl	8003138 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	695b      	ldr	r3, [r3, #20]
 8002c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d041      	beq.n	8002c9e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	3314      	adds	r3, #20
 8002c20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c28:	e853 3f00 	ldrex	r3, [r3]
 8002c2c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c30:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c38:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	3314      	adds	r3, #20
 8002c42:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c46:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c52:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c56:	e841 2300 	strex	r3, r2, [r1]
 8002c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002c5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1d9      	bne.n	8002c1a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d013      	beq.n	8002c96 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	4a7e      	ldr	r2, [pc, #504]	; (8002e6c <HAL_UART_IRQHandler+0x3e0>)
 8002c74:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	f7fe f9b0 	bl	8000fe0 <HAL_DMA_Abort_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d016      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c90:	4610      	mov	r0, r2
 8002c92:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c94:	e00e      	b.n	8002cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f993 	bl	8002fc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c9c:	e00a      	b.n	8002cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f98f 	bl	8002fc2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ca4:	e006      	b.n	8002cb4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f98b 	bl	8002fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8002cb2:	e175      	b.n	8002fa0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cb4:	bf00      	nop
    return;
 8002cb6:	e173      	b.n	8002fa0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	f040 814f 	bne.w	8002f60 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cc6:	f003 0310 	and.w	r3, r3, #16
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8148 	beq.w	8002f60 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002cd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cd4:	f003 0310 	and.w	r3, r3, #16
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	f000 8141 	beq.w	8002f60 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	60bb      	str	r3, [r7, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	60bb      	str	r3, [r7, #8]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 80b6 	beq.w	8002e70 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d10:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	f000 8145 	beq.w	8002fa4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d22:	429a      	cmp	r2, r3
 8002d24:	f080 813e 	bcs.w	8002fa4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d2e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d34:	699b      	ldr	r3, [r3, #24]
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	f000 8088 	beq.w	8002e4c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	330c      	adds	r3, #12
 8002d42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d4a:	e853 3f00 	ldrex	r3, [r3]
 8002d4e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	330c      	adds	r3, #12
 8002d64:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002d68:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002d6c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d70:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d74:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d78:	e841 2300 	strex	r3, r2, [r1]
 8002d7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d80:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1d9      	bne.n	8002d3c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3314      	adds	r3, #20
 8002d8e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d92:	e853 3f00 	ldrex	r3, [r3]
 8002d96:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d98:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d9a:	f023 0301 	bic.w	r3, r3, #1
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	3314      	adds	r3, #20
 8002da8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002dac:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002db0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002db4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002db8:	e841 2300 	strex	r3, r2, [r1]
 8002dbc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002dbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1e1      	bne.n	8002d88 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dcc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002dce:	e853 3f00 	ldrex	r3, [r3]
 8002dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002dd4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002dd6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	3314      	adds	r3, #20
 8002de4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002de8:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002dea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002dee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002df6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e3      	bne.n	8002dc4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e1c:	f023 0310 	bic.w	r3, r3, #16
 8002e20:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002e2e:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e30:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e32:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e34:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e36:	e841 2300 	strex	r3, r2, [r1]
 8002e3a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1e3      	bne.n	8002e0a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe f88f 	bl	8000f6a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	1ad3      	subs	r3, r2, r3
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	4619      	mov	r1, r3
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f8b6 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e68:	e09c      	b.n	8002fa4 <HAL_UART_IRQHandler+0x518>
 8002e6a:	bf00      	nop
 8002e6c:	080031fd 	.word	0x080031fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	f000 808e 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002e8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	f000 8089 	beq.w	8002fa8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	330c      	adds	r3, #12
 8002e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea0:	e853 3f00 	ldrex	r3, [r3]
 8002ea4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	330c      	adds	r3, #12
 8002eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eba:	647a      	str	r2, [r7, #68]	; 0x44
 8002ebc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ebe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ec0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ec2:	e841 2300 	strex	r3, r2, [r1]
 8002ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ec8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1e3      	bne.n	8002e96 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	3314      	adds	r3, #20
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed8:	e853 3f00 	ldrex	r3, [r3]
 8002edc:	623b      	str	r3, [r7, #32]
   return(result);
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f023 0301 	bic.w	r3, r3, #1
 8002ee4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	3314      	adds	r3, #20
 8002eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ef2:	633a      	str	r2, [r7, #48]	; 0x30
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ef8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002efa:	e841 2300 	strex	r3, r2, [r1]
 8002efe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d1e3      	bne.n	8002ece <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2220      	movs	r2, #32
 8002f0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	330c      	adds	r3, #12
 8002f1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	e853 3f00 	ldrex	r3, [r3]
 8002f22:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	f023 0310 	bic.w	r3, r3, #16
 8002f2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	330c      	adds	r3, #12
 8002f34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002f38:	61fa      	str	r2, [r7, #28]
 8002f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f3c:	69b9      	ldr	r1, [r7, #24]
 8002f3e:	69fa      	ldr	r2, [r7, #28]
 8002f40:	e841 2300 	strex	r3, r2, [r1]
 8002f44:	617b      	str	r3, [r7, #20]
   return(result);
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1e3      	bne.n	8002f14 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f56:	4619      	mov	r1, r3
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f000 f83b 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002f5e:	e023      	b.n	8002fa8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_UART_IRQHandler+0x4f4>
 8002f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 f953 	bl	8003224 <UART_Transmit_IT>
    return;
 8002f7e:	e014      	b.n	8002faa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <HAL_UART_IRQHandler+0x51e>
 8002f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d008      	beq.n	8002faa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 f992 	bl	80032c2 <UART_EndTransmit_IT>
    return;
 8002f9e:	e004      	b.n	8002faa <HAL_UART_IRQHandler+0x51e>
    return;
 8002fa0:	bf00      	nop
 8002fa2:	e002      	b.n	8002faa <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa4:	bf00      	nop
 8002fa6:	e000      	b.n	8002faa <HAL_UART_IRQHandler+0x51e>
      return;
 8002fa8:	bf00      	nop
  }
}
 8002faa:	37e8      	adds	r7, #232	; 0xe8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002fb8:	bf00      	nop
 8002fba:	370c      	adds	r7, #12
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr

08002fc2 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002fc2:	b480      	push	{r7}
 8002fc4:	b083      	sub	sp, #12
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bc80      	pop	{r7}
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	460b      	mov	r3, r1
 8002fde:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bc80      	pop	{r7}
 8002fe8:	4770      	bx	lr

08002fea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b090      	sub	sp, #64	; 0x40
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	60f8      	str	r0, [r7, #12]
 8002ff2:	60b9      	str	r1, [r7, #8]
 8002ff4:	603b      	str	r3, [r7, #0]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ffa:	e050      	b.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003002:	d04c      	beq.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003004:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003006:	2b00      	cmp	r3, #0
 8003008:	d007      	beq.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
 800300a:	f7fd fe73 	bl	8000cf4 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003016:	429a      	cmp	r2, r3
 8003018:	d241      	bcs.n	800309e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	330c      	adds	r3, #12
 8003020:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	e853 3f00 	ldrex	r3, [r3]
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800302a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800302c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003030:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	330c      	adds	r3, #12
 8003038:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800303a:	637a      	str	r2, [r7, #52]	; 0x34
 800303c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800303e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003040:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003042:	e841 2300 	strex	r3, r2, [r1]
 8003046:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800304a:	2b00      	cmp	r3, #0
 800304c:	d1e5      	bne.n	800301a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	3314      	adds	r3, #20
 8003054:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	e853 3f00 	ldrex	r3, [r3]
 800305c:	613b      	str	r3, [r7, #16]
   return(result);
 800305e:	693b      	ldr	r3, [r7, #16]
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	3314      	adds	r3, #20
 800306c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800306e:	623a      	str	r2, [r7, #32]
 8003070:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003072:	69f9      	ldr	r1, [r7, #28]
 8003074:	6a3a      	ldr	r2, [r7, #32]
 8003076:	e841 2300 	strex	r3, r2, [r1]
 800307a:	61bb      	str	r3, [r7, #24]
   return(result);
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1e5      	bne.n	800304e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e00f      	b.n	80030be <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	681a      	ldr	r2, [r3, #0]
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	4013      	ands	r3, r2
 80030a8:	68ba      	ldr	r2, [r7, #8]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	bf0c      	ite	eq
 80030ae:	2301      	moveq	r3, #1
 80030b0:	2300      	movne	r3, #0
 80030b2:	b2db      	uxtb	r3, r3
 80030b4:	461a      	mov	r2, r3
 80030b6:	79fb      	ldrb	r3, [r7, #7]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d09f      	beq.n	8002ffc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3740      	adds	r7, #64	; 0x40
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030c6:	b480      	push	{r7}
 80030c8:	b085      	sub	sp, #20
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	60f8      	str	r0, [r7, #12]
 80030ce:	60b9      	str	r1, [r7, #8]
 80030d0:	4613      	mov	r3, r2
 80030d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	88fa      	ldrh	r2, [r7, #6]
 80030e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2200      	movs	r2, #0
 80030ea:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2222      	movs	r2, #34	; 0x22
 80030f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d007      	beq.n	800310c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	68da      	ldr	r2, [r3, #12]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800310a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695a      	ldr	r2, [r3, #20]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f042 0220 	orr.w	r2, r2, #32
 800312a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800312c:	2300      	movs	r3, #0
}
 800312e:	4618      	mov	r0, r3
 8003130:	3714      	adds	r7, #20
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003138:	b480      	push	{r7}
 800313a:	b095      	sub	sp, #84	; 0x54
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	330c      	adds	r3, #12
 8003146:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003148:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800314a:	e853 3f00 	ldrex	r3, [r3]
 800314e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003156:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	330c      	adds	r3, #12
 800315e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003160:	643a      	str	r2, [r7, #64]	; 0x40
 8003162:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003164:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003166:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003168:	e841 2300 	strex	r3, r2, [r1]
 800316c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800316e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d1e5      	bne.n	8003140 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	3314      	adds	r3, #20
 800317a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	e853 3f00 	ldrex	r3, [r3]
 8003182:	61fb      	str	r3, [r7, #28]
   return(result);
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f023 0301 	bic.w	r3, r3, #1
 800318a:	64bb      	str	r3, [r7, #72]	; 0x48
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	3314      	adds	r3, #20
 8003192:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003194:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003196:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003198:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800319a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800319c:	e841 2300 	strex	r3, r2, [r1]
 80031a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1e5      	bne.n	8003174 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d119      	bne.n	80031e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	330c      	adds	r3, #12
 80031b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	e853 3f00 	ldrex	r3, [r3]
 80031be:	60bb      	str	r3, [r7, #8]
   return(result);
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	f023 0310 	bic.w	r3, r3, #16
 80031c6:	647b      	str	r3, [r7, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	330c      	adds	r3, #12
 80031ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80031d0:	61ba      	str	r2, [r7, #24]
 80031d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d4:	6979      	ldr	r1, [r7, #20]
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	e841 2300 	strex	r3, r2, [r1]
 80031dc:	613b      	str	r3, [r7, #16]
   return(result);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1e5      	bne.n	80031b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 80031f2:	bf00      	nop
 80031f4:	3754      	adds	r7, #84	; 0x54
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bc80      	pop	{r7}
 80031fa:	4770      	bx	lr

080031fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b084      	sub	sp, #16
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003208:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	2200      	movs	r2, #0
 800320e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7ff fed3 	bl	8002fc2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b21      	cmp	r3, #33	; 0x21
 8003236:	d13e      	bne.n	80032b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003240:	d114      	bne.n	800326c <UART_Transmit_IT+0x48>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d110      	bne.n	800326c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a1b      	ldr	r3, [r3, #32]
 800324e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	881b      	ldrh	r3, [r3, #0]
 8003254:	461a      	mov	r2, r3
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800325e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1b      	ldr	r3, [r3, #32]
 8003264:	1c9a      	adds	r2, r3, #2
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	621a      	str	r2, [r3, #32]
 800326a:	e008      	b.n	800327e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	1c59      	adds	r1, r3, #1
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6211      	str	r1, [r2, #32]
 8003276:	781a      	ldrb	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29b      	uxth	r3, r3
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	4619      	mov	r1, r3
 800328c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800328e:	2b00      	cmp	r3, #0
 8003290:	d10f      	bne.n	80032b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68da      	ldr	r2, [r3, #12]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032b2:	2300      	movs	r3, #0
 80032b4:	e000      	b.n	80032b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80032b6:	2302      	movs	r3, #2
  }
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80032c2:	b580      	push	{r7, lr}
 80032c4:	b082      	sub	sp, #8
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2220      	movs	r2, #32
 80032de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7ff fe64 	bl	8002fb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3708      	adds	r7, #8
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}

080032f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b08c      	sub	sp, #48	; 0x30
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b22      	cmp	r3, #34	; 0x22
 8003304:	f040 80ae 	bne.w	8003464 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003310:	d117      	bne.n	8003342 <UART_Receive_IT+0x50>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d113      	bne.n	8003342 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800331a:	2300      	movs	r3, #0
 800331c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003322:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	b29b      	uxth	r3, r3
 800332c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003330:	b29a      	uxth	r2, r3
 8003332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003334:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800333a:	1c9a      	adds	r2, r3, #2
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28
 8003340:	e026      	b.n	8003390 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003346:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003348:	2300      	movs	r3, #0
 800334a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003354:	d007      	beq.n	8003366 <UART_Receive_IT+0x74>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10a      	bne.n	8003374 <UART_Receive_IT+0x82>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	b2da      	uxtb	r2, r3
 800336e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e008      	b.n	8003386 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003380:	b2da      	uxtb	r2, r3
 8003382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003384:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338a:	1c5a      	adds	r2, r3, #1
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003394:	b29b      	uxth	r3, r3
 8003396:	3b01      	subs	r3, #1
 8003398:	b29b      	uxth	r3, r3
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4619      	mov	r1, r3
 800339e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d15d      	bne.n	8003460 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0220 	bic.w	r2, r2, #32
 80033b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	695a      	ldr	r2, [r3, #20]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f022 0201 	bic.w	r2, r2, #1
 80033d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2220      	movs	r2, #32
 80033d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d135      	bne.n	8003456 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	330c      	adds	r3, #12
 80033f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	e853 3f00 	ldrex	r3, [r3]
 80033fe:	613b      	str	r3, [r7, #16]
   return(result);
 8003400:	693b      	ldr	r3, [r7, #16]
 8003402:	f023 0310 	bic.w	r3, r3, #16
 8003406:	627b      	str	r3, [r7, #36]	; 0x24
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	330c      	adds	r3, #12
 800340e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003410:	623a      	str	r2, [r7, #32]
 8003412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003414:	69f9      	ldr	r1, [r7, #28]
 8003416:	6a3a      	ldr	r2, [r7, #32]
 8003418:	e841 2300 	strex	r3, r2, [r1]
 800341c:	61bb      	str	r3, [r7, #24]
   return(result);
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1e5      	bne.n	80033f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0310 	and.w	r3, r3, #16
 800342e:	2b10      	cmp	r3, #16
 8003430:	d10a      	bne.n	8003448 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003432:	2300      	movs	r3, #0
 8003434:	60fb      	str	r3, [r7, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	60fb      	str	r3, [r7, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800344c:	4619      	mov	r1, r3
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7ff fdc0 	bl	8002fd4 <HAL_UARTEx_RxEventCallback>
 8003454:	e002      	b.n	800345c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fd fb72 	bl	8000b40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	e002      	b.n	8003466 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003460:	2300      	movs	r3, #0
 8003462:	e000      	b.n	8003466 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003464:	2302      	movs	r3, #2
  }
}
 8003466:	4618      	mov	r0, r3
 8003468:	3730      	adds	r7, #48	; 0x30
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
	...

08003470 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003470:	b580      	push	{r7, lr}
 8003472:	b084      	sub	sp, #16
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691b      	ldr	r3, [r3, #16]
 800347e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	68da      	ldr	r2, [r3, #12]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	689a      	ldr	r2, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	68db      	ldr	r3, [r3, #12]
 80034a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034aa:	f023 030c 	bic.w	r3, r3, #12
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	6812      	ldr	r2, [r2, #0]
 80034b2:	68b9      	ldr	r1, [r7, #8]
 80034b4:	430b      	orrs	r3, r1
 80034b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699a      	ldr	r2, [r3, #24]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	430a      	orrs	r2, r1
 80034cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a2c      	ldr	r2, [pc, #176]	; (8003584 <UART_SetConfig+0x114>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d103      	bne.n	80034e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80034d8:	f7fe fb8e 	bl	8001bf8 <HAL_RCC_GetPCLK2Freq>
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	e002      	b.n	80034e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80034e0:	f7fe fb76 	bl	8001bd0 <HAL_RCC_GetPCLK1Freq>
 80034e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034e6:	68fa      	ldr	r2, [r7, #12]
 80034e8:	4613      	mov	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	4413      	add	r3, r2
 80034ee:	009a      	lsls	r2, r3, #2
 80034f0:	441a      	add	r2, r3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034fc:	4a22      	ldr	r2, [pc, #136]	; (8003588 <UART_SetConfig+0x118>)
 80034fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003502:	095b      	lsrs	r3, r3, #5
 8003504:	0119      	lsls	r1, r3, #4
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	4613      	mov	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	4413      	add	r3, r2
 800350e:	009a      	lsls	r2, r3, #2
 8003510:	441a      	add	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fbb2 f2f3 	udiv	r2, r2, r3
 800351c:	4b1a      	ldr	r3, [pc, #104]	; (8003588 <UART_SetConfig+0x118>)
 800351e:	fba3 0302 	umull	r0, r3, r3, r2
 8003522:	095b      	lsrs	r3, r3, #5
 8003524:	2064      	movs	r0, #100	; 0x64
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	3332      	adds	r3, #50	; 0x32
 8003530:	4a15      	ldr	r2, [pc, #84]	; (8003588 <UART_SetConfig+0x118>)
 8003532:	fba2 2303 	umull	r2, r3, r2, r3
 8003536:	095b      	lsrs	r3, r3, #5
 8003538:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800353c:	4419      	add	r1, r3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009a      	lsls	r2, r3, #2
 8003548:	441a      	add	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	fbb2 f2f3 	udiv	r2, r2, r3
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <UART_SetConfig+0x118>)
 8003556:	fba3 0302 	umull	r0, r3, r3, r2
 800355a:	095b      	lsrs	r3, r3, #5
 800355c:	2064      	movs	r0, #100	; 0x64
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	1ad3      	subs	r3, r2, r3
 8003564:	011b      	lsls	r3, r3, #4
 8003566:	3332      	adds	r3, #50	; 0x32
 8003568:	4a07      	ldr	r2, [pc, #28]	; (8003588 <UART_SetConfig+0x118>)
 800356a:	fba2 2303 	umull	r2, r3, r2, r3
 800356e:	095b      	lsrs	r3, r3, #5
 8003570:	f003 020f 	and.w	r2, r3, #15
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	440a      	add	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800357c:	bf00      	nop
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013800 	.word	0x40013800
 8003588:	51eb851f 	.word	0x51eb851f

0800358c <atoi>:
 800358c:	220a      	movs	r2, #10
 800358e:	2100      	movs	r1, #0
 8003590:	f000 b87e 	b.w	8003690 <strtol>

08003594 <_strtol_l.constprop.0>:
 8003594:	2b01      	cmp	r3, #1
 8003596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800359a:	4686      	mov	lr, r0
 800359c:	4690      	mov	r8, r2
 800359e:	d001      	beq.n	80035a4 <_strtol_l.constprop.0+0x10>
 80035a0:	2b24      	cmp	r3, #36	; 0x24
 80035a2:	d906      	bls.n	80035b2 <_strtol_l.constprop.0+0x1e>
 80035a4:	f000 fb1e 	bl	8003be4 <__errno>
 80035a8:	2316      	movs	r3, #22
 80035aa:	6003      	str	r3, [r0, #0]
 80035ac:	2000      	movs	r0, #0
 80035ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035b2:	460d      	mov	r5, r1
 80035b4:	4835      	ldr	r0, [pc, #212]	; (800368c <_strtol_l.constprop.0+0xf8>)
 80035b6:	462a      	mov	r2, r5
 80035b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80035bc:	5d06      	ldrb	r6, [r0, r4]
 80035be:	f016 0608 	ands.w	r6, r6, #8
 80035c2:	d1f8      	bne.n	80035b6 <_strtol_l.constprop.0+0x22>
 80035c4:	2c2d      	cmp	r4, #45	; 0x2d
 80035c6:	d12e      	bne.n	8003626 <_strtol_l.constprop.0+0x92>
 80035c8:	2601      	movs	r6, #1
 80035ca:	782c      	ldrb	r4, [r5, #0]
 80035cc:	1c95      	adds	r5, r2, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d057      	beq.n	8003682 <_strtol_l.constprop.0+0xee>
 80035d2:	2b10      	cmp	r3, #16
 80035d4:	d109      	bne.n	80035ea <_strtol_l.constprop.0+0x56>
 80035d6:	2c30      	cmp	r4, #48	; 0x30
 80035d8:	d107      	bne.n	80035ea <_strtol_l.constprop.0+0x56>
 80035da:	782a      	ldrb	r2, [r5, #0]
 80035dc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80035e0:	2a58      	cmp	r2, #88	; 0x58
 80035e2:	d149      	bne.n	8003678 <_strtol_l.constprop.0+0xe4>
 80035e4:	2310      	movs	r3, #16
 80035e6:	786c      	ldrb	r4, [r5, #1]
 80035e8:	3502      	adds	r5, #2
 80035ea:	2200      	movs	r2, #0
 80035ec:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 80035f0:	f10c 3cff 	add.w	ip, ip, #4294967295
 80035f4:	fbbc f9f3 	udiv	r9, ip, r3
 80035f8:	4610      	mov	r0, r2
 80035fa:	fb03 ca19 	mls	sl, r3, r9, ip
 80035fe:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003602:	2f09      	cmp	r7, #9
 8003604:	d814      	bhi.n	8003630 <_strtol_l.constprop.0+0x9c>
 8003606:	463c      	mov	r4, r7
 8003608:	42a3      	cmp	r3, r4
 800360a:	dd20      	ble.n	800364e <_strtol_l.constprop.0+0xba>
 800360c:	1c57      	adds	r7, r2, #1
 800360e:	d007      	beq.n	8003620 <_strtol_l.constprop.0+0x8c>
 8003610:	4581      	cmp	r9, r0
 8003612:	d319      	bcc.n	8003648 <_strtol_l.constprop.0+0xb4>
 8003614:	d101      	bne.n	800361a <_strtol_l.constprop.0+0x86>
 8003616:	45a2      	cmp	sl, r4
 8003618:	db16      	blt.n	8003648 <_strtol_l.constprop.0+0xb4>
 800361a:	2201      	movs	r2, #1
 800361c:	fb00 4003 	mla	r0, r0, r3, r4
 8003620:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003624:	e7eb      	b.n	80035fe <_strtol_l.constprop.0+0x6a>
 8003626:	2c2b      	cmp	r4, #43	; 0x2b
 8003628:	bf04      	itt	eq
 800362a:	782c      	ldrbeq	r4, [r5, #0]
 800362c:	1c95      	addeq	r5, r2, #2
 800362e:	e7ce      	b.n	80035ce <_strtol_l.constprop.0+0x3a>
 8003630:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003634:	2f19      	cmp	r7, #25
 8003636:	d801      	bhi.n	800363c <_strtol_l.constprop.0+0xa8>
 8003638:	3c37      	subs	r4, #55	; 0x37
 800363a:	e7e5      	b.n	8003608 <_strtol_l.constprop.0+0x74>
 800363c:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003640:	2f19      	cmp	r7, #25
 8003642:	d804      	bhi.n	800364e <_strtol_l.constprop.0+0xba>
 8003644:	3c57      	subs	r4, #87	; 0x57
 8003646:	e7df      	b.n	8003608 <_strtol_l.constprop.0+0x74>
 8003648:	f04f 32ff 	mov.w	r2, #4294967295
 800364c:	e7e8      	b.n	8003620 <_strtol_l.constprop.0+0x8c>
 800364e:	1c53      	adds	r3, r2, #1
 8003650:	d108      	bne.n	8003664 <_strtol_l.constprop.0+0xd0>
 8003652:	2322      	movs	r3, #34	; 0x22
 8003654:	4660      	mov	r0, ip
 8003656:	f8ce 3000 	str.w	r3, [lr]
 800365a:	f1b8 0f00 	cmp.w	r8, #0
 800365e:	d0a6      	beq.n	80035ae <_strtol_l.constprop.0+0x1a>
 8003660:	1e69      	subs	r1, r5, #1
 8003662:	e006      	b.n	8003672 <_strtol_l.constprop.0+0xde>
 8003664:	b106      	cbz	r6, 8003668 <_strtol_l.constprop.0+0xd4>
 8003666:	4240      	negs	r0, r0
 8003668:	f1b8 0f00 	cmp.w	r8, #0
 800366c:	d09f      	beq.n	80035ae <_strtol_l.constprop.0+0x1a>
 800366e:	2a00      	cmp	r2, #0
 8003670:	d1f6      	bne.n	8003660 <_strtol_l.constprop.0+0xcc>
 8003672:	f8c8 1000 	str.w	r1, [r8]
 8003676:	e79a      	b.n	80035ae <_strtol_l.constprop.0+0x1a>
 8003678:	2430      	movs	r4, #48	; 0x30
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1b5      	bne.n	80035ea <_strtol_l.constprop.0+0x56>
 800367e:	2308      	movs	r3, #8
 8003680:	e7b3      	b.n	80035ea <_strtol_l.constprop.0+0x56>
 8003682:	2c30      	cmp	r4, #48	; 0x30
 8003684:	d0a9      	beq.n	80035da <_strtol_l.constprop.0+0x46>
 8003686:	230a      	movs	r3, #10
 8003688:	e7af      	b.n	80035ea <_strtol_l.constprop.0+0x56>
 800368a:	bf00      	nop
 800368c:	080047db 	.word	0x080047db

08003690 <strtol>:
 8003690:	4613      	mov	r3, r2
 8003692:	460a      	mov	r2, r1
 8003694:	4601      	mov	r1, r0
 8003696:	4802      	ldr	r0, [pc, #8]	; (80036a0 <strtol+0x10>)
 8003698:	6800      	ldr	r0, [r0, #0]
 800369a:	f7ff bf7b 	b.w	8003594 <_strtol_l.constprop.0>
 800369e:	bf00      	nop
 80036a0:	20000064 	.word	0x20000064

080036a4 <std>:
 80036a4:	2300      	movs	r3, #0
 80036a6:	b510      	push	{r4, lr}
 80036a8:	4604      	mov	r4, r0
 80036aa:	e9c0 3300 	strd	r3, r3, [r0]
 80036ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80036b2:	6083      	str	r3, [r0, #8]
 80036b4:	8181      	strh	r1, [r0, #12]
 80036b6:	6643      	str	r3, [r0, #100]	; 0x64
 80036b8:	81c2      	strh	r2, [r0, #14]
 80036ba:	6183      	str	r3, [r0, #24]
 80036bc:	4619      	mov	r1, r3
 80036be:	2208      	movs	r2, #8
 80036c0:	305c      	adds	r0, #92	; 0x5c
 80036c2:	f000 f9e5 	bl	8003a90 <memset>
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <std+0x58>)
 80036c8:	6224      	str	r4, [r4, #32]
 80036ca:	6263      	str	r3, [r4, #36]	; 0x24
 80036cc:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <std+0x5c>)
 80036ce:	62a3      	str	r3, [r4, #40]	; 0x28
 80036d0:	4b0c      	ldr	r3, [pc, #48]	; (8003704 <std+0x60>)
 80036d2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80036d4:	4b0c      	ldr	r3, [pc, #48]	; (8003708 <std+0x64>)
 80036d6:	6323      	str	r3, [r4, #48]	; 0x30
 80036d8:	4b0c      	ldr	r3, [pc, #48]	; (800370c <std+0x68>)
 80036da:	429c      	cmp	r4, r3
 80036dc:	d006      	beq.n	80036ec <std+0x48>
 80036de:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80036e2:	4294      	cmp	r4, r2
 80036e4:	d002      	beq.n	80036ec <std+0x48>
 80036e6:	33d0      	adds	r3, #208	; 0xd0
 80036e8:	429c      	cmp	r4, r3
 80036ea:	d105      	bne.n	80036f8 <std+0x54>
 80036ec:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80036f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036f4:	f000 baa0 	b.w	8003c38 <__retarget_lock_init_recursive>
 80036f8:	bd10      	pop	{r4, pc}
 80036fa:	bf00      	nop
 80036fc:	080038e1 	.word	0x080038e1
 8003700:	08003903 	.word	0x08003903
 8003704:	0800393b 	.word	0x0800393b
 8003708:	0800395f 	.word	0x0800395f
 800370c:	200001f4 	.word	0x200001f4

08003710 <stdio_exit_handler>:
 8003710:	4a02      	ldr	r2, [pc, #8]	; (800371c <stdio_exit_handler+0xc>)
 8003712:	4903      	ldr	r1, [pc, #12]	; (8003720 <stdio_exit_handler+0x10>)
 8003714:	4803      	ldr	r0, [pc, #12]	; (8003724 <stdio_exit_handler+0x14>)
 8003716:	f000 b869 	b.w	80037ec <_fwalk_sglue>
 800371a:	bf00      	nop
 800371c:	2000000c 	.word	0x2000000c
 8003720:	08003f79 	.word	0x08003f79
 8003724:	20000018 	.word	0x20000018

08003728 <cleanup_stdio>:
 8003728:	6841      	ldr	r1, [r0, #4]
 800372a:	4b0c      	ldr	r3, [pc, #48]	; (800375c <cleanup_stdio+0x34>)
 800372c:	b510      	push	{r4, lr}
 800372e:	4299      	cmp	r1, r3
 8003730:	4604      	mov	r4, r0
 8003732:	d001      	beq.n	8003738 <cleanup_stdio+0x10>
 8003734:	f000 fc20 	bl	8003f78 <_fflush_r>
 8003738:	68a1      	ldr	r1, [r4, #8]
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <cleanup_stdio+0x38>)
 800373c:	4299      	cmp	r1, r3
 800373e:	d002      	beq.n	8003746 <cleanup_stdio+0x1e>
 8003740:	4620      	mov	r0, r4
 8003742:	f000 fc19 	bl	8003f78 <_fflush_r>
 8003746:	68e1      	ldr	r1, [r4, #12]
 8003748:	4b06      	ldr	r3, [pc, #24]	; (8003764 <cleanup_stdio+0x3c>)
 800374a:	4299      	cmp	r1, r3
 800374c:	d004      	beq.n	8003758 <cleanup_stdio+0x30>
 800374e:	4620      	mov	r0, r4
 8003750:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003754:	f000 bc10 	b.w	8003f78 <_fflush_r>
 8003758:	bd10      	pop	{r4, pc}
 800375a:	bf00      	nop
 800375c:	200001f4 	.word	0x200001f4
 8003760:	2000025c 	.word	0x2000025c
 8003764:	200002c4 	.word	0x200002c4

08003768 <global_stdio_init.part.0>:
 8003768:	b510      	push	{r4, lr}
 800376a:	4b0b      	ldr	r3, [pc, #44]	; (8003798 <global_stdio_init.part.0+0x30>)
 800376c:	4c0b      	ldr	r4, [pc, #44]	; (800379c <global_stdio_init.part.0+0x34>)
 800376e:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <global_stdio_init.part.0+0x38>)
 8003770:	4620      	mov	r0, r4
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	2104      	movs	r1, #4
 8003776:	2200      	movs	r2, #0
 8003778:	f7ff ff94 	bl	80036a4 <std>
 800377c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8003780:	2201      	movs	r2, #1
 8003782:	2109      	movs	r1, #9
 8003784:	f7ff ff8e 	bl	80036a4 <std>
 8003788:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800378c:	2202      	movs	r2, #2
 800378e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003792:	2112      	movs	r1, #18
 8003794:	f7ff bf86 	b.w	80036a4 <std>
 8003798:	2000032c 	.word	0x2000032c
 800379c:	200001f4 	.word	0x200001f4
 80037a0:	08003711 	.word	0x08003711

080037a4 <__sfp_lock_acquire>:
 80037a4:	4801      	ldr	r0, [pc, #4]	; (80037ac <__sfp_lock_acquire+0x8>)
 80037a6:	f000 ba48 	b.w	8003c3a <__retarget_lock_acquire_recursive>
 80037aa:	bf00      	nop
 80037ac:	20000335 	.word	0x20000335

080037b0 <__sfp_lock_release>:
 80037b0:	4801      	ldr	r0, [pc, #4]	; (80037b8 <__sfp_lock_release+0x8>)
 80037b2:	f000 ba43 	b.w	8003c3c <__retarget_lock_release_recursive>
 80037b6:	bf00      	nop
 80037b8:	20000335 	.word	0x20000335

080037bc <__sinit>:
 80037bc:	b510      	push	{r4, lr}
 80037be:	4604      	mov	r4, r0
 80037c0:	f7ff fff0 	bl	80037a4 <__sfp_lock_acquire>
 80037c4:	6a23      	ldr	r3, [r4, #32]
 80037c6:	b11b      	cbz	r3, 80037d0 <__sinit+0x14>
 80037c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80037cc:	f7ff bff0 	b.w	80037b0 <__sfp_lock_release>
 80037d0:	4b04      	ldr	r3, [pc, #16]	; (80037e4 <__sinit+0x28>)
 80037d2:	6223      	str	r3, [r4, #32]
 80037d4:	4b04      	ldr	r3, [pc, #16]	; (80037e8 <__sinit+0x2c>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1f5      	bne.n	80037c8 <__sinit+0xc>
 80037dc:	f7ff ffc4 	bl	8003768 <global_stdio_init.part.0>
 80037e0:	e7f2      	b.n	80037c8 <__sinit+0xc>
 80037e2:	bf00      	nop
 80037e4:	08003729 	.word	0x08003729
 80037e8:	2000032c 	.word	0x2000032c

080037ec <_fwalk_sglue>:
 80037ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037f0:	4607      	mov	r7, r0
 80037f2:	4688      	mov	r8, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	2600      	movs	r6, #0
 80037f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037fc:	f1b9 0901 	subs.w	r9, r9, #1
 8003800:	d505      	bpl.n	800380e <_fwalk_sglue+0x22>
 8003802:	6824      	ldr	r4, [r4, #0]
 8003804:	2c00      	cmp	r4, #0
 8003806:	d1f7      	bne.n	80037f8 <_fwalk_sglue+0xc>
 8003808:	4630      	mov	r0, r6
 800380a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800380e:	89ab      	ldrh	r3, [r5, #12]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d907      	bls.n	8003824 <_fwalk_sglue+0x38>
 8003814:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003818:	3301      	adds	r3, #1
 800381a:	d003      	beq.n	8003824 <_fwalk_sglue+0x38>
 800381c:	4629      	mov	r1, r5
 800381e:	4638      	mov	r0, r7
 8003820:	47c0      	blx	r8
 8003822:	4306      	orrs	r6, r0
 8003824:	3568      	adds	r5, #104	; 0x68
 8003826:	e7e9      	b.n	80037fc <_fwalk_sglue+0x10>

08003828 <_puts_r>:
 8003828:	6a03      	ldr	r3, [r0, #32]
 800382a:	b570      	push	{r4, r5, r6, lr}
 800382c:	4605      	mov	r5, r0
 800382e:	460e      	mov	r6, r1
 8003830:	6884      	ldr	r4, [r0, #8]
 8003832:	b90b      	cbnz	r3, 8003838 <_puts_r+0x10>
 8003834:	f7ff ffc2 	bl	80037bc <__sinit>
 8003838:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800383a:	07db      	lsls	r3, r3, #31
 800383c:	d405      	bmi.n	800384a <_puts_r+0x22>
 800383e:	89a3      	ldrh	r3, [r4, #12]
 8003840:	0598      	lsls	r0, r3, #22
 8003842:	d402      	bmi.n	800384a <_puts_r+0x22>
 8003844:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003846:	f000 f9f8 	bl	8003c3a <__retarget_lock_acquire_recursive>
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	0719      	lsls	r1, r3, #28
 800384e:	d513      	bpl.n	8003878 <_puts_r+0x50>
 8003850:	6923      	ldr	r3, [r4, #16]
 8003852:	b18b      	cbz	r3, 8003878 <_puts_r+0x50>
 8003854:	3e01      	subs	r6, #1
 8003856:	68a3      	ldr	r3, [r4, #8]
 8003858:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800385c:	3b01      	subs	r3, #1
 800385e:	60a3      	str	r3, [r4, #8]
 8003860:	b9e9      	cbnz	r1, 800389e <_puts_r+0x76>
 8003862:	2b00      	cmp	r3, #0
 8003864:	da2e      	bge.n	80038c4 <_puts_r+0x9c>
 8003866:	4622      	mov	r2, r4
 8003868:	210a      	movs	r1, #10
 800386a:	4628      	mov	r0, r5
 800386c:	f000 f87b 	bl	8003966 <__swbuf_r>
 8003870:	3001      	adds	r0, #1
 8003872:	d007      	beq.n	8003884 <_puts_r+0x5c>
 8003874:	250a      	movs	r5, #10
 8003876:	e007      	b.n	8003888 <_puts_r+0x60>
 8003878:	4621      	mov	r1, r4
 800387a:	4628      	mov	r0, r5
 800387c:	f000 f8b0 	bl	80039e0 <__swsetup_r>
 8003880:	2800      	cmp	r0, #0
 8003882:	d0e7      	beq.n	8003854 <_puts_r+0x2c>
 8003884:	f04f 35ff 	mov.w	r5, #4294967295
 8003888:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800388a:	07da      	lsls	r2, r3, #31
 800388c:	d405      	bmi.n	800389a <_puts_r+0x72>
 800388e:	89a3      	ldrh	r3, [r4, #12]
 8003890:	059b      	lsls	r3, r3, #22
 8003892:	d402      	bmi.n	800389a <_puts_r+0x72>
 8003894:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003896:	f000 f9d1 	bl	8003c3c <__retarget_lock_release_recursive>
 800389a:	4628      	mov	r0, r5
 800389c:	bd70      	pop	{r4, r5, r6, pc}
 800389e:	2b00      	cmp	r3, #0
 80038a0:	da04      	bge.n	80038ac <_puts_r+0x84>
 80038a2:	69a2      	ldr	r2, [r4, #24]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	dc06      	bgt.n	80038b6 <_puts_r+0x8e>
 80038a8:	290a      	cmp	r1, #10
 80038aa:	d004      	beq.n	80038b6 <_puts_r+0x8e>
 80038ac:	6823      	ldr	r3, [r4, #0]
 80038ae:	1c5a      	adds	r2, r3, #1
 80038b0:	6022      	str	r2, [r4, #0]
 80038b2:	7019      	strb	r1, [r3, #0]
 80038b4:	e7cf      	b.n	8003856 <_puts_r+0x2e>
 80038b6:	4622      	mov	r2, r4
 80038b8:	4628      	mov	r0, r5
 80038ba:	f000 f854 	bl	8003966 <__swbuf_r>
 80038be:	3001      	adds	r0, #1
 80038c0:	d1c9      	bne.n	8003856 <_puts_r+0x2e>
 80038c2:	e7df      	b.n	8003884 <_puts_r+0x5c>
 80038c4:	250a      	movs	r5, #10
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	6022      	str	r2, [r4, #0]
 80038cc:	701d      	strb	r5, [r3, #0]
 80038ce:	e7db      	b.n	8003888 <_puts_r+0x60>

080038d0 <puts>:
 80038d0:	4b02      	ldr	r3, [pc, #8]	; (80038dc <puts+0xc>)
 80038d2:	4601      	mov	r1, r0
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	f7ff bfa7 	b.w	8003828 <_puts_r>
 80038da:	bf00      	nop
 80038dc:	20000064 	.word	0x20000064

080038e0 <__sread>:
 80038e0:	b510      	push	{r4, lr}
 80038e2:	460c      	mov	r4, r1
 80038e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038e8:	f000 f958 	bl	8003b9c <_read_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	bfab      	itete	ge
 80038f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80038f2:	89a3      	ldrhlt	r3, [r4, #12]
 80038f4:	181b      	addge	r3, r3, r0
 80038f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80038fa:	bfac      	ite	ge
 80038fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80038fe:	81a3      	strhlt	r3, [r4, #12]
 8003900:	bd10      	pop	{r4, pc}

08003902 <__swrite>:
 8003902:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003906:	461f      	mov	r7, r3
 8003908:	898b      	ldrh	r3, [r1, #12]
 800390a:	4605      	mov	r5, r0
 800390c:	05db      	lsls	r3, r3, #23
 800390e:	460c      	mov	r4, r1
 8003910:	4616      	mov	r6, r2
 8003912:	d505      	bpl.n	8003920 <__swrite+0x1e>
 8003914:	2302      	movs	r3, #2
 8003916:	2200      	movs	r2, #0
 8003918:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391c:	f000 f92c 	bl	8003b78 <_lseek_r>
 8003920:	89a3      	ldrh	r3, [r4, #12]
 8003922:	4632      	mov	r2, r6
 8003924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003928:	81a3      	strh	r3, [r4, #12]
 800392a:	4628      	mov	r0, r5
 800392c:	463b      	mov	r3, r7
 800392e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003932:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003936:	f000 b943 	b.w	8003bc0 <_write_r>

0800393a <__sseek>:
 800393a:	b510      	push	{r4, lr}
 800393c:	460c      	mov	r4, r1
 800393e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003942:	f000 f919 	bl	8003b78 <_lseek_r>
 8003946:	1c43      	adds	r3, r0, #1
 8003948:	89a3      	ldrh	r3, [r4, #12]
 800394a:	bf15      	itete	ne
 800394c:	6560      	strne	r0, [r4, #84]	; 0x54
 800394e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003952:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003956:	81a3      	strheq	r3, [r4, #12]
 8003958:	bf18      	it	ne
 800395a:	81a3      	strhne	r3, [r4, #12]
 800395c:	bd10      	pop	{r4, pc}

0800395e <__sclose>:
 800395e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003962:	f000 b8f9 	b.w	8003b58 <_close_r>

08003966 <__swbuf_r>:
 8003966:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003968:	460e      	mov	r6, r1
 800396a:	4614      	mov	r4, r2
 800396c:	4605      	mov	r5, r0
 800396e:	b118      	cbz	r0, 8003978 <__swbuf_r+0x12>
 8003970:	6a03      	ldr	r3, [r0, #32]
 8003972:	b90b      	cbnz	r3, 8003978 <__swbuf_r+0x12>
 8003974:	f7ff ff22 	bl	80037bc <__sinit>
 8003978:	69a3      	ldr	r3, [r4, #24]
 800397a:	60a3      	str	r3, [r4, #8]
 800397c:	89a3      	ldrh	r3, [r4, #12]
 800397e:	071a      	lsls	r2, r3, #28
 8003980:	d525      	bpl.n	80039ce <__swbuf_r+0x68>
 8003982:	6923      	ldr	r3, [r4, #16]
 8003984:	b31b      	cbz	r3, 80039ce <__swbuf_r+0x68>
 8003986:	6823      	ldr	r3, [r4, #0]
 8003988:	6922      	ldr	r2, [r4, #16]
 800398a:	b2f6      	uxtb	r6, r6
 800398c:	1a98      	subs	r0, r3, r2
 800398e:	6963      	ldr	r3, [r4, #20]
 8003990:	4637      	mov	r7, r6
 8003992:	4283      	cmp	r3, r0
 8003994:	dc04      	bgt.n	80039a0 <__swbuf_r+0x3a>
 8003996:	4621      	mov	r1, r4
 8003998:	4628      	mov	r0, r5
 800399a:	f000 faed 	bl	8003f78 <_fflush_r>
 800399e:	b9e0      	cbnz	r0, 80039da <__swbuf_r+0x74>
 80039a0:	68a3      	ldr	r3, [r4, #8]
 80039a2:	3b01      	subs	r3, #1
 80039a4:	60a3      	str	r3, [r4, #8]
 80039a6:	6823      	ldr	r3, [r4, #0]
 80039a8:	1c5a      	adds	r2, r3, #1
 80039aa:	6022      	str	r2, [r4, #0]
 80039ac:	701e      	strb	r6, [r3, #0]
 80039ae:	6962      	ldr	r2, [r4, #20]
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d004      	beq.n	80039c0 <__swbuf_r+0x5a>
 80039b6:	89a3      	ldrh	r3, [r4, #12]
 80039b8:	07db      	lsls	r3, r3, #31
 80039ba:	d506      	bpl.n	80039ca <__swbuf_r+0x64>
 80039bc:	2e0a      	cmp	r6, #10
 80039be:	d104      	bne.n	80039ca <__swbuf_r+0x64>
 80039c0:	4621      	mov	r1, r4
 80039c2:	4628      	mov	r0, r5
 80039c4:	f000 fad8 	bl	8003f78 <_fflush_r>
 80039c8:	b938      	cbnz	r0, 80039da <__swbuf_r+0x74>
 80039ca:	4638      	mov	r0, r7
 80039cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039ce:	4621      	mov	r1, r4
 80039d0:	4628      	mov	r0, r5
 80039d2:	f000 f805 	bl	80039e0 <__swsetup_r>
 80039d6:	2800      	cmp	r0, #0
 80039d8:	d0d5      	beq.n	8003986 <__swbuf_r+0x20>
 80039da:	f04f 37ff 	mov.w	r7, #4294967295
 80039de:	e7f4      	b.n	80039ca <__swbuf_r+0x64>

080039e0 <__swsetup_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4b2a      	ldr	r3, [pc, #168]	; (8003a8c <__swsetup_r+0xac>)
 80039e4:	4605      	mov	r5, r0
 80039e6:	6818      	ldr	r0, [r3, #0]
 80039e8:	460c      	mov	r4, r1
 80039ea:	b118      	cbz	r0, 80039f4 <__swsetup_r+0x14>
 80039ec:	6a03      	ldr	r3, [r0, #32]
 80039ee:	b90b      	cbnz	r3, 80039f4 <__swsetup_r+0x14>
 80039f0:	f7ff fee4 	bl	80037bc <__sinit>
 80039f4:	89a3      	ldrh	r3, [r4, #12]
 80039f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039fa:	0718      	lsls	r0, r3, #28
 80039fc:	d422      	bmi.n	8003a44 <__swsetup_r+0x64>
 80039fe:	06d9      	lsls	r1, r3, #27
 8003a00:	d407      	bmi.n	8003a12 <__swsetup_r+0x32>
 8003a02:	2309      	movs	r3, #9
 8003a04:	602b      	str	r3, [r5, #0]
 8003a06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003a0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a0e:	81a3      	strh	r3, [r4, #12]
 8003a10:	e034      	b.n	8003a7c <__swsetup_r+0x9c>
 8003a12:	0758      	lsls	r0, r3, #29
 8003a14:	d512      	bpl.n	8003a3c <__swsetup_r+0x5c>
 8003a16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a18:	b141      	cbz	r1, 8003a2c <__swsetup_r+0x4c>
 8003a1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a1e:	4299      	cmp	r1, r3
 8003a20:	d002      	beq.n	8003a28 <__swsetup_r+0x48>
 8003a22:	4628      	mov	r0, r5
 8003a24:	f000 f92a 	bl	8003c7c <_free_r>
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6363      	str	r3, [r4, #52]	; 0x34
 8003a2c:	89a3      	ldrh	r3, [r4, #12]
 8003a2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a32:	81a3      	strh	r3, [r4, #12]
 8003a34:	2300      	movs	r3, #0
 8003a36:	6063      	str	r3, [r4, #4]
 8003a38:	6923      	ldr	r3, [r4, #16]
 8003a3a:	6023      	str	r3, [r4, #0]
 8003a3c:	89a3      	ldrh	r3, [r4, #12]
 8003a3e:	f043 0308 	orr.w	r3, r3, #8
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	6923      	ldr	r3, [r4, #16]
 8003a46:	b94b      	cbnz	r3, 8003a5c <__swsetup_r+0x7c>
 8003a48:	89a3      	ldrh	r3, [r4, #12]
 8003a4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d003      	beq.n	8003a5c <__swsetup_r+0x7c>
 8003a54:	4621      	mov	r1, r4
 8003a56:	4628      	mov	r0, r5
 8003a58:	f000 faed 	bl	8004036 <__smakebuf_r>
 8003a5c:	89a0      	ldrh	r0, [r4, #12]
 8003a5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a62:	f010 0301 	ands.w	r3, r0, #1
 8003a66:	d00a      	beq.n	8003a7e <__swsetup_r+0x9e>
 8003a68:	2300      	movs	r3, #0
 8003a6a:	60a3      	str	r3, [r4, #8]
 8003a6c:	6963      	ldr	r3, [r4, #20]
 8003a6e:	425b      	negs	r3, r3
 8003a70:	61a3      	str	r3, [r4, #24]
 8003a72:	6923      	ldr	r3, [r4, #16]
 8003a74:	b943      	cbnz	r3, 8003a88 <__swsetup_r+0xa8>
 8003a76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a7a:	d1c4      	bne.n	8003a06 <__swsetup_r+0x26>
 8003a7c:	bd38      	pop	{r3, r4, r5, pc}
 8003a7e:	0781      	lsls	r1, r0, #30
 8003a80:	bf58      	it	pl
 8003a82:	6963      	ldrpl	r3, [r4, #20]
 8003a84:	60a3      	str	r3, [r4, #8]
 8003a86:	e7f4      	b.n	8003a72 <__swsetup_r+0x92>
 8003a88:	2000      	movs	r0, #0
 8003a8a:	e7f7      	b.n	8003a7c <__swsetup_r+0x9c>
 8003a8c:	20000064 	.word	0x20000064

08003a90 <memset>:
 8003a90:	4603      	mov	r3, r0
 8003a92:	4402      	add	r2, r0
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d100      	bne.n	8003a9a <memset+0xa>
 8003a98:	4770      	bx	lr
 8003a9a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a9e:	e7f9      	b.n	8003a94 <memset+0x4>

08003aa0 <strtok>:
 8003aa0:	4b16      	ldr	r3, [pc, #88]	; (8003afc <strtok+0x5c>)
 8003aa2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa6:	681f      	ldr	r7, [r3, #0]
 8003aa8:	4605      	mov	r5, r0
 8003aaa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 8003aac:	460e      	mov	r6, r1
 8003aae:	b9ec      	cbnz	r4, 8003aec <strtok+0x4c>
 8003ab0:	2050      	movs	r0, #80	; 0x50
 8003ab2:	f000 f92b 	bl	8003d0c <malloc>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	6478      	str	r0, [r7, #68]	; 0x44
 8003aba:	b920      	cbnz	r0, 8003ac6 <strtok+0x26>
 8003abc:	215b      	movs	r1, #91	; 0x5b
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <strtok+0x60>)
 8003ac0:	4810      	ldr	r0, [pc, #64]	; (8003b04 <strtok+0x64>)
 8003ac2:	f000 f8bd 	bl	8003c40 <__assert_func>
 8003ac6:	e9c0 4400 	strd	r4, r4, [r0]
 8003aca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003ace:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003ad2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ad6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ada:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003ade:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003ae2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003ae6:	6184      	str	r4, [r0, #24]
 8003ae8:	7704      	strb	r4, [r0, #28]
 8003aea:	6244      	str	r4, [r0, #36]	; 0x24
 8003aec:	4631      	mov	r1, r6
 8003aee:	4628      	mov	r0, r5
 8003af0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003af2:	2301      	movs	r3, #1
 8003af4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003af8:	f000 b806 	b.w	8003b08 <__strtok_r>
 8003afc:	20000064 	.word	0x20000064
 8003b00:	080048db 	.word	0x080048db
 8003b04:	080048f2 	.word	0x080048f2

08003b08 <__strtok_r>:
 8003b08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b0a:	b908      	cbnz	r0, 8003b10 <__strtok_r+0x8>
 8003b0c:	6810      	ldr	r0, [r2, #0]
 8003b0e:	b188      	cbz	r0, 8003b34 <__strtok_r+0x2c>
 8003b10:	4604      	mov	r4, r0
 8003b12:	460f      	mov	r7, r1
 8003b14:	4620      	mov	r0, r4
 8003b16:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003b1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003b1e:	b91e      	cbnz	r6, 8003b28 <__strtok_r+0x20>
 8003b20:	b965      	cbnz	r5, 8003b3c <__strtok_r+0x34>
 8003b22:	4628      	mov	r0, r5
 8003b24:	6015      	str	r5, [r2, #0]
 8003b26:	e005      	b.n	8003b34 <__strtok_r+0x2c>
 8003b28:	42b5      	cmp	r5, r6
 8003b2a:	d1f6      	bne.n	8003b1a <__strtok_r+0x12>
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d1f0      	bne.n	8003b12 <__strtok_r+0xa>
 8003b30:	6014      	str	r4, [r2, #0]
 8003b32:	7003      	strb	r3, [r0, #0]
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	461c      	mov	r4, r3
 8003b38:	e00c      	b.n	8003b54 <__strtok_r+0x4c>
 8003b3a:	b915      	cbnz	r5, 8003b42 <__strtok_r+0x3a>
 8003b3c:	460e      	mov	r6, r1
 8003b3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003b42:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003b46:	42ab      	cmp	r3, r5
 8003b48:	d1f7      	bne.n	8003b3a <__strtok_r+0x32>
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d0f3      	beq.n	8003b36 <__strtok_r+0x2e>
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003b54:	6014      	str	r4, [r2, #0]
 8003b56:	e7ed      	b.n	8003b34 <__strtok_r+0x2c>

08003b58 <_close_r>:
 8003b58:	b538      	push	{r3, r4, r5, lr}
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	4d05      	ldr	r5, [pc, #20]	; (8003b74 <_close_r+0x1c>)
 8003b5e:	4604      	mov	r4, r0
 8003b60:	4608      	mov	r0, r1
 8003b62:	602b      	str	r3, [r5, #0]
 8003b64:	f7fc ff32 	bl	80009cc <_close>
 8003b68:	1c43      	adds	r3, r0, #1
 8003b6a:	d102      	bne.n	8003b72 <_close_r+0x1a>
 8003b6c:	682b      	ldr	r3, [r5, #0]
 8003b6e:	b103      	cbz	r3, 8003b72 <_close_r+0x1a>
 8003b70:	6023      	str	r3, [r4, #0]
 8003b72:	bd38      	pop	{r3, r4, r5, pc}
 8003b74:	20000330 	.word	0x20000330

08003b78 <_lseek_r>:
 8003b78:	b538      	push	{r3, r4, r5, lr}
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	4611      	mov	r1, r2
 8003b80:	2200      	movs	r2, #0
 8003b82:	4d05      	ldr	r5, [pc, #20]	; (8003b98 <_lseek_r+0x20>)
 8003b84:	602a      	str	r2, [r5, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	f7fc ff44 	bl	8000a14 <_lseek>
 8003b8c:	1c43      	adds	r3, r0, #1
 8003b8e:	d102      	bne.n	8003b96 <_lseek_r+0x1e>
 8003b90:	682b      	ldr	r3, [r5, #0]
 8003b92:	b103      	cbz	r3, 8003b96 <_lseek_r+0x1e>
 8003b94:	6023      	str	r3, [r4, #0]
 8003b96:	bd38      	pop	{r3, r4, r5, pc}
 8003b98:	20000330 	.word	0x20000330

08003b9c <_read_r>:
 8003b9c:	b538      	push	{r3, r4, r5, lr}
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	4d05      	ldr	r5, [pc, #20]	; (8003bbc <_read_r+0x20>)
 8003ba8:	602a      	str	r2, [r5, #0]
 8003baa:	461a      	mov	r2, r3
 8003bac:	f7fc fed5 	bl	800095a <_read>
 8003bb0:	1c43      	adds	r3, r0, #1
 8003bb2:	d102      	bne.n	8003bba <_read_r+0x1e>
 8003bb4:	682b      	ldr	r3, [r5, #0]
 8003bb6:	b103      	cbz	r3, 8003bba <_read_r+0x1e>
 8003bb8:	6023      	str	r3, [r4, #0]
 8003bba:	bd38      	pop	{r3, r4, r5, pc}
 8003bbc:	20000330 	.word	0x20000330

08003bc0 <_write_r>:
 8003bc0:	b538      	push	{r3, r4, r5, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	4608      	mov	r0, r1
 8003bc6:	4611      	mov	r1, r2
 8003bc8:	2200      	movs	r2, #0
 8003bca:	4d05      	ldr	r5, [pc, #20]	; (8003be0 <_write_r+0x20>)
 8003bcc:	602a      	str	r2, [r5, #0]
 8003bce:	461a      	mov	r2, r3
 8003bd0:	f7fc fee0 	bl	8000994 <_write>
 8003bd4:	1c43      	adds	r3, r0, #1
 8003bd6:	d102      	bne.n	8003bde <_write_r+0x1e>
 8003bd8:	682b      	ldr	r3, [r5, #0]
 8003bda:	b103      	cbz	r3, 8003bde <_write_r+0x1e>
 8003bdc:	6023      	str	r3, [r4, #0]
 8003bde:	bd38      	pop	{r3, r4, r5, pc}
 8003be0:	20000330 	.word	0x20000330

08003be4 <__errno>:
 8003be4:	4b01      	ldr	r3, [pc, #4]	; (8003bec <__errno+0x8>)
 8003be6:	6818      	ldr	r0, [r3, #0]
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000064 	.word	0x20000064

08003bf0 <__libc_init_array>:
 8003bf0:	b570      	push	{r4, r5, r6, lr}
 8003bf2:	2600      	movs	r6, #0
 8003bf4:	4d0c      	ldr	r5, [pc, #48]	; (8003c28 <__libc_init_array+0x38>)
 8003bf6:	4c0d      	ldr	r4, [pc, #52]	; (8003c2c <__libc_init_array+0x3c>)
 8003bf8:	1b64      	subs	r4, r4, r5
 8003bfa:	10a4      	asrs	r4, r4, #2
 8003bfc:	42a6      	cmp	r6, r4
 8003bfe:	d109      	bne.n	8003c14 <__libc_init_array+0x24>
 8003c00:	f000 fdb6 	bl	8004770 <_init>
 8003c04:	2600      	movs	r6, #0
 8003c06:	4d0a      	ldr	r5, [pc, #40]	; (8003c30 <__libc_init_array+0x40>)
 8003c08:	4c0a      	ldr	r4, [pc, #40]	; (8003c34 <__libc_init_array+0x44>)
 8003c0a:	1b64      	subs	r4, r4, r5
 8003c0c:	10a4      	asrs	r4, r4, #2
 8003c0e:	42a6      	cmp	r6, r4
 8003c10:	d105      	bne.n	8003c1e <__libc_init_array+0x2e>
 8003c12:	bd70      	pop	{r4, r5, r6, pc}
 8003c14:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c18:	4798      	blx	r3
 8003c1a:	3601      	adds	r6, #1
 8003c1c:	e7ee      	b.n	8003bfc <__libc_init_array+0xc>
 8003c1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c22:	4798      	blx	r3
 8003c24:	3601      	adds	r6, #1
 8003c26:	e7f2      	b.n	8003c0e <__libc_init_array+0x1e>
 8003c28:	080049bc 	.word	0x080049bc
 8003c2c:	080049bc 	.word	0x080049bc
 8003c30:	080049bc 	.word	0x080049bc
 8003c34:	080049c0 	.word	0x080049c0

08003c38 <__retarget_lock_init_recursive>:
 8003c38:	4770      	bx	lr

08003c3a <__retarget_lock_acquire_recursive>:
 8003c3a:	4770      	bx	lr

08003c3c <__retarget_lock_release_recursive>:
 8003c3c:	4770      	bx	lr
	...

08003c40 <__assert_func>:
 8003c40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003c42:	4614      	mov	r4, r2
 8003c44:	461a      	mov	r2, r3
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <__assert_func+0x2c>)
 8003c48:	4605      	mov	r5, r0
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68d8      	ldr	r0, [r3, #12]
 8003c4e:	b14c      	cbz	r4, 8003c64 <__assert_func+0x24>
 8003c50:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <__assert_func+0x30>)
 8003c52:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003c56:	9100      	str	r1, [sp, #0]
 8003c58:	462b      	mov	r3, r5
 8003c5a:	4906      	ldr	r1, [pc, #24]	; (8003c74 <__assert_func+0x34>)
 8003c5c:	f000 f9b4 	bl	8003fc8 <fiprintf>
 8003c60:	f000 fa58 	bl	8004114 <abort>
 8003c64:	4b04      	ldr	r3, [pc, #16]	; (8003c78 <__assert_func+0x38>)
 8003c66:	461c      	mov	r4, r3
 8003c68:	e7f3      	b.n	8003c52 <__assert_func+0x12>
 8003c6a:	bf00      	nop
 8003c6c:	20000064 	.word	0x20000064
 8003c70:	0800494c 	.word	0x0800494c
 8003c74:	08004959 	.word	0x08004959
 8003c78:	08004987 	.word	0x08004987

08003c7c <_free_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4605      	mov	r5, r0
 8003c80:	2900      	cmp	r1, #0
 8003c82:	d040      	beq.n	8003d06 <_free_r+0x8a>
 8003c84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c88:	1f0c      	subs	r4, r1, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	bfb8      	it	lt
 8003c8e:	18e4      	addlt	r4, r4, r3
 8003c90:	f000 f8e4 	bl	8003e5c <__malloc_lock>
 8003c94:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <_free_r+0x8c>)
 8003c96:	6813      	ldr	r3, [r2, #0]
 8003c98:	b933      	cbnz	r3, 8003ca8 <_free_r+0x2c>
 8003c9a:	6063      	str	r3, [r4, #4]
 8003c9c:	6014      	str	r4, [r2, #0]
 8003c9e:	4628      	mov	r0, r5
 8003ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca4:	f000 b8e0 	b.w	8003e68 <__malloc_unlock>
 8003ca8:	42a3      	cmp	r3, r4
 8003caa:	d908      	bls.n	8003cbe <_free_r+0x42>
 8003cac:	6820      	ldr	r0, [r4, #0]
 8003cae:	1821      	adds	r1, r4, r0
 8003cb0:	428b      	cmp	r3, r1
 8003cb2:	bf01      	itttt	eq
 8003cb4:	6819      	ldreq	r1, [r3, #0]
 8003cb6:	685b      	ldreq	r3, [r3, #4]
 8003cb8:	1809      	addeq	r1, r1, r0
 8003cba:	6021      	streq	r1, [r4, #0]
 8003cbc:	e7ed      	b.n	8003c9a <_free_r+0x1e>
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	b10b      	cbz	r3, 8003cc8 <_free_r+0x4c>
 8003cc4:	42a3      	cmp	r3, r4
 8003cc6:	d9fa      	bls.n	8003cbe <_free_r+0x42>
 8003cc8:	6811      	ldr	r1, [r2, #0]
 8003cca:	1850      	adds	r0, r2, r1
 8003ccc:	42a0      	cmp	r0, r4
 8003cce:	d10b      	bne.n	8003ce8 <_free_r+0x6c>
 8003cd0:	6820      	ldr	r0, [r4, #0]
 8003cd2:	4401      	add	r1, r0
 8003cd4:	1850      	adds	r0, r2, r1
 8003cd6:	4283      	cmp	r3, r0
 8003cd8:	6011      	str	r1, [r2, #0]
 8003cda:	d1e0      	bne.n	8003c9e <_free_r+0x22>
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	4408      	add	r0, r1
 8003ce2:	6010      	str	r0, [r2, #0]
 8003ce4:	6053      	str	r3, [r2, #4]
 8003ce6:	e7da      	b.n	8003c9e <_free_r+0x22>
 8003ce8:	d902      	bls.n	8003cf0 <_free_r+0x74>
 8003cea:	230c      	movs	r3, #12
 8003cec:	602b      	str	r3, [r5, #0]
 8003cee:	e7d6      	b.n	8003c9e <_free_r+0x22>
 8003cf0:	6820      	ldr	r0, [r4, #0]
 8003cf2:	1821      	adds	r1, r4, r0
 8003cf4:	428b      	cmp	r3, r1
 8003cf6:	bf01      	itttt	eq
 8003cf8:	6819      	ldreq	r1, [r3, #0]
 8003cfa:	685b      	ldreq	r3, [r3, #4]
 8003cfc:	1809      	addeq	r1, r1, r0
 8003cfe:	6021      	streq	r1, [r4, #0]
 8003d00:	6063      	str	r3, [r4, #4]
 8003d02:	6054      	str	r4, [r2, #4]
 8003d04:	e7cb      	b.n	8003c9e <_free_r+0x22>
 8003d06:	bd38      	pop	{r3, r4, r5, pc}
 8003d08:	20000338 	.word	0x20000338

08003d0c <malloc>:
 8003d0c:	4b02      	ldr	r3, [pc, #8]	; (8003d18 <malloc+0xc>)
 8003d0e:	4601      	mov	r1, r0
 8003d10:	6818      	ldr	r0, [r3, #0]
 8003d12:	f000 b823 	b.w	8003d5c <_malloc_r>
 8003d16:	bf00      	nop
 8003d18:	20000064 	.word	0x20000064

08003d1c <sbrk_aligned>:
 8003d1c:	b570      	push	{r4, r5, r6, lr}
 8003d1e:	4e0e      	ldr	r6, [pc, #56]	; (8003d58 <sbrk_aligned+0x3c>)
 8003d20:	460c      	mov	r4, r1
 8003d22:	6831      	ldr	r1, [r6, #0]
 8003d24:	4605      	mov	r5, r0
 8003d26:	b911      	cbnz	r1, 8003d2e <sbrk_aligned+0x12>
 8003d28:	f000 f9e4 	bl	80040f4 <_sbrk_r>
 8003d2c:	6030      	str	r0, [r6, #0]
 8003d2e:	4621      	mov	r1, r4
 8003d30:	4628      	mov	r0, r5
 8003d32:	f000 f9df 	bl	80040f4 <_sbrk_r>
 8003d36:	1c43      	adds	r3, r0, #1
 8003d38:	d00a      	beq.n	8003d50 <sbrk_aligned+0x34>
 8003d3a:	1cc4      	adds	r4, r0, #3
 8003d3c:	f024 0403 	bic.w	r4, r4, #3
 8003d40:	42a0      	cmp	r0, r4
 8003d42:	d007      	beq.n	8003d54 <sbrk_aligned+0x38>
 8003d44:	1a21      	subs	r1, r4, r0
 8003d46:	4628      	mov	r0, r5
 8003d48:	f000 f9d4 	bl	80040f4 <_sbrk_r>
 8003d4c:	3001      	adds	r0, #1
 8003d4e:	d101      	bne.n	8003d54 <sbrk_aligned+0x38>
 8003d50:	f04f 34ff 	mov.w	r4, #4294967295
 8003d54:	4620      	mov	r0, r4
 8003d56:	bd70      	pop	{r4, r5, r6, pc}
 8003d58:	2000033c 	.word	0x2000033c

08003d5c <_malloc_r>:
 8003d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d60:	1ccd      	adds	r5, r1, #3
 8003d62:	f025 0503 	bic.w	r5, r5, #3
 8003d66:	3508      	adds	r5, #8
 8003d68:	2d0c      	cmp	r5, #12
 8003d6a:	bf38      	it	cc
 8003d6c:	250c      	movcc	r5, #12
 8003d6e:	2d00      	cmp	r5, #0
 8003d70:	4607      	mov	r7, r0
 8003d72:	db01      	blt.n	8003d78 <_malloc_r+0x1c>
 8003d74:	42a9      	cmp	r1, r5
 8003d76:	d905      	bls.n	8003d84 <_malloc_r+0x28>
 8003d78:	230c      	movs	r3, #12
 8003d7a:	2600      	movs	r6, #0
 8003d7c:	603b      	str	r3, [r7, #0]
 8003d7e:	4630      	mov	r0, r6
 8003d80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003e58 <_malloc_r+0xfc>
 8003d88:	f000 f868 	bl	8003e5c <__malloc_lock>
 8003d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d90:	461c      	mov	r4, r3
 8003d92:	bb5c      	cbnz	r4, 8003dec <_malloc_r+0x90>
 8003d94:	4629      	mov	r1, r5
 8003d96:	4638      	mov	r0, r7
 8003d98:	f7ff ffc0 	bl	8003d1c <sbrk_aligned>
 8003d9c:	1c43      	adds	r3, r0, #1
 8003d9e:	4604      	mov	r4, r0
 8003da0:	d155      	bne.n	8003e4e <_malloc_r+0xf2>
 8003da2:	f8d8 4000 	ldr.w	r4, [r8]
 8003da6:	4626      	mov	r6, r4
 8003da8:	2e00      	cmp	r6, #0
 8003daa:	d145      	bne.n	8003e38 <_malloc_r+0xdc>
 8003dac:	2c00      	cmp	r4, #0
 8003dae:	d048      	beq.n	8003e42 <_malloc_r+0xe6>
 8003db0:	6823      	ldr	r3, [r4, #0]
 8003db2:	4631      	mov	r1, r6
 8003db4:	4638      	mov	r0, r7
 8003db6:	eb04 0903 	add.w	r9, r4, r3
 8003dba:	f000 f99b 	bl	80040f4 <_sbrk_r>
 8003dbe:	4581      	cmp	r9, r0
 8003dc0:	d13f      	bne.n	8003e42 <_malloc_r+0xe6>
 8003dc2:	6821      	ldr	r1, [r4, #0]
 8003dc4:	4638      	mov	r0, r7
 8003dc6:	1a6d      	subs	r5, r5, r1
 8003dc8:	4629      	mov	r1, r5
 8003dca:	f7ff ffa7 	bl	8003d1c <sbrk_aligned>
 8003dce:	3001      	adds	r0, #1
 8003dd0:	d037      	beq.n	8003e42 <_malloc_r+0xe6>
 8003dd2:	6823      	ldr	r3, [r4, #0]
 8003dd4:	442b      	add	r3, r5
 8003dd6:	6023      	str	r3, [r4, #0]
 8003dd8:	f8d8 3000 	ldr.w	r3, [r8]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d038      	beq.n	8003e52 <_malloc_r+0xf6>
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	42a2      	cmp	r2, r4
 8003de4:	d12b      	bne.n	8003e3e <_malloc_r+0xe2>
 8003de6:	2200      	movs	r2, #0
 8003de8:	605a      	str	r2, [r3, #4]
 8003dea:	e00f      	b.n	8003e0c <_malloc_r+0xb0>
 8003dec:	6822      	ldr	r2, [r4, #0]
 8003dee:	1b52      	subs	r2, r2, r5
 8003df0:	d41f      	bmi.n	8003e32 <_malloc_r+0xd6>
 8003df2:	2a0b      	cmp	r2, #11
 8003df4:	d917      	bls.n	8003e26 <_malloc_r+0xca>
 8003df6:	1961      	adds	r1, r4, r5
 8003df8:	42a3      	cmp	r3, r4
 8003dfa:	6025      	str	r5, [r4, #0]
 8003dfc:	bf18      	it	ne
 8003dfe:	6059      	strne	r1, [r3, #4]
 8003e00:	6863      	ldr	r3, [r4, #4]
 8003e02:	bf08      	it	eq
 8003e04:	f8c8 1000 	streq.w	r1, [r8]
 8003e08:	5162      	str	r2, [r4, r5]
 8003e0a:	604b      	str	r3, [r1, #4]
 8003e0c:	4638      	mov	r0, r7
 8003e0e:	f104 060b 	add.w	r6, r4, #11
 8003e12:	f000 f829 	bl	8003e68 <__malloc_unlock>
 8003e16:	f026 0607 	bic.w	r6, r6, #7
 8003e1a:	1d23      	adds	r3, r4, #4
 8003e1c:	1af2      	subs	r2, r6, r3
 8003e1e:	d0ae      	beq.n	8003d7e <_malloc_r+0x22>
 8003e20:	1b9b      	subs	r3, r3, r6
 8003e22:	50a3      	str	r3, [r4, r2]
 8003e24:	e7ab      	b.n	8003d7e <_malloc_r+0x22>
 8003e26:	42a3      	cmp	r3, r4
 8003e28:	6862      	ldr	r2, [r4, #4]
 8003e2a:	d1dd      	bne.n	8003de8 <_malloc_r+0x8c>
 8003e2c:	f8c8 2000 	str.w	r2, [r8]
 8003e30:	e7ec      	b.n	8003e0c <_malloc_r+0xb0>
 8003e32:	4623      	mov	r3, r4
 8003e34:	6864      	ldr	r4, [r4, #4]
 8003e36:	e7ac      	b.n	8003d92 <_malloc_r+0x36>
 8003e38:	4634      	mov	r4, r6
 8003e3a:	6876      	ldr	r6, [r6, #4]
 8003e3c:	e7b4      	b.n	8003da8 <_malloc_r+0x4c>
 8003e3e:	4613      	mov	r3, r2
 8003e40:	e7cc      	b.n	8003ddc <_malloc_r+0x80>
 8003e42:	230c      	movs	r3, #12
 8003e44:	4638      	mov	r0, r7
 8003e46:	603b      	str	r3, [r7, #0]
 8003e48:	f000 f80e 	bl	8003e68 <__malloc_unlock>
 8003e4c:	e797      	b.n	8003d7e <_malloc_r+0x22>
 8003e4e:	6025      	str	r5, [r4, #0]
 8003e50:	e7dc      	b.n	8003e0c <_malloc_r+0xb0>
 8003e52:	605b      	str	r3, [r3, #4]
 8003e54:	deff      	udf	#255	; 0xff
 8003e56:	bf00      	nop
 8003e58:	20000338 	.word	0x20000338

08003e5c <__malloc_lock>:
 8003e5c:	4801      	ldr	r0, [pc, #4]	; (8003e64 <__malloc_lock+0x8>)
 8003e5e:	f7ff beec 	b.w	8003c3a <__retarget_lock_acquire_recursive>
 8003e62:	bf00      	nop
 8003e64:	20000334 	.word	0x20000334

08003e68 <__malloc_unlock>:
 8003e68:	4801      	ldr	r0, [pc, #4]	; (8003e70 <__malloc_unlock+0x8>)
 8003e6a:	f7ff bee7 	b.w	8003c3c <__retarget_lock_release_recursive>
 8003e6e:	bf00      	nop
 8003e70:	20000334 	.word	0x20000334

08003e74 <__sflush_r>:
 8003e74:	898a      	ldrh	r2, [r1, #12]
 8003e76:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e78:	4605      	mov	r5, r0
 8003e7a:	0710      	lsls	r0, r2, #28
 8003e7c:	460c      	mov	r4, r1
 8003e7e:	d457      	bmi.n	8003f30 <__sflush_r+0xbc>
 8003e80:	684b      	ldr	r3, [r1, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	dc04      	bgt.n	8003e90 <__sflush_r+0x1c>
 8003e86:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	dc01      	bgt.n	8003e90 <__sflush_r+0x1c>
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003e92:	2e00      	cmp	r6, #0
 8003e94:	d0fa      	beq.n	8003e8c <__sflush_r+0x18>
 8003e96:	2300      	movs	r3, #0
 8003e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003e9c:	682f      	ldr	r7, [r5, #0]
 8003e9e:	6a21      	ldr	r1, [r4, #32]
 8003ea0:	602b      	str	r3, [r5, #0]
 8003ea2:	d032      	beq.n	8003f0a <__sflush_r+0x96>
 8003ea4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003ea6:	89a3      	ldrh	r3, [r4, #12]
 8003ea8:	075a      	lsls	r2, r3, #29
 8003eaa:	d505      	bpl.n	8003eb8 <__sflush_r+0x44>
 8003eac:	6863      	ldr	r3, [r4, #4]
 8003eae:	1ac0      	subs	r0, r0, r3
 8003eb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003eb2:	b10b      	cbz	r3, 8003eb8 <__sflush_r+0x44>
 8003eb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003eb6:	1ac0      	subs	r0, r0, r3
 8003eb8:	2300      	movs	r3, #0
 8003eba:	4602      	mov	r2, r0
 8003ebc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	6a21      	ldr	r1, [r4, #32]
 8003ec2:	47b0      	blx	r6
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	89a3      	ldrh	r3, [r4, #12]
 8003ec8:	d106      	bne.n	8003ed8 <__sflush_r+0x64>
 8003eca:	6829      	ldr	r1, [r5, #0]
 8003ecc:	291d      	cmp	r1, #29
 8003ece:	d82b      	bhi.n	8003f28 <__sflush_r+0xb4>
 8003ed0:	4a28      	ldr	r2, [pc, #160]	; (8003f74 <__sflush_r+0x100>)
 8003ed2:	410a      	asrs	r2, r1
 8003ed4:	07d6      	lsls	r6, r2, #31
 8003ed6:	d427      	bmi.n	8003f28 <__sflush_r+0xb4>
 8003ed8:	2200      	movs	r2, #0
 8003eda:	6062      	str	r2, [r4, #4]
 8003edc:	6922      	ldr	r2, [r4, #16]
 8003ede:	04d9      	lsls	r1, r3, #19
 8003ee0:	6022      	str	r2, [r4, #0]
 8003ee2:	d504      	bpl.n	8003eee <__sflush_r+0x7a>
 8003ee4:	1c42      	adds	r2, r0, #1
 8003ee6:	d101      	bne.n	8003eec <__sflush_r+0x78>
 8003ee8:	682b      	ldr	r3, [r5, #0]
 8003eea:	b903      	cbnz	r3, 8003eee <__sflush_r+0x7a>
 8003eec:	6560      	str	r0, [r4, #84]	; 0x54
 8003eee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ef0:	602f      	str	r7, [r5, #0]
 8003ef2:	2900      	cmp	r1, #0
 8003ef4:	d0ca      	beq.n	8003e8c <__sflush_r+0x18>
 8003ef6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003efa:	4299      	cmp	r1, r3
 8003efc:	d002      	beq.n	8003f04 <__sflush_r+0x90>
 8003efe:	4628      	mov	r0, r5
 8003f00:	f7ff febc 	bl	8003c7c <_free_r>
 8003f04:	2000      	movs	r0, #0
 8003f06:	6360      	str	r0, [r4, #52]	; 0x34
 8003f08:	e7c1      	b.n	8003e8e <__sflush_r+0x1a>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	4628      	mov	r0, r5
 8003f0e:	47b0      	blx	r6
 8003f10:	1c41      	adds	r1, r0, #1
 8003f12:	d1c8      	bne.n	8003ea6 <__sflush_r+0x32>
 8003f14:	682b      	ldr	r3, [r5, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d0c5      	beq.n	8003ea6 <__sflush_r+0x32>
 8003f1a:	2b1d      	cmp	r3, #29
 8003f1c:	d001      	beq.n	8003f22 <__sflush_r+0xae>
 8003f1e:	2b16      	cmp	r3, #22
 8003f20:	d101      	bne.n	8003f26 <__sflush_r+0xb2>
 8003f22:	602f      	str	r7, [r5, #0]
 8003f24:	e7b2      	b.n	8003e8c <__sflush_r+0x18>
 8003f26:	89a3      	ldrh	r3, [r4, #12]
 8003f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f2c:	81a3      	strh	r3, [r4, #12]
 8003f2e:	e7ae      	b.n	8003e8e <__sflush_r+0x1a>
 8003f30:	690f      	ldr	r7, [r1, #16]
 8003f32:	2f00      	cmp	r7, #0
 8003f34:	d0aa      	beq.n	8003e8c <__sflush_r+0x18>
 8003f36:	0793      	lsls	r3, r2, #30
 8003f38:	bf18      	it	ne
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	680e      	ldr	r6, [r1, #0]
 8003f3e:	bf08      	it	eq
 8003f40:	694b      	ldreq	r3, [r1, #20]
 8003f42:	1bf6      	subs	r6, r6, r7
 8003f44:	600f      	str	r7, [r1, #0]
 8003f46:	608b      	str	r3, [r1, #8]
 8003f48:	2e00      	cmp	r6, #0
 8003f4a:	dd9f      	ble.n	8003e8c <__sflush_r+0x18>
 8003f4c:	4633      	mov	r3, r6
 8003f4e:	463a      	mov	r2, r7
 8003f50:	4628      	mov	r0, r5
 8003f52:	6a21      	ldr	r1, [r4, #32]
 8003f54:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8003f58:	47e0      	blx	ip
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	dc06      	bgt.n	8003f6c <__sflush_r+0xf8>
 8003f5e:	89a3      	ldrh	r3, [r4, #12]
 8003f60:	f04f 30ff 	mov.w	r0, #4294967295
 8003f64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003f68:	81a3      	strh	r3, [r4, #12]
 8003f6a:	e790      	b.n	8003e8e <__sflush_r+0x1a>
 8003f6c:	4407      	add	r7, r0
 8003f6e:	1a36      	subs	r6, r6, r0
 8003f70:	e7ea      	b.n	8003f48 <__sflush_r+0xd4>
 8003f72:	bf00      	nop
 8003f74:	dfbffffe 	.word	0xdfbffffe

08003f78 <_fflush_r>:
 8003f78:	b538      	push	{r3, r4, r5, lr}
 8003f7a:	690b      	ldr	r3, [r1, #16]
 8003f7c:	4605      	mov	r5, r0
 8003f7e:	460c      	mov	r4, r1
 8003f80:	b913      	cbnz	r3, 8003f88 <_fflush_r+0x10>
 8003f82:	2500      	movs	r5, #0
 8003f84:	4628      	mov	r0, r5
 8003f86:	bd38      	pop	{r3, r4, r5, pc}
 8003f88:	b118      	cbz	r0, 8003f92 <_fflush_r+0x1a>
 8003f8a:	6a03      	ldr	r3, [r0, #32]
 8003f8c:	b90b      	cbnz	r3, 8003f92 <_fflush_r+0x1a>
 8003f8e:	f7ff fc15 	bl	80037bc <__sinit>
 8003f92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d0f3      	beq.n	8003f82 <_fflush_r+0xa>
 8003f9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8003f9c:	07d0      	lsls	r0, r2, #31
 8003f9e:	d404      	bmi.n	8003faa <_fflush_r+0x32>
 8003fa0:	0599      	lsls	r1, r3, #22
 8003fa2:	d402      	bmi.n	8003faa <_fflush_r+0x32>
 8003fa4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fa6:	f7ff fe48 	bl	8003c3a <__retarget_lock_acquire_recursive>
 8003faa:	4628      	mov	r0, r5
 8003fac:	4621      	mov	r1, r4
 8003fae:	f7ff ff61 	bl	8003e74 <__sflush_r>
 8003fb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	07da      	lsls	r2, r3, #31
 8003fb8:	d4e4      	bmi.n	8003f84 <_fflush_r+0xc>
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	059b      	lsls	r3, r3, #22
 8003fbe:	d4e1      	bmi.n	8003f84 <_fflush_r+0xc>
 8003fc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003fc2:	f7ff fe3b 	bl	8003c3c <__retarget_lock_release_recursive>
 8003fc6:	e7dd      	b.n	8003f84 <_fflush_r+0xc>

08003fc8 <fiprintf>:
 8003fc8:	b40e      	push	{r1, r2, r3}
 8003fca:	b503      	push	{r0, r1, lr}
 8003fcc:	4601      	mov	r1, r0
 8003fce:	ab03      	add	r3, sp, #12
 8003fd0:	4805      	ldr	r0, [pc, #20]	; (8003fe8 <fiprintf+0x20>)
 8003fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8003fd6:	6800      	ldr	r0, [r0, #0]
 8003fd8:	9301      	str	r3, [sp, #4]
 8003fda:	f000 f8c9 	bl	8004170 <_vfiprintf_r>
 8003fde:	b002      	add	sp, #8
 8003fe0:	f85d eb04 	ldr.w	lr, [sp], #4
 8003fe4:	b003      	add	sp, #12
 8003fe6:	4770      	bx	lr
 8003fe8:	20000064 	.word	0x20000064

08003fec <__swhatbuf_r>:
 8003fec:	b570      	push	{r4, r5, r6, lr}
 8003fee:	460c      	mov	r4, r1
 8003ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ff4:	4615      	mov	r5, r2
 8003ff6:	2900      	cmp	r1, #0
 8003ff8:	461e      	mov	r6, r3
 8003ffa:	b096      	sub	sp, #88	; 0x58
 8003ffc:	da0c      	bge.n	8004018 <__swhatbuf_r+0x2c>
 8003ffe:	89a3      	ldrh	r3, [r4, #12]
 8004000:	2100      	movs	r1, #0
 8004002:	f013 0f80 	tst.w	r3, #128	; 0x80
 8004006:	bf0c      	ite	eq
 8004008:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800400c:	2340      	movne	r3, #64	; 0x40
 800400e:	2000      	movs	r0, #0
 8004010:	6031      	str	r1, [r6, #0]
 8004012:	602b      	str	r3, [r5, #0]
 8004014:	b016      	add	sp, #88	; 0x58
 8004016:	bd70      	pop	{r4, r5, r6, pc}
 8004018:	466a      	mov	r2, sp
 800401a:	f000 f849 	bl	80040b0 <_fstat_r>
 800401e:	2800      	cmp	r0, #0
 8004020:	dbed      	blt.n	8003ffe <__swhatbuf_r+0x12>
 8004022:	9901      	ldr	r1, [sp, #4]
 8004024:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8004028:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800402c:	4259      	negs	r1, r3
 800402e:	4159      	adcs	r1, r3
 8004030:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004034:	e7eb      	b.n	800400e <__swhatbuf_r+0x22>

08004036 <__smakebuf_r>:
 8004036:	898b      	ldrh	r3, [r1, #12]
 8004038:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800403a:	079d      	lsls	r5, r3, #30
 800403c:	4606      	mov	r6, r0
 800403e:	460c      	mov	r4, r1
 8004040:	d507      	bpl.n	8004052 <__smakebuf_r+0x1c>
 8004042:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004046:	6023      	str	r3, [r4, #0]
 8004048:	6123      	str	r3, [r4, #16]
 800404a:	2301      	movs	r3, #1
 800404c:	6163      	str	r3, [r4, #20]
 800404e:	b002      	add	sp, #8
 8004050:	bd70      	pop	{r4, r5, r6, pc}
 8004052:	466a      	mov	r2, sp
 8004054:	ab01      	add	r3, sp, #4
 8004056:	f7ff ffc9 	bl	8003fec <__swhatbuf_r>
 800405a:	9900      	ldr	r1, [sp, #0]
 800405c:	4605      	mov	r5, r0
 800405e:	4630      	mov	r0, r6
 8004060:	f7ff fe7c 	bl	8003d5c <_malloc_r>
 8004064:	b948      	cbnz	r0, 800407a <__smakebuf_r+0x44>
 8004066:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800406a:	059a      	lsls	r2, r3, #22
 800406c:	d4ef      	bmi.n	800404e <__smakebuf_r+0x18>
 800406e:	f023 0303 	bic.w	r3, r3, #3
 8004072:	f043 0302 	orr.w	r3, r3, #2
 8004076:	81a3      	strh	r3, [r4, #12]
 8004078:	e7e3      	b.n	8004042 <__smakebuf_r+0xc>
 800407a:	89a3      	ldrh	r3, [r4, #12]
 800407c:	6020      	str	r0, [r4, #0]
 800407e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004082:	81a3      	strh	r3, [r4, #12]
 8004084:	9b00      	ldr	r3, [sp, #0]
 8004086:	6120      	str	r0, [r4, #16]
 8004088:	6163      	str	r3, [r4, #20]
 800408a:	9b01      	ldr	r3, [sp, #4]
 800408c:	b15b      	cbz	r3, 80040a6 <__smakebuf_r+0x70>
 800408e:	4630      	mov	r0, r6
 8004090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004094:	f000 f81e 	bl	80040d4 <_isatty_r>
 8004098:	b128      	cbz	r0, 80040a6 <__smakebuf_r+0x70>
 800409a:	89a3      	ldrh	r3, [r4, #12]
 800409c:	f023 0303 	bic.w	r3, r3, #3
 80040a0:	f043 0301 	orr.w	r3, r3, #1
 80040a4:	81a3      	strh	r3, [r4, #12]
 80040a6:	89a3      	ldrh	r3, [r4, #12]
 80040a8:	431d      	orrs	r5, r3
 80040aa:	81a5      	strh	r5, [r4, #12]
 80040ac:	e7cf      	b.n	800404e <__smakebuf_r+0x18>
	...

080040b0 <_fstat_r>:
 80040b0:	b538      	push	{r3, r4, r5, lr}
 80040b2:	2300      	movs	r3, #0
 80040b4:	4d06      	ldr	r5, [pc, #24]	; (80040d0 <_fstat_r+0x20>)
 80040b6:	4604      	mov	r4, r0
 80040b8:	4608      	mov	r0, r1
 80040ba:	4611      	mov	r1, r2
 80040bc:	602b      	str	r3, [r5, #0]
 80040be:	f7fc fc90 	bl	80009e2 <_fstat>
 80040c2:	1c43      	adds	r3, r0, #1
 80040c4:	d102      	bne.n	80040cc <_fstat_r+0x1c>
 80040c6:	682b      	ldr	r3, [r5, #0]
 80040c8:	b103      	cbz	r3, 80040cc <_fstat_r+0x1c>
 80040ca:	6023      	str	r3, [r4, #0]
 80040cc:	bd38      	pop	{r3, r4, r5, pc}
 80040ce:	bf00      	nop
 80040d0:	20000330 	.word	0x20000330

080040d4 <_isatty_r>:
 80040d4:	b538      	push	{r3, r4, r5, lr}
 80040d6:	2300      	movs	r3, #0
 80040d8:	4d05      	ldr	r5, [pc, #20]	; (80040f0 <_isatty_r+0x1c>)
 80040da:	4604      	mov	r4, r0
 80040dc:	4608      	mov	r0, r1
 80040de:	602b      	str	r3, [r5, #0]
 80040e0:	f7fc fc8e 	bl	8000a00 <_isatty>
 80040e4:	1c43      	adds	r3, r0, #1
 80040e6:	d102      	bne.n	80040ee <_isatty_r+0x1a>
 80040e8:	682b      	ldr	r3, [r5, #0]
 80040ea:	b103      	cbz	r3, 80040ee <_isatty_r+0x1a>
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	bd38      	pop	{r3, r4, r5, pc}
 80040f0:	20000330 	.word	0x20000330

080040f4 <_sbrk_r>:
 80040f4:	b538      	push	{r3, r4, r5, lr}
 80040f6:	2300      	movs	r3, #0
 80040f8:	4d05      	ldr	r5, [pc, #20]	; (8004110 <_sbrk_r+0x1c>)
 80040fa:	4604      	mov	r4, r0
 80040fc:	4608      	mov	r0, r1
 80040fe:	602b      	str	r3, [r5, #0]
 8004100:	f7fc fc94 	bl	8000a2c <_sbrk>
 8004104:	1c43      	adds	r3, r0, #1
 8004106:	d102      	bne.n	800410e <_sbrk_r+0x1a>
 8004108:	682b      	ldr	r3, [r5, #0]
 800410a:	b103      	cbz	r3, 800410e <_sbrk_r+0x1a>
 800410c:	6023      	str	r3, [r4, #0]
 800410e:	bd38      	pop	{r3, r4, r5, pc}
 8004110:	20000330 	.word	0x20000330

08004114 <abort>:
 8004114:	2006      	movs	r0, #6
 8004116:	b508      	push	{r3, lr}
 8004118:	f000 fb00 	bl	800471c <raise>
 800411c:	2001      	movs	r0, #1
 800411e:	f7fc fc12 	bl	8000946 <_exit>

08004122 <__sfputc_r>:
 8004122:	6893      	ldr	r3, [r2, #8]
 8004124:	b410      	push	{r4}
 8004126:	3b01      	subs	r3, #1
 8004128:	2b00      	cmp	r3, #0
 800412a:	6093      	str	r3, [r2, #8]
 800412c:	da07      	bge.n	800413e <__sfputc_r+0x1c>
 800412e:	6994      	ldr	r4, [r2, #24]
 8004130:	42a3      	cmp	r3, r4
 8004132:	db01      	blt.n	8004138 <__sfputc_r+0x16>
 8004134:	290a      	cmp	r1, #10
 8004136:	d102      	bne.n	800413e <__sfputc_r+0x1c>
 8004138:	bc10      	pop	{r4}
 800413a:	f7ff bc14 	b.w	8003966 <__swbuf_r>
 800413e:	6813      	ldr	r3, [r2, #0]
 8004140:	1c58      	adds	r0, r3, #1
 8004142:	6010      	str	r0, [r2, #0]
 8004144:	7019      	strb	r1, [r3, #0]
 8004146:	4608      	mov	r0, r1
 8004148:	bc10      	pop	{r4}
 800414a:	4770      	bx	lr

0800414c <__sfputs_r>:
 800414c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800414e:	4606      	mov	r6, r0
 8004150:	460f      	mov	r7, r1
 8004152:	4614      	mov	r4, r2
 8004154:	18d5      	adds	r5, r2, r3
 8004156:	42ac      	cmp	r4, r5
 8004158:	d101      	bne.n	800415e <__sfputs_r+0x12>
 800415a:	2000      	movs	r0, #0
 800415c:	e007      	b.n	800416e <__sfputs_r+0x22>
 800415e:	463a      	mov	r2, r7
 8004160:	4630      	mov	r0, r6
 8004162:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004166:	f7ff ffdc 	bl	8004122 <__sfputc_r>
 800416a:	1c43      	adds	r3, r0, #1
 800416c:	d1f3      	bne.n	8004156 <__sfputs_r+0xa>
 800416e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004170 <_vfiprintf_r>:
 8004170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004174:	460d      	mov	r5, r1
 8004176:	4614      	mov	r4, r2
 8004178:	4698      	mov	r8, r3
 800417a:	4606      	mov	r6, r0
 800417c:	b09d      	sub	sp, #116	; 0x74
 800417e:	b118      	cbz	r0, 8004188 <_vfiprintf_r+0x18>
 8004180:	6a03      	ldr	r3, [r0, #32]
 8004182:	b90b      	cbnz	r3, 8004188 <_vfiprintf_r+0x18>
 8004184:	f7ff fb1a 	bl	80037bc <__sinit>
 8004188:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800418a:	07d9      	lsls	r1, r3, #31
 800418c:	d405      	bmi.n	800419a <_vfiprintf_r+0x2a>
 800418e:	89ab      	ldrh	r3, [r5, #12]
 8004190:	059a      	lsls	r2, r3, #22
 8004192:	d402      	bmi.n	800419a <_vfiprintf_r+0x2a>
 8004194:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004196:	f7ff fd50 	bl	8003c3a <__retarget_lock_acquire_recursive>
 800419a:	89ab      	ldrh	r3, [r5, #12]
 800419c:	071b      	lsls	r3, r3, #28
 800419e:	d501      	bpl.n	80041a4 <_vfiprintf_r+0x34>
 80041a0:	692b      	ldr	r3, [r5, #16]
 80041a2:	b99b      	cbnz	r3, 80041cc <_vfiprintf_r+0x5c>
 80041a4:	4629      	mov	r1, r5
 80041a6:	4630      	mov	r0, r6
 80041a8:	f7ff fc1a 	bl	80039e0 <__swsetup_r>
 80041ac:	b170      	cbz	r0, 80041cc <_vfiprintf_r+0x5c>
 80041ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041b0:	07dc      	lsls	r4, r3, #31
 80041b2:	d504      	bpl.n	80041be <_vfiprintf_r+0x4e>
 80041b4:	f04f 30ff 	mov.w	r0, #4294967295
 80041b8:	b01d      	add	sp, #116	; 0x74
 80041ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041be:	89ab      	ldrh	r3, [r5, #12]
 80041c0:	0598      	lsls	r0, r3, #22
 80041c2:	d4f7      	bmi.n	80041b4 <_vfiprintf_r+0x44>
 80041c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041c6:	f7ff fd39 	bl	8003c3c <__retarget_lock_release_recursive>
 80041ca:	e7f3      	b.n	80041b4 <_vfiprintf_r+0x44>
 80041cc:	2300      	movs	r3, #0
 80041ce:	9309      	str	r3, [sp, #36]	; 0x24
 80041d0:	2320      	movs	r3, #32
 80041d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041d6:	2330      	movs	r3, #48	; 0x30
 80041d8:	f04f 0901 	mov.w	r9, #1
 80041dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80041e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8004390 <_vfiprintf_r+0x220>
 80041e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e8:	4623      	mov	r3, r4
 80041ea:	469a      	mov	sl, r3
 80041ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80041f0:	b10a      	cbz	r2, 80041f6 <_vfiprintf_r+0x86>
 80041f2:	2a25      	cmp	r2, #37	; 0x25
 80041f4:	d1f9      	bne.n	80041ea <_vfiprintf_r+0x7a>
 80041f6:	ebba 0b04 	subs.w	fp, sl, r4
 80041fa:	d00b      	beq.n	8004214 <_vfiprintf_r+0xa4>
 80041fc:	465b      	mov	r3, fp
 80041fe:	4622      	mov	r2, r4
 8004200:	4629      	mov	r1, r5
 8004202:	4630      	mov	r0, r6
 8004204:	f7ff ffa2 	bl	800414c <__sfputs_r>
 8004208:	3001      	adds	r0, #1
 800420a:	f000 80a9 	beq.w	8004360 <_vfiprintf_r+0x1f0>
 800420e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004210:	445a      	add	r2, fp
 8004212:	9209      	str	r2, [sp, #36]	; 0x24
 8004214:	f89a 3000 	ldrb.w	r3, [sl]
 8004218:	2b00      	cmp	r3, #0
 800421a:	f000 80a1 	beq.w	8004360 <_vfiprintf_r+0x1f0>
 800421e:	2300      	movs	r3, #0
 8004220:	f04f 32ff 	mov.w	r2, #4294967295
 8004224:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004228:	f10a 0a01 	add.w	sl, sl, #1
 800422c:	9304      	str	r3, [sp, #16]
 800422e:	9307      	str	r3, [sp, #28]
 8004230:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004234:	931a      	str	r3, [sp, #104]	; 0x68
 8004236:	4654      	mov	r4, sl
 8004238:	2205      	movs	r2, #5
 800423a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800423e:	4854      	ldr	r0, [pc, #336]	; (8004390 <_vfiprintf_r+0x220>)
 8004240:	f000 fa88 	bl	8004754 <memchr>
 8004244:	9a04      	ldr	r2, [sp, #16]
 8004246:	b9d8      	cbnz	r0, 8004280 <_vfiprintf_r+0x110>
 8004248:	06d1      	lsls	r1, r2, #27
 800424a:	bf44      	itt	mi
 800424c:	2320      	movmi	r3, #32
 800424e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004252:	0713      	lsls	r3, r2, #28
 8004254:	bf44      	itt	mi
 8004256:	232b      	movmi	r3, #43	; 0x2b
 8004258:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800425c:	f89a 3000 	ldrb.w	r3, [sl]
 8004260:	2b2a      	cmp	r3, #42	; 0x2a
 8004262:	d015      	beq.n	8004290 <_vfiprintf_r+0x120>
 8004264:	4654      	mov	r4, sl
 8004266:	2000      	movs	r0, #0
 8004268:	f04f 0c0a 	mov.w	ip, #10
 800426c:	9a07      	ldr	r2, [sp, #28]
 800426e:	4621      	mov	r1, r4
 8004270:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004274:	3b30      	subs	r3, #48	; 0x30
 8004276:	2b09      	cmp	r3, #9
 8004278:	d94d      	bls.n	8004316 <_vfiprintf_r+0x1a6>
 800427a:	b1b0      	cbz	r0, 80042aa <_vfiprintf_r+0x13a>
 800427c:	9207      	str	r2, [sp, #28]
 800427e:	e014      	b.n	80042aa <_vfiprintf_r+0x13a>
 8004280:	eba0 0308 	sub.w	r3, r0, r8
 8004284:	fa09 f303 	lsl.w	r3, r9, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	46a2      	mov	sl, r4
 800428c:	9304      	str	r3, [sp, #16]
 800428e:	e7d2      	b.n	8004236 <_vfiprintf_r+0xc6>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	1d19      	adds	r1, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9103      	str	r1, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfbb      	ittet	lt
 800429c:	425b      	neglt	r3, r3
 800429e:	f042 0202 	orrlt.w	r2, r2, #2
 80042a2:	9307      	strge	r3, [sp, #28]
 80042a4:	9307      	strlt	r3, [sp, #28]
 80042a6:	bfb8      	it	lt
 80042a8:	9204      	strlt	r2, [sp, #16]
 80042aa:	7823      	ldrb	r3, [r4, #0]
 80042ac:	2b2e      	cmp	r3, #46	; 0x2e
 80042ae:	d10c      	bne.n	80042ca <_vfiprintf_r+0x15a>
 80042b0:	7863      	ldrb	r3, [r4, #1]
 80042b2:	2b2a      	cmp	r3, #42	; 0x2a
 80042b4:	d134      	bne.n	8004320 <_vfiprintf_r+0x1b0>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	3402      	adds	r4, #2
 80042ba:	1d1a      	adds	r2, r3, #4
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	9203      	str	r2, [sp, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	bfb8      	it	lt
 80042c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80042c8:	9305      	str	r3, [sp, #20]
 80042ca:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004394 <_vfiprintf_r+0x224>
 80042ce:	2203      	movs	r2, #3
 80042d0:	4650      	mov	r0, sl
 80042d2:	7821      	ldrb	r1, [r4, #0]
 80042d4:	f000 fa3e 	bl	8004754 <memchr>
 80042d8:	b138      	cbz	r0, 80042ea <_vfiprintf_r+0x17a>
 80042da:	2240      	movs	r2, #64	; 0x40
 80042dc:	9b04      	ldr	r3, [sp, #16]
 80042de:	eba0 000a 	sub.w	r0, r0, sl
 80042e2:	4082      	lsls	r2, r0
 80042e4:	4313      	orrs	r3, r2
 80042e6:	3401      	adds	r4, #1
 80042e8:	9304      	str	r3, [sp, #16]
 80042ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80042ee:	2206      	movs	r2, #6
 80042f0:	4829      	ldr	r0, [pc, #164]	; (8004398 <_vfiprintf_r+0x228>)
 80042f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042f6:	f000 fa2d 	bl	8004754 <memchr>
 80042fa:	2800      	cmp	r0, #0
 80042fc:	d03f      	beq.n	800437e <_vfiprintf_r+0x20e>
 80042fe:	4b27      	ldr	r3, [pc, #156]	; (800439c <_vfiprintf_r+0x22c>)
 8004300:	bb1b      	cbnz	r3, 800434a <_vfiprintf_r+0x1da>
 8004302:	9b03      	ldr	r3, [sp, #12]
 8004304:	3307      	adds	r3, #7
 8004306:	f023 0307 	bic.w	r3, r3, #7
 800430a:	3308      	adds	r3, #8
 800430c:	9303      	str	r3, [sp, #12]
 800430e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004310:	443b      	add	r3, r7
 8004312:	9309      	str	r3, [sp, #36]	; 0x24
 8004314:	e768      	b.n	80041e8 <_vfiprintf_r+0x78>
 8004316:	460c      	mov	r4, r1
 8004318:	2001      	movs	r0, #1
 800431a:	fb0c 3202 	mla	r2, ip, r2, r3
 800431e:	e7a6      	b.n	800426e <_vfiprintf_r+0xfe>
 8004320:	2300      	movs	r3, #0
 8004322:	f04f 0c0a 	mov.w	ip, #10
 8004326:	4619      	mov	r1, r3
 8004328:	3401      	adds	r4, #1
 800432a:	9305      	str	r3, [sp, #20]
 800432c:	4620      	mov	r0, r4
 800432e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004332:	3a30      	subs	r2, #48	; 0x30
 8004334:	2a09      	cmp	r2, #9
 8004336:	d903      	bls.n	8004340 <_vfiprintf_r+0x1d0>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d0c6      	beq.n	80042ca <_vfiprintf_r+0x15a>
 800433c:	9105      	str	r1, [sp, #20]
 800433e:	e7c4      	b.n	80042ca <_vfiprintf_r+0x15a>
 8004340:	4604      	mov	r4, r0
 8004342:	2301      	movs	r3, #1
 8004344:	fb0c 2101 	mla	r1, ip, r1, r2
 8004348:	e7f0      	b.n	800432c <_vfiprintf_r+0x1bc>
 800434a:	ab03      	add	r3, sp, #12
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	462a      	mov	r2, r5
 8004350:	4630      	mov	r0, r6
 8004352:	4b13      	ldr	r3, [pc, #76]	; (80043a0 <_vfiprintf_r+0x230>)
 8004354:	a904      	add	r1, sp, #16
 8004356:	f3af 8000 	nop.w
 800435a:	4607      	mov	r7, r0
 800435c:	1c78      	adds	r0, r7, #1
 800435e:	d1d6      	bne.n	800430e <_vfiprintf_r+0x19e>
 8004360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004362:	07d9      	lsls	r1, r3, #31
 8004364:	d405      	bmi.n	8004372 <_vfiprintf_r+0x202>
 8004366:	89ab      	ldrh	r3, [r5, #12]
 8004368:	059a      	lsls	r2, r3, #22
 800436a:	d402      	bmi.n	8004372 <_vfiprintf_r+0x202>
 800436c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800436e:	f7ff fc65 	bl	8003c3c <__retarget_lock_release_recursive>
 8004372:	89ab      	ldrh	r3, [r5, #12]
 8004374:	065b      	lsls	r3, r3, #25
 8004376:	f53f af1d 	bmi.w	80041b4 <_vfiprintf_r+0x44>
 800437a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800437c:	e71c      	b.n	80041b8 <_vfiprintf_r+0x48>
 800437e:	ab03      	add	r3, sp, #12
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	462a      	mov	r2, r5
 8004384:	4630      	mov	r0, r6
 8004386:	4b06      	ldr	r3, [pc, #24]	; (80043a0 <_vfiprintf_r+0x230>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	f000 f87d 	bl	8004488 <_printf_i>
 800438e:	e7e4      	b.n	800435a <_vfiprintf_r+0x1ea>
 8004390:	08004988 	.word	0x08004988
 8004394:	0800498e 	.word	0x0800498e
 8004398:	08004992 	.word	0x08004992
 800439c:	00000000 	.word	0x00000000
 80043a0:	0800414d 	.word	0x0800414d

080043a4 <_printf_common>:
 80043a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043a8:	4616      	mov	r6, r2
 80043aa:	4699      	mov	r9, r3
 80043ac:	688a      	ldr	r2, [r1, #8]
 80043ae:	690b      	ldr	r3, [r1, #16]
 80043b0:	4607      	mov	r7, r0
 80043b2:	4293      	cmp	r3, r2
 80043b4:	bfb8      	it	lt
 80043b6:	4613      	movlt	r3, r2
 80043b8:	6033      	str	r3, [r6, #0]
 80043ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043be:	460c      	mov	r4, r1
 80043c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043c4:	b10a      	cbz	r2, 80043ca <_printf_common+0x26>
 80043c6:	3301      	adds	r3, #1
 80043c8:	6033      	str	r3, [r6, #0]
 80043ca:	6823      	ldr	r3, [r4, #0]
 80043cc:	0699      	lsls	r1, r3, #26
 80043ce:	bf42      	ittt	mi
 80043d0:	6833      	ldrmi	r3, [r6, #0]
 80043d2:	3302      	addmi	r3, #2
 80043d4:	6033      	strmi	r3, [r6, #0]
 80043d6:	6825      	ldr	r5, [r4, #0]
 80043d8:	f015 0506 	ands.w	r5, r5, #6
 80043dc:	d106      	bne.n	80043ec <_printf_common+0x48>
 80043de:	f104 0a19 	add.w	sl, r4, #25
 80043e2:	68e3      	ldr	r3, [r4, #12]
 80043e4:	6832      	ldr	r2, [r6, #0]
 80043e6:	1a9b      	subs	r3, r3, r2
 80043e8:	42ab      	cmp	r3, r5
 80043ea:	dc2b      	bgt.n	8004444 <_printf_common+0xa0>
 80043ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80043f0:	1e13      	subs	r3, r2, #0
 80043f2:	6822      	ldr	r2, [r4, #0]
 80043f4:	bf18      	it	ne
 80043f6:	2301      	movne	r3, #1
 80043f8:	0692      	lsls	r2, r2, #26
 80043fa:	d430      	bmi.n	800445e <_printf_common+0xba>
 80043fc:	4649      	mov	r1, r9
 80043fe:	4638      	mov	r0, r7
 8004400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004404:	47c0      	blx	r8
 8004406:	3001      	adds	r0, #1
 8004408:	d023      	beq.n	8004452 <_printf_common+0xae>
 800440a:	6823      	ldr	r3, [r4, #0]
 800440c:	6922      	ldr	r2, [r4, #16]
 800440e:	f003 0306 	and.w	r3, r3, #6
 8004412:	2b04      	cmp	r3, #4
 8004414:	bf14      	ite	ne
 8004416:	2500      	movne	r5, #0
 8004418:	6833      	ldreq	r3, [r6, #0]
 800441a:	f04f 0600 	mov.w	r6, #0
 800441e:	bf08      	it	eq
 8004420:	68e5      	ldreq	r5, [r4, #12]
 8004422:	f104 041a 	add.w	r4, r4, #26
 8004426:	bf08      	it	eq
 8004428:	1aed      	subeq	r5, r5, r3
 800442a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800442e:	bf08      	it	eq
 8004430:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004434:	4293      	cmp	r3, r2
 8004436:	bfc4      	itt	gt
 8004438:	1a9b      	subgt	r3, r3, r2
 800443a:	18ed      	addgt	r5, r5, r3
 800443c:	42b5      	cmp	r5, r6
 800443e:	d11a      	bne.n	8004476 <_printf_common+0xd2>
 8004440:	2000      	movs	r0, #0
 8004442:	e008      	b.n	8004456 <_printf_common+0xb2>
 8004444:	2301      	movs	r3, #1
 8004446:	4652      	mov	r2, sl
 8004448:	4649      	mov	r1, r9
 800444a:	4638      	mov	r0, r7
 800444c:	47c0      	blx	r8
 800444e:	3001      	adds	r0, #1
 8004450:	d103      	bne.n	800445a <_printf_common+0xb6>
 8004452:	f04f 30ff 	mov.w	r0, #4294967295
 8004456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800445a:	3501      	adds	r5, #1
 800445c:	e7c1      	b.n	80043e2 <_printf_common+0x3e>
 800445e:	2030      	movs	r0, #48	; 0x30
 8004460:	18e1      	adds	r1, r4, r3
 8004462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800446c:	4422      	add	r2, r4
 800446e:	3302      	adds	r3, #2
 8004470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004474:	e7c2      	b.n	80043fc <_printf_common+0x58>
 8004476:	2301      	movs	r3, #1
 8004478:	4622      	mov	r2, r4
 800447a:	4649      	mov	r1, r9
 800447c:	4638      	mov	r0, r7
 800447e:	47c0      	blx	r8
 8004480:	3001      	adds	r0, #1
 8004482:	d0e6      	beq.n	8004452 <_printf_common+0xae>
 8004484:	3601      	adds	r6, #1
 8004486:	e7d9      	b.n	800443c <_printf_common+0x98>

08004488 <_printf_i>:
 8004488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800448c:	7e0f      	ldrb	r7, [r1, #24]
 800448e:	4691      	mov	r9, r2
 8004490:	2f78      	cmp	r7, #120	; 0x78
 8004492:	4680      	mov	r8, r0
 8004494:	460c      	mov	r4, r1
 8004496:	469a      	mov	sl, r3
 8004498:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800449a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800449e:	d807      	bhi.n	80044b0 <_printf_i+0x28>
 80044a0:	2f62      	cmp	r7, #98	; 0x62
 80044a2:	d80a      	bhi.n	80044ba <_printf_i+0x32>
 80044a4:	2f00      	cmp	r7, #0
 80044a6:	f000 80d5 	beq.w	8004654 <_printf_i+0x1cc>
 80044aa:	2f58      	cmp	r7, #88	; 0x58
 80044ac:	f000 80c1 	beq.w	8004632 <_printf_i+0x1aa>
 80044b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044b8:	e03a      	b.n	8004530 <_printf_i+0xa8>
 80044ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044be:	2b15      	cmp	r3, #21
 80044c0:	d8f6      	bhi.n	80044b0 <_printf_i+0x28>
 80044c2:	a101      	add	r1, pc, #4	; (adr r1, 80044c8 <_printf_i+0x40>)
 80044c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044c8:	08004521 	.word	0x08004521
 80044cc:	08004535 	.word	0x08004535
 80044d0:	080044b1 	.word	0x080044b1
 80044d4:	080044b1 	.word	0x080044b1
 80044d8:	080044b1 	.word	0x080044b1
 80044dc:	080044b1 	.word	0x080044b1
 80044e0:	08004535 	.word	0x08004535
 80044e4:	080044b1 	.word	0x080044b1
 80044e8:	080044b1 	.word	0x080044b1
 80044ec:	080044b1 	.word	0x080044b1
 80044f0:	080044b1 	.word	0x080044b1
 80044f4:	0800463b 	.word	0x0800463b
 80044f8:	08004561 	.word	0x08004561
 80044fc:	080045f5 	.word	0x080045f5
 8004500:	080044b1 	.word	0x080044b1
 8004504:	080044b1 	.word	0x080044b1
 8004508:	0800465d 	.word	0x0800465d
 800450c:	080044b1 	.word	0x080044b1
 8004510:	08004561 	.word	0x08004561
 8004514:	080044b1 	.word	0x080044b1
 8004518:	080044b1 	.word	0x080044b1
 800451c:	080045fd 	.word	0x080045fd
 8004520:	682b      	ldr	r3, [r5, #0]
 8004522:	1d1a      	adds	r2, r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	602a      	str	r2, [r5, #0]
 8004528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800452c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004530:	2301      	movs	r3, #1
 8004532:	e0a0      	b.n	8004676 <_printf_i+0x1ee>
 8004534:	6820      	ldr	r0, [r4, #0]
 8004536:	682b      	ldr	r3, [r5, #0]
 8004538:	0607      	lsls	r7, r0, #24
 800453a:	f103 0104 	add.w	r1, r3, #4
 800453e:	6029      	str	r1, [r5, #0]
 8004540:	d501      	bpl.n	8004546 <_printf_i+0xbe>
 8004542:	681e      	ldr	r6, [r3, #0]
 8004544:	e003      	b.n	800454e <_printf_i+0xc6>
 8004546:	0646      	lsls	r6, r0, #25
 8004548:	d5fb      	bpl.n	8004542 <_printf_i+0xba>
 800454a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800454e:	2e00      	cmp	r6, #0
 8004550:	da03      	bge.n	800455a <_printf_i+0xd2>
 8004552:	232d      	movs	r3, #45	; 0x2d
 8004554:	4276      	negs	r6, r6
 8004556:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800455a:	230a      	movs	r3, #10
 800455c:	4859      	ldr	r0, [pc, #356]	; (80046c4 <_printf_i+0x23c>)
 800455e:	e012      	b.n	8004586 <_printf_i+0xfe>
 8004560:	682b      	ldr	r3, [r5, #0]
 8004562:	6820      	ldr	r0, [r4, #0]
 8004564:	1d19      	adds	r1, r3, #4
 8004566:	6029      	str	r1, [r5, #0]
 8004568:	0605      	lsls	r5, r0, #24
 800456a:	d501      	bpl.n	8004570 <_printf_i+0xe8>
 800456c:	681e      	ldr	r6, [r3, #0]
 800456e:	e002      	b.n	8004576 <_printf_i+0xee>
 8004570:	0641      	lsls	r1, r0, #25
 8004572:	d5fb      	bpl.n	800456c <_printf_i+0xe4>
 8004574:	881e      	ldrh	r6, [r3, #0]
 8004576:	2f6f      	cmp	r7, #111	; 0x6f
 8004578:	bf0c      	ite	eq
 800457a:	2308      	moveq	r3, #8
 800457c:	230a      	movne	r3, #10
 800457e:	4851      	ldr	r0, [pc, #324]	; (80046c4 <_printf_i+0x23c>)
 8004580:	2100      	movs	r1, #0
 8004582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004586:	6865      	ldr	r5, [r4, #4]
 8004588:	2d00      	cmp	r5, #0
 800458a:	bfa8      	it	ge
 800458c:	6821      	ldrge	r1, [r4, #0]
 800458e:	60a5      	str	r5, [r4, #8]
 8004590:	bfa4      	itt	ge
 8004592:	f021 0104 	bicge.w	r1, r1, #4
 8004596:	6021      	strge	r1, [r4, #0]
 8004598:	b90e      	cbnz	r6, 800459e <_printf_i+0x116>
 800459a:	2d00      	cmp	r5, #0
 800459c:	d04b      	beq.n	8004636 <_printf_i+0x1ae>
 800459e:	4615      	mov	r5, r2
 80045a0:	fbb6 f1f3 	udiv	r1, r6, r3
 80045a4:	fb03 6711 	mls	r7, r3, r1, r6
 80045a8:	5dc7      	ldrb	r7, [r0, r7]
 80045aa:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ae:	4637      	mov	r7, r6
 80045b0:	42bb      	cmp	r3, r7
 80045b2:	460e      	mov	r6, r1
 80045b4:	d9f4      	bls.n	80045a0 <_printf_i+0x118>
 80045b6:	2b08      	cmp	r3, #8
 80045b8:	d10b      	bne.n	80045d2 <_printf_i+0x14a>
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	07de      	lsls	r6, r3, #31
 80045be:	d508      	bpl.n	80045d2 <_printf_i+0x14a>
 80045c0:	6923      	ldr	r3, [r4, #16]
 80045c2:	6861      	ldr	r1, [r4, #4]
 80045c4:	4299      	cmp	r1, r3
 80045c6:	bfde      	ittt	le
 80045c8:	2330      	movle	r3, #48	; 0x30
 80045ca:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045ce:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045d2:	1b52      	subs	r2, r2, r5
 80045d4:	6122      	str	r2, [r4, #16]
 80045d6:	464b      	mov	r3, r9
 80045d8:	4621      	mov	r1, r4
 80045da:	4640      	mov	r0, r8
 80045dc:	f8cd a000 	str.w	sl, [sp]
 80045e0:	aa03      	add	r2, sp, #12
 80045e2:	f7ff fedf 	bl	80043a4 <_printf_common>
 80045e6:	3001      	adds	r0, #1
 80045e8:	d14a      	bne.n	8004680 <_printf_i+0x1f8>
 80045ea:	f04f 30ff 	mov.w	r0, #4294967295
 80045ee:	b004      	add	sp, #16
 80045f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045f4:	6823      	ldr	r3, [r4, #0]
 80045f6:	f043 0320 	orr.w	r3, r3, #32
 80045fa:	6023      	str	r3, [r4, #0]
 80045fc:	2778      	movs	r7, #120	; 0x78
 80045fe:	4832      	ldr	r0, [pc, #200]	; (80046c8 <_printf_i+0x240>)
 8004600:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004604:	6823      	ldr	r3, [r4, #0]
 8004606:	6829      	ldr	r1, [r5, #0]
 8004608:	061f      	lsls	r7, r3, #24
 800460a:	f851 6b04 	ldr.w	r6, [r1], #4
 800460e:	d402      	bmi.n	8004616 <_printf_i+0x18e>
 8004610:	065f      	lsls	r7, r3, #25
 8004612:	bf48      	it	mi
 8004614:	b2b6      	uxthmi	r6, r6
 8004616:	07df      	lsls	r7, r3, #31
 8004618:	bf48      	it	mi
 800461a:	f043 0320 	orrmi.w	r3, r3, #32
 800461e:	6029      	str	r1, [r5, #0]
 8004620:	bf48      	it	mi
 8004622:	6023      	strmi	r3, [r4, #0]
 8004624:	b91e      	cbnz	r6, 800462e <_printf_i+0x1a6>
 8004626:	6823      	ldr	r3, [r4, #0]
 8004628:	f023 0320 	bic.w	r3, r3, #32
 800462c:	6023      	str	r3, [r4, #0]
 800462e:	2310      	movs	r3, #16
 8004630:	e7a6      	b.n	8004580 <_printf_i+0xf8>
 8004632:	4824      	ldr	r0, [pc, #144]	; (80046c4 <_printf_i+0x23c>)
 8004634:	e7e4      	b.n	8004600 <_printf_i+0x178>
 8004636:	4615      	mov	r5, r2
 8004638:	e7bd      	b.n	80045b6 <_printf_i+0x12e>
 800463a:	682b      	ldr	r3, [r5, #0]
 800463c:	6826      	ldr	r6, [r4, #0]
 800463e:	1d18      	adds	r0, r3, #4
 8004640:	6961      	ldr	r1, [r4, #20]
 8004642:	6028      	str	r0, [r5, #0]
 8004644:	0635      	lsls	r5, r6, #24
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	d501      	bpl.n	800464e <_printf_i+0x1c6>
 800464a:	6019      	str	r1, [r3, #0]
 800464c:	e002      	b.n	8004654 <_printf_i+0x1cc>
 800464e:	0670      	lsls	r0, r6, #25
 8004650:	d5fb      	bpl.n	800464a <_printf_i+0x1c2>
 8004652:	8019      	strh	r1, [r3, #0]
 8004654:	2300      	movs	r3, #0
 8004656:	4615      	mov	r5, r2
 8004658:	6123      	str	r3, [r4, #16]
 800465a:	e7bc      	b.n	80045d6 <_printf_i+0x14e>
 800465c:	682b      	ldr	r3, [r5, #0]
 800465e:	2100      	movs	r1, #0
 8004660:	1d1a      	adds	r2, r3, #4
 8004662:	602a      	str	r2, [r5, #0]
 8004664:	681d      	ldr	r5, [r3, #0]
 8004666:	6862      	ldr	r2, [r4, #4]
 8004668:	4628      	mov	r0, r5
 800466a:	f000 f873 	bl	8004754 <memchr>
 800466e:	b108      	cbz	r0, 8004674 <_printf_i+0x1ec>
 8004670:	1b40      	subs	r0, r0, r5
 8004672:	6060      	str	r0, [r4, #4]
 8004674:	6863      	ldr	r3, [r4, #4]
 8004676:	6123      	str	r3, [r4, #16]
 8004678:	2300      	movs	r3, #0
 800467a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800467e:	e7aa      	b.n	80045d6 <_printf_i+0x14e>
 8004680:	462a      	mov	r2, r5
 8004682:	4649      	mov	r1, r9
 8004684:	4640      	mov	r0, r8
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	47d0      	blx	sl
 800468a:	3001      	adds	r0, #1
 800468c:	d0ad      	beq.n	80045ea <_printf_i+0x162>
 800468e:	6823      	ldr	r3, [r4, #0]
 8004690:	079b      	lsls	r3, r3, #30
 8004692:	d413      	bmi.n	80046bc <_printf_i+0x234>
 8004694:	68e0      	ldr	r0, [r4, #12]
 8004696:	9b03      	ldr	r3, [sp, #12]
 8004698:	4298      	cmp	r0, r3
 800469a:	bfb8      	it	lt
 800469c:	4618      	movlt	r0, r3
 800469e:	e7a6      	b.n	80045ee <_printf_i+0x166>
 80046a0:	2301      	movs	r3, #1
 80046a2:	4632      	mov	r2, r6
 80046a4:	4649      	mov	r1, r9
 80046a6:	4640      	mov	r0, r8
 80046a8:	47d0      	blx	sl
 80046aa:	3001      	adds	r0, #1
 80046ac:	d09d      	beq.n	80045ea <_printf_i+0x162>
 80046ae:	3501      	adds	r5, #1
 80046b0:	68e3      	ldr	r3, [r4, #12]
 80046b2:	9903      	ldr	r1, [sp, #12]
 80046b4:	1a5b      	subs	r3, r3, r1
 80046b6:	42ab      	cmp	r3, r5
 80046b8:	dcf2      	bgt.n	80046a0 <_printf_i+0x218>
 80046ba:	e7eb      	b.n	8004694 <_printf_i+0x20c>
 80046bc:	2500      	movs	r5, #0
 80046be:	f104 0619 	add.w	r6, r4, #25
 80046c2:	e7f5      	b.n	80046b0 <_printf_i+0x228>
 80046c4:	08004999 	.word	0x08004999
 80046c8:	080049aa 	.word	0x080049aa

080046cc <_raise_r>:
 80046cc:	291f      	cmp	r1, #31
 80046ce:	b538      	push	{r3, r4, r5, lr}
 80046d0:	4604      	mov	r4, r0
 80046d2:	460d      	mov	r5, r1
 80046d4:	d904      	bls.n	80046e0 <_raise_r+0x14>
 80046d6:	2316      	movs	r3, #22
 80046d8:	6003      	str	r3, [r0, #0]
 80046da:	f04f 30ff 	mov.w	r0, #4294967295
 80046de:	bd38      	pop	{r3, r4, r5, pc}
 80046e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80046e2:	b112      	cbz	r2, 80046ea <_raise_r+0x1e>
 80046e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80046e8:	b94b      	cbnz	r3, 80046fe <_raise_r+0x32>
 80046ea:	4620      	mov	r0, r4
 80046ec:	f000 f830 	bl	8004750 <_getpid_r>
 80046f0:	462a      	mov	r2, r5
 80046f2:	4601      	mov	r1, r0
 80046f4:	4620      	mov	r0, r4
 80046f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046fa:	f000 b817 	b.w	800472c <_kill_r>
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d00a      	beq.n	8004718 <_raise_r+0x4c>
 8004702:	1c59      	adds	r1, r3, #1
 8004704:	d103      	bne.n	800470e <_raise_r+0x42>
 8004706:	2316      	movs	r3, #22
 8004708:	6003      	str	r3, [r0, #0]
 800470a:	2001      	movs	r0, #1
 800470c:	e7e7      	b.n	80046de <_raise_r+0x12>
 800470e:	2400      	movs	r4, #0
 8004710:	4628      	mov	r0, r5
 8004712:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004716:	4798      	blx	r3
 8004718:	2000      	movs	r0, #0
 800471a:	e7e0      	b.n	80046de <_raise_r+0x12>

0800471c <raise>:
 800471c:	4b02      	ldr	r3, [pc, #8]	; (8004728 <raise+0xc>)
 800471e:	4601      	mov	r1, r0
 8004720:	6818      	ldr	r0, [r3, #0]
 8004722:	f7ff bfd3 	b.w	80046cc <_raise_r>
 8004726:	bf00      	nop
 8004728:	20000064 	.word	0x20000064

0800472c <_kill_r>:
 800472c:	b538      	push	{r3, r4, r5, lr}
 800472e:	2300      	movs	r3, #0
 8004730:	4d06      	ldr	r5, [pc, #24]	; (800474c <_kill_r+0x20>)
 8004732:	4604      	mov	r4, r0
 8004734:	4608      	mov	r0, r1
 8004736:	4611      	mov	r1, r2
 8004738:	602b      	str	r3, [r5, #0]
 800473a:	f7fc f8f4 	bl	8000926 <_kill>
 800473e:	1c43      	adds	r3, r0, #1
 8004740:	d102      	bne.n	8004748 <_kill_r+0x1c>
 8004742:	682b      	ldr	r3, [r5, #0]
 8004744:	b103      	cbz	r3, 8004748 <_kill_r+0x1c>
 8004746:	6023      	str	r3, [r4, #0]
 8004748:	bd38      	pop	{r3, r4, r5, pc}
 800474a:	bf00      	nop
 800474c:	20000330 	.word	0x20000330

08004750 <_getpid_r>:
 8004750:	f7fc b8e2 	b.w	8000918 <_getpid>

08004754 <memchr>:
 8004754:	4603      	mov	r3, r0
 8004756:	b510      	push	{r4, lr}
 8004758:	b2c9      	uxtb	r1, r1
 800475a:	4402      	add	r2, r0
 800475c:	4293      	cmp	r3, r2
 800475e:	4618      	mov	r0, r3
 8004760:	d101      	bne.n	8004766 <memchr+0x12>
 8004762:	2000      	movs	r0, #0
 8004764:	e003      	b.n	800476e <memchr+0x1a>
 8004766:	7804      	ldrb	r4, [r0, #0]
 8004768:	3301      	adds	r3, #1
 800476a:	428c      	cmp	r4, r1
 800476c:	d1f6      	bne.n	800475c <memchr+0x8>
 800476e:	bd10      	pop	{r4, pc}

08004770 <_init>:
 8004770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004772:	bf00      	nop
 8004774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004776:	bc08      	pop	{r3}
 8004778:	469e      	mov	lr, r3
 800477a:	4770      	bx	lr

0800477c <_fini>:
 800477c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800477e:	bf00      	nop
 8004780:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004782:	bc08      	pop	{r3}
 8004784:	469e      	mov	lr, r3
 8004786:	4770      	bx	lr
