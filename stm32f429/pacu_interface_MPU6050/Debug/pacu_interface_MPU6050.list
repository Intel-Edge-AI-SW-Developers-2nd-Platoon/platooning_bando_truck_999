
pacu_interface_MPU6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005808  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080059b4  080059b4  000159b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059cc  080059cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059d4  080059d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059d4  080059d4  000159d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d8  080059d8  000159d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080059dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000007d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200007dc  200007dc  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001234c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000023a3  00000000  00000000  000323cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000eb0  00000000  00000000  00034770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b82  00000000  00000000  00035620  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000246de  00000000  00000000  000361a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000114b7  00000000  00000000  0005a880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dc7c3  00000000  00000000  0006bd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003ef4  00000000  00000000  001484fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0014c3f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800599c 	.word	0x0800599c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	0800599c 	.word	0x0800599c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 fc86 	bl	8000dfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f80c 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f95a 	bl	80007ac <MX_GPIO_Init>
  MX_ETH_Init();
 80004f8:	f000 f872 	bl	80005e0 <MX_ETH_Init>
  MX_I2C1_Init();
 80004fc:	f000 f8be 	bl	800067c <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8000500:	f000 f8fc 	bl	80006fc <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000504:	f000 f924 	bl	8000750 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000508:	e7fe      	b.n	8000508 <main+0x20>
	...

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b094      	sub	sp, #80	; 0x50
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0320 	add.w	r3, r7, #32
 8000516:	2230      	movs	r2, #48	; 0x30
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f005 fa11 	bl	8005942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	f107 030c 	add.w	r3, r7, #12
 8000524:	2200      	movs	r2, #0
 8000526:	601a      	str	r2, [r3, #0]
 8000528:	605a      	str	r2, [r3, #4]
 800052a:	609a      	str	r2, [r3, #8]
 800052c:	60da      	str	r2, [r3, #12]
 800052e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	4b28      	ldr	r3, [pc, #160]	; (80005d8 <SystemClock_Config+0xcc>)
 8000536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000538:	4a27      	ldr	r2, [pc, #156]	; (80005d8 <SystemClock_Config+0xcc>)
 800053a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800053e:	6413      	str	r3, [r2, #64]	; 0x40
 8000540:	4b25      	ldr	r3, [pc, #148]	; (80005d8 <SystemClock_Config+0xcc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000548:	60bb      	str	r3, [r7, #8]
 800054a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800054c:	2300      	movs	r3, #0
 800054e:	607b      	str	r3, [r7, #4]
 8000550:	4b22      	ldr	r3, [pc, #136]	; (80005dc <SystemClock_Config+0xd0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a21      	ldr	r2, [pc, #132]	; (80005dc <SystemClock_Config+0xd0>)
 8000556:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1f      	ldr	r3, [pc, #124]	; (80005dc <SystemClock_Config+0xd0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000568:	2301      	movs	r3, #1
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800056c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000570:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000572:	2302      	movs	r3, #2
 8000574:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000576:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800057a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800057c:	2304      	movs	r3, #4
 800057e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000580:	23a8      	movs	r3, #168	; 0xa8
 8000582:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000588:	2307      	movs	r3, #7
 800058a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	f107 0320 	add.w	r3, r7, #32
 8000590:	4618      	mov	r0, r3
 8000592:	f003 fb21 	bl	8003bd8 <HAL_RCC_OscConfig>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d001      	beq.n	80005a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800059c:	f000 f9b4 	bl	8000908 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005a0:	230f      	movs	r3, #15
 80005a2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a4:	2302      	movs	r3, #2
 80005a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005ac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2105      	movs	r1, #5
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fd82 	bl	80040c8 <HAL_RCC_ClockConfig>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ca:	f000 f99d 	bl	8000908 <Error_Handler>
  }
}
 80005ce:	bf00      	nop
 80005d0:	3750      	adds	r7, #80	; 0x50
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40023800 	.word	0x40023800
 80005dc:	40007000 	.word	0x40007000

080005e0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e4:	4b1f      	ldr	r3, [pc, #124]	; (8000664 <MX_ETH_Init+0x84>)
 80005e6:	4a20      	ldr	r2, [pc, #128]	; (8000668 <MX_ETH_Init+0x88>)
 80005e8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005ea:	4b20      	ldr	r3, [pc, #128]	; (800066c <MX_ETH_Init+0x8c>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <MX_ETH_Init+0x8c>)
 80005f2:	2280      	movs	r2, #128	; 0x80
 80005f4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005f6:	4b1d      	ldr	r3, [pc, #116]	; (800066c <MX_ETH_Init+0x8c>)
 80005f8:	22e1      	movs	r2, #225	; 0xe1
 80005fa:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80005fc:	4b1b      	ldr	r3, [pc, #108]	; (800066c <MX_ETH_Init+0x8c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000602:	4b1a      	ldr	r3, [pc, #104]	; (800066c <MX_ETH_Init+0x8c>)
 8000604:	2200      	movs	r2, #0
 8000606:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <MX_ETH_Init+0x8c>)
 800060a:	2200      	movs	r2, #0
 800060c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_ETH_Init+0x84>)
 8000610:	4a16      	ldr	r2, [pc, #88]	; (800066c <MX_ETH_Init+0x8c>)
 8000612:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000614:	4b13      	ldr	r3, [pc, #76]	; (8000664 <MX_ETH_Init+0x84>)
 8000616:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800061a:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800061c:	4b11      	ldr	r3, [pc, #68]	; (8000664 <MX_ETH_Init+0x84>)
 800061e:	4a14      	ldr	r2, [pc, #80]	; (8000670 <MX_ETH_Init+0x90>)
 8000620:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000622:	4b10      	ldr	r3, [pc, #64]	; (8000664 <MX_ETH_Init+0x84>)
 8000624:	4a13      	ldr	r2, [pc, #76]	; (8000674 <MX_ETH_Init+0x94>)
 8000626:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000628:	4b0e      	ldr	r3, [pc, #56]	; (8000664 <MX_ETH_Init+0x84>)
 800062a:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800062e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <MX_ETH_Init+0x84>)
 8000632:	f000 fe2b 	bl	800128c <HAL_ETH_Init>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 800063c:	f000 f964 	bl	8000908 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000640:	2238      	movs	r2, #56	; 0x38
 8000642:	2100      	movs	r1, #0
 8000644:	480c      	ldr	r0, [pc, #48]	; (8000678 <MX_ETH_Init+0x98>)
 8000646:	f005 f97c 	bl	8005942 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_ETH_Init+0x98>)
 800064c:	2221      	movs	r2, #33	; 0x21
 800064e:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_ETH_Init+0x98>)
 8000652:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000656:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_ETH_Init+0x98>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800065e:	bf00      	nop
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	200001a0 	.word	0x200001a0
 8000668:	40028000 	.word	0x40028000
 800066c:	200007d0 	.word	0x200007d0
 8000670:	20000100 	.word	0x20000100
 8000674:	20000060 	.word	0x20000060
 8000678:	20000028 	.word	0x20000028

0800067c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000680:	4b1b      	ldr	r3, [pc, #108]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000682:	4a1c      	ldr	r2, [pc, #112]	; (80006f4 <MX_I2C1_Init+0x78>)
 8000684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000686:	4b1a      	ldr	r3, [pc, #104]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000688:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <MX_I2C1_Init+0x7c>)
 800068a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800068c:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_I2C1_Init+0x74>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <MX_I2C1_Init+0x74>)
 8000694:	2200      	movs	r2, #0
 8000696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000698:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_I2C1_Init+0x74>)
 800069a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800069e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a0:	4b13      	ldr	r3, [pc, #76]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ac:	4b10      	ldr	r3, [pc, #64]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006b8:	480d      	ldr	r0, [pc, #52]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006ba:	f001 fad5 	bl	8001c68 <HAL_I2C_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006c4:	f000 f920 	bl	8000908 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006c8:	2100      	movs	r1, #0
 80006ca:	4809      	ldr	r0, [pc, #36]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006cc:	f003 f8f9 	bl	80038c2 <HAL_I2CEx_ConfigAnalogFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80006d6:	f000 f917 	bl	8000908 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80006da:	2100      	movs	r1, #0
 80006dc:	4804      	ldr	r0, [pc, #16]	; (80006f0 <MX_I2C1_Init+0x74>)
 80006de:	f003 f92c 	bl	800393a <HAL_I2CEx_ConfigDigitalFilter>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80006e8:	f000 f90e 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006ec:	bf00      	nop
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	20000250 	.word	0x20000250
 80006f4:	40005400 	.word	0x40005400
 80006f8:	000186a0 	.word	0x000186a0

080006fc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000700:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000702:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_USART3_UART_Init+0x50>)
 8000704:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800070e:	4b0e      	ldr	r3, [pc, #56]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000714:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800071a:	4b0b      	ldr	r3, [pc, #44]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000720:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000726:	4b08      	ldr	r3, [pc, #32]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_USART3_UART_Init+0x4c>)
 8000734:	f003 fee8 	bl	8004508 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800073e:	f000 f8e3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	200002a4 	.word	0x200002a4
 800074c:	40004800 	.word	0x40004800

08000750 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000754:	4b14      	ldr	r3, [pc, #80]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000756:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800075a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800075c:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800075e:	2204      	movs	r2, #4
 8000760:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000764:	2202      	movs	r2, #2
 8000766:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000768:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800076e:	4b0e      	ldr	r3, [pc, #56]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000770:	2202      	movs	r2, #2
 8000772:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000774:	4b0c      	ldr	r3, [pc, #48]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000776:	2201      	movs	r2, #1
 8000778:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800077a:	4b0b      	ldr	r3, [pc, #44]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000780:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000782:	2200      	movs	r2, #0
 8000784:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000786:	4b08      	ldr	r3, [pc, #32]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000788:	2201      	movs	r2, #1
 800078a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800078c:	4b06      	ldr	r3, [pc, #24]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000792:	4805      	ldr	r0, [pc, #20]	; (80007a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000794:	f003 f910 	bl	80039b8 <HAL_PCD_Init>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800079e:	f000 f8b3 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80007a2:	bf00      	nop
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	200002ec 	.word	0x200002ec

080007ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08c      	sub	sp, #48	; 0x30
 80007b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
 80007c6:	4b4c      	ldr	r3, [pc, #304]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	4a4b      	ldr	r2, [pc, #300]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007cc:	f043 0304 	orr.w	r3, r3, #4
 80007d0:	6313      	str	r3, [r2, #48]	; 0x30
 80007d2:	4b49      	ldr	r3, [pc, #292]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	f003 0304 	and.w	r3, r3, #4
 80007da:	61bb      	str	r3, [r7, #24]
 80007dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	617b      	str	r3, [r7, #20]
 80007e2:	4b45      	ldr	r3, [pc, #276]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a44      	ldr	r2, [pc, #272]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b42      	ldr	r3, [pc, #264]	; (80008f8 <MX_GPIO_Init+0x14c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007f6:	617b      	str	r3, [r7, #20]
 80007f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	613b      	str	r3, [r7, #16]
 80007fe:	4b3e      	ldr	r3, [pc, #248]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a3d      	ldr	r2, [pc, #244]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b3b      	ldr	r3, [pc, #236]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	613b      	str	r3, [r7, #16]
 8000814:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	4b37      	ldr	r3, [pc, #220]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a36      	ldr	r2, [pc, #216]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b34      	ldr	r3, [pc, #208]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	60bb      	str	r3, [r7, #8]
 8000836:	4b30      	ldr	r3, [pc, #192]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a2f      	ldr	r2, [pc, #188]	; (80008f8 <MX_GPIO_Init+0x14c>)
 800083c:	f043 0308 	orr.w	r3, r3, #8
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b2d      	ldr	r3, [pc, #180]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0308 	and.w	r3, r3, #8
 800084a:	60bb      	str	r3, [r7, #8]
 800084c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a28      	ldr	r2, [pc, #160]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000858:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b26      	ldr	r3, [pc, #152]	; (80008f8 <MX_GPIO_Init+0x14c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000866:	607b      	str	r3, [r7, #4]
 8000868:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086a:	2200      	movs	r2, #0
 800086c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000870:	4822      	ldr	r0, [pc, #136]	; (80008fc <MX_GPIO_Init+0x150>)
 8000872:	f001 f9df 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000876:	2200      	movs	r2, #0
 8000878:	2140      	movs	r1, #64	; 0x40
 800087a:	4821      	ldr	r0, [pc, #132]	; (8000900 <MX_GPIO_Init+0x154>)
 800087c:	f001 f9da 	bl	8001c34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000880:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000886:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000890:	f107 031c 	add.w	r3, r7, #28
 8000894:	4619      	mov	r1, r3
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <MX_GPIO_Init+0x158>)
 8000898:	f001 f820 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800089c:	f244 0381 	movw	r3, #16513	; 0x4081
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4811      	ldr	r0, [pc, #68]	; (80008fc <MX_GPIO_Init+0x150>)
 80008b6:	f001 f811 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	480b      	ldr	r0, [pc, #44]	; (8000900 <MX_GPIO_Init+0x154>)
 80008d2:	f001 f803 	bl	80018dc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4805      	ldr	r0, [pc, #20]	; (8000900 <MX_GPIO_Init+0x154>)
 80008ea:	f000 fff7 	bl	80018dc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ee:	bf00      	nop
 80008f0:	3730      	adds	r7, #48	; 0x30
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40020400 	.word	0x40020400
 8000900:	40021800 	.word	0x40021800
 8000904:	40020800 	.word	0x40020800

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091a:	2300      	movs	r3, #0
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_MspInit+0x4c>)
 8000920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000922:	4a0f      	ldr	r2, [pc, #60]	; (8000960 <HAL_MspInit+0x4c>)
 8000924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000928:	6453      	str	r3, [r2, #68]	; 0x44
 800092a:	4b0d      	ldr	r3, [pc, #52]	; (8000960 <HAL_MspInit+0x4c>)
 800092c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800092e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_MspInit+0x4c>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_MspInit+0x4c>)
 8000940:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b06      	ldr	r3, [pc, #24]	; (8000960 <HAL_MspInit+0x4c>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40023800 	.word	0x40023800

08000964 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08e      	sub	sp, #56	; 0x38
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000970:	2200      	movs	r2, #0
 8000972:	601a      	str	r2, [r3, #0]
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	609a      	str	r2, [r3, #8]
 8000978:	60da      	str	r2, [r3, #12]
 800097a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	4a55      	ldr	r2, [pc, #340]	; (8000ad8 <HAL_ETH_MspInit+0x174>)
 8000982:	4293      	cmp	r3, r2
 8000984:	f040 80a4 	bne.w	8000ad0 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	623b      	str	r3, [r7, #32]
 800098c:	4b53      	ldr	r3, [pc, #332]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800098e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000990:	4a52      	ldr	r2, [pc, #328]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000992:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000996:	6313      	str	r3, [r2, #48]	; 0x30
 8000998:	4b50      	ldr	r3, [pc, #320]	; (8000adc <HAL_ETH_MspInit+0x178>)
 800099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009a0:	623b      	str	r3, [r7, #32]
 80009a2:	6a3b      	ldr	r3, [r7, #32]
 80009a4:	2300      	movs	r3, #0
 80009a6:	61fb      	str	r3, [r7, #28]
 80009a8:	4b4c      	ldr	r3, [pc, #304]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ac:	4a4b      	ldr	r2, [pc, #300]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80009b2:	6313      	str	r3, [r2, #48]	; 0x30
 80009b4:	4b49      	ldr	r3, [pc, #292]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80009bc:	61fb      	str	r3, [r7, #28]
 80009be:	69fb      	ldr	r3, [r7, #28]
 80009c0:	2300      	movs	r3, #0
 80009c2:	61bb      	str	r3, [r7, #24]
 80009c4:	4b45      	ldr	r3, [pc, #276]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c8:	4a44      	ldr	r2, [pc, #272]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80009ce:	6313      	str	r3, [r2, #48]	; 0x30
 80009d0:	4b42      	ldr	r3, [pc, #264]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80009d8:	61bb      	str	r3, [r7, #24]
 80009da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009dc:	2300      	movs	r3, #0
 80009de:	617b      	str	r3, [r7, #20]
 80009e0:	4b3e      	ldr	r3, [pc, #248]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e4:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009e6:	f043 0304 	orr.w	r3, r3, #4
 80009ea:	6313      	str	r3, [r2, #48]	; 0x30
 80009ec:	4b3b      	ldr	r3, [pc, #236]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f0:	f003 0304 	and.w	r3, r3, #4
 80009f4:	617b      	str	r3, [r7, #20]
 80009f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f8:	2300      	movs	r3, #0
 80009fa:	613b      	str	r3, [r7, #16]
 80009fc:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_ETH_MspInit+0x178>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	4a36      	ldr	r2, [pc, #216]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a02:	f043 0301 	orr.w	r3, r3, #1
 8000a06:	6313      	str	r3, [r2, #48]	; 0x30
 8000a08:	4b34      	ldr	r3, [pc, #208]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	613b      	str	r3, [r7, #16]
 8000a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a14:	2300      	movs	r3, #0
 8000a16:	60fb      	str	r3, [r7, #12]
 8000a18:	4b30      	ldr	r3, [pc, #192]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1c:	4a2f      	ldr	r2, [pc, #188]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a1e:	f043 0302 	orr.w	r3, r3, #2
 8000a22:	6313      	str	r3, [r2, #48]	; 0x30
 8000a24:	4b2d      	ldr	r3, [pc, #180]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a28:	f003 0302 	and.w	r3, r3, #2
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	4b29      	ldr	r3, [pc, #164]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a38:	4a28      	ldr	r2, [pc, #160]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a40:	4b26      	ldr	r3, [pc, #152]	; (8000adc <HAL_ETH_MspInit+0x178>)
 8000a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a48:	60bb      	str	r3, [r7, #8]
 8000a4a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000a4c:	2332      	movs	r3, #50	; 0x32
 8000a4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a58:	2303      	movs	r3, #3
 8000a5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a5c:	230b      	movs	r3, #11
 8000a5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a64:	4619      	mov	r1, r3
 8000a66:	481e      	ldr	r0, [pc, #120]	; (8000ae0 <HAL_ETH_MspInit+0x17c>)
 8000a68:	f000 ff38 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000a6c:	2386      	movs	r3, #134	; 0x86
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a70:	2302      	movs	r3, #2
 8000a72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a78:	2303      	movs	r3, #3
 8000a7a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a7c:	230b      	movs	r3, #11
 8000a7e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a84:	4619      	mov	r1, r3
 8000a86:	4817      	ldr	r0, [pc, #92]	; (8000ae4 <HAL_ETH_MspInit+0x180>)
 8000a88:	f000 ff28 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a8c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a92:	2302      	movs	r3, #2
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a96:	2300      	movs	r3, #0
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a9a:	2303      	movs	r3, #3
 8000a9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a9e:	230b      	movs	r3, #11
 8000aa0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	480f      	ldr	r0, [pc, #60]	; (8000ae8 <HAL_ETH_MspInit+0x184>)
 8000aaa:	f000 ff17 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000aae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000abc:	2303      	movs	r3, #3
 8000abe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ac4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4808      	ldr	r0, [pc, #32]	; (8000aec <HAL_ETH_MspInit+0x188>)
 8000acc:	f000 ff06 	bl	80018dc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000ad0:	bf00      	nop
 8000ad2:	3738      	adds	r7, #56	; 0x38
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	40028000 	.word	0x40028000
 8000adc:	40023800 	.word	0x40023800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	40021800 	.word	0x40021800

08000af0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a21      	ldr	r2, [pc, #132]	; (8000b94 <HAL_I2C_MspInit+0xa4>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d13c      	bne.n	8000b8c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	2300      	movs	r3, #0
 8000b14:	613b      	str	r3, [r7, #16]
 8000b16:	4b20      	ldr	r3, [pc, #128]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	4a1f      	ldr	r2, [pc, #124]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b1c:	f043 0302 	orr.w	r3, r3, #2
 8000b20:	6313      	str	r3, [r2, #48]	; 0x30
 8000b22:	4b1d      	ldr	r3, [pc, #116]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	f003 0302 	and.w	r3, r3, #2
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000b2e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b34:	2312      	movs	r3, #18
 8000b36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b40:	2304      	movs	r3, #4
 8000b42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b44:	f107 0314 	add.w	r3, r7, #20
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4814      	ldr	r0, [pc, #80]	; (8000b9c <HAL_I2C_MspInit+0xac>)
 8000b4c:	f000 fec6 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	4b10      	ldr	r3, [pc, #64]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a0f      	ldr	r2, [pc, #60]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b0d      	ldr	r3, [pc, #52]	; (8000b98 <HAL_I2C_MspInit+0xa8>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b68:	60fb      	str	r3, [r7, #12]
 8000b6a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	201f      	movs	r0, #31
 8000b72:	f000 fab4 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b76:	201f      	movs	r0, #31
 8000b78:	f000 facd 	bl	8001116 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2020      	movs	r0, #32
 8000b82:	f000 faac 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b86:	2020      	movs	r0, #32
 8000b88:	f000 fac5 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b8c:	bf00      	nop
 8000b8e:	3728      	adds	r7, #40	; 0x28
 8000b90:	46bd      	mov	sp, r7
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40005400 	.word	0x40005400
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40020400 	.word	0x40020400

08000ba0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08a      	sub	sp, #40	; 0x28
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a1d      	ldr	r2, [pc, #116]	; (8000c34 <HAL_UART_MspInit+0x94>)
 8000bbe:	4293      	cmp	r3, r2
 8000bc0:	d134      	bne.n	8000c2c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	613b      	str	r3, [r7, #16]
 8000bc6:	4b1c      	ldr	r3, [pc, #112]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	4a1b      	ldr	r2, [pc, #108]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000bcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bda:	613b      	str	r3, [r7, #16]
 8000bdc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bde:	2300      	movs	r3, #0
 8000be0:	60fb      	str	r3, [r7, #12]
 8000be2:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	4a14      	ldr	r2, [pc, #80]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000be8:	f043 0308 	orr.w	r3, r3, #8
 8000bec:	6313      	str	r3, [r2, #48]	; 0x30
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <HAL_UART_MspInit+0x98>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	f003 0308 	and.w	r3, r3, #8
 8000bf6:	60fb      	str	r3, [r7, #12]
 8000bf8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000bfa:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c00:	2302      	movs	r3, #2
 8000c02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c04:	2300      	movs	r3, #0
 8000c06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	4619      	mov	r1, r3
 8000c16:	4809      	ldr	r0, [pc, #36]	; (8000c3c <HAL_UART_MspInit+0x9c>)
 8000c18:	f000 fe60 	bl	80018dc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	2100      	movs	r1, #0
 8000c20:	2027      	movs	r0, #39	; 0x27
 8000c22:	f000 fa5c 	bl	80010de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000c26:	2027      	movs	r0, #39	; 0x27
 8000c28:	f000 fa75 	bl	8001116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c2c:	bf00      	nop
 8000c2e:	3728      	adds	r7, #40	; 0x28
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40004800 	.word	0x40004800
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020c00 	.word	0x40020c00

08000c40 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000c60:	d13f      	bne.n	8000ce2 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	2300      	movs	r3, #0
 8000c64:	613b      	str	r3, [r7, #16]
 8000c66:	4b21      	ldr	r3, [pc, #132]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6313      	str	r3, [r2, #48]	; 0x30
 8000c72:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	613b      	str	r3, [r7, #16]
 8000c7c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000c7e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000c82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c84:	2302      	movs	r3, #2
 8000c86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000c90:	230a      	movs	r3, #10
 8000c92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4815      	ldr	r0, [pc, #84]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000c9c:	f000 fe1e 	bl	80018dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ca0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ca4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000caa:	2300      	movs	r3, #0
 8000cac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	480e      	ldr	r0, [pc, #56]	; (8000cf0 <HAL_PCD_MspInit+0xb0>)
 8000cb6:	f000 fe11 	bl	80018dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cbe:	4a0b      	ldr	r2, [pc, #44]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cc4:	6353      	str	r3, [r2, #52]	; 0x34
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_PCD_MspInit+0xac>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ce2:	bf00      	nop
 8000ce4:	3728      	adds	r7, #40	; 0x28
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	40020000 	.word	0x40020000

08000cf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cf8:	e7fe      	b.n	8000cf8 <NMI_Handler+0x4>

08000cfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cfe:	e7fe      	b.n	8000cfe <HardFault_Handler+0x4>

08000d00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d04:	e7fe      	b.n	8000d04 <MemManage_Handler+0x4>

08000d06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d06:	b480      	push	{r7}
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <BusFault_Handler+0x4>

08000d0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <UsageFault_Handler+0x4>

08000d12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d12:	b480      	push	{r7}
 8000d14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d40:	f000 f8ae 	bl	8000ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <I2C1_EV_IRQHandler+0x10>)
 8000d4e:	f001 f8e4 	bl	8001f1a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000250 	.word	0x20000250

08000d5c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C1_ER_IRQHandler+0x10>)
 8000d62:	f001 fa2d 	bl	80021c0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000250 	.word	0x20000250

08000d70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <USART3_IRQHandler+0x10>)
 8000d76:	f003 fc17 	bl	80045a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002a4 	.word	0x200002a4

08000d84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000da8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000de0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dac:	f7ff ffea 	bl	8000d84 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000db0:	480c      	ldr	r0, [pc, #48]	; (8000de4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000db2:	490d      	ldr	r1, [pc, #52]	; (8000de8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000db4:	4a0d      	ldr	r2, [pc, #52]	; (8000dec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dc8:	4c0a      	ldr	r4, [pc, #40]	; (8000df4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f004 fdbd 	bl	8005954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dda:	f7ff fb85 	bl	80004e8 <main>
  bx  lr    
 8000dde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000de0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000de4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dec:	080059dc 	.word	0x080059dc
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df4:	200007dc 	.word	0x200007dc

08000df8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e00:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <HAL_Init+0x40>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <HAL_Init+0x40>)
 8000e06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <HAL_Init+0x40>)
 8000e12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e18:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a07      	ldr	r2, [pc, #28]	; (8000e3c <HAL_Init+0x40>)
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e24:	2003      	movs	r0, #3
 8000e26:	f000 f94f 	bl	80010c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f808 	bl	8000e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e30:	f7ff fd70 	bl	8000914 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e34:	2300      	movs	r3, #0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	40023c00 	.word	0x40023c00

08000e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e48:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <HAL_InitTick+0x54>)
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <HAL_InitTick+0x58>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	4619      	mov	r1, r3
 8000e52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f000 f967 	bl	8001132 <HAL_SYSTICK_Config>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e00e      	b.n	8000e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2b0f      	cmp	r3, #15
 8000e72:	d80a      	bhi.n	8000e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e74:	2200      	movs	r2, #0
 8000e76:	6879      	ldr	r1, [r7, #4]
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e7c:	f000 f92f 	bl	80010de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e80:	4a06      	ldr	r2, [pc, #24]	; (8000e9c <HAL_InitTick+0x5c>)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e86:	2300      	movs	r3, #0
 8000e88:	e000      	b.n	8000e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	3708      	adds	r7, #8
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	20000000 	.word	0x20000000
 8000e98:	20000008 	.word	0x20000008
 8000e9c:	20000004 	.word	0x20000004

08000ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	; (8000ec0 <HAL_IncTick+0x20>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	4b06      	ldr	r3, [pc, #24]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	4413      	add	r3, r2
 8000eb0:	4a04      	ldr	r2, [pc, #16]	; (8000ec4 <HAL_IncTick+0x24>)
 8000eb2:	6013      	str	r3, [r2, #0]
}
 8000eb4:	bf00      	nop
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000008 	.word	0x20000008
 8000ec4:	200007d8 	.word	0x200007d8

08000ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  return uwTick;
 8000ecc:	4b03      	ldr	r3, [pc, #12]	; (8000edc <HAL_GetTick+0x14>)
 8000ece:	681b      	ldr	r3, [r3, #0]
}
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr
 8000eda:	bf00      	nop
 8000edc:	200007d8 	.word	0x200007d8

08000ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ee8:	f7ff ffee 	bl	8000ec8 <HAL_GetTick>
 8000eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ef8:	d005      	beq.n	8000f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <HAL_Delay+0x44>)
 8000efc:	781b      	ldrb	r3, [r3, #0]
 8000efe:	461a      	mov	r2, r3
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	4413      	add	r3, r2
 8000f04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f06:	bf00      	nop
 8000f08:	f7ff ffde 	bl	8000ec8 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	68bb      	ldr	r3, [r7, #8]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	68fa      	ldr	r2, [r7, #12]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	d8f7      	bhi.n	8000f08 <HAL_Delay+0x28>
  {
  }
}
 8000f18:	bf00      	nop
 8000f1a:	bf00      	nop
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000008 	.word	0x20000008

08000f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b085      	sub	sp, #20
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f3e:	68ba      	ldr	r2, [r7, #8]
 8000f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f44:	4013      	ands	r3, r2
 8000f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f4c:	68bb      	ldr	r3, [r7, #8]
 8000f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f5a:	4a04      	ldr	r2, [pc, #16]	; (8000f6c <__NVIC_SetPriorityGrouping+0x44>)
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	60d3      	str	r3, [r2, #12]
}
 8000f60:	bf00      	nop
 8000f62:	3714      	adds	r7, #20
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	e000ed00 	.word	0xe000ed00

08000f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f74:	4b04      	ldr	r3, [pc, #16]	; (8000f88 <__NVIC_GetPriorityGrouping+0x18>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	0a1b      	lsrs	r3, r3, #8
 8000f7a:	f003 0307 	and.w	r3, r3, #7
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	4603      	mov	r3, r0
 8000f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db0b      	blt.n	8000fb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	f003 021f 	and.w	r2, r3, #31
 8000fa4:	4907      	ldr	r1, [pc, #28]	; (8000fc4 <__NVIC_EnableIRQ+0x38>)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	095b      	lsrs	r3, r3, #5
 8000fac:	2001      	movs	r0, #1
 8000fae:	fa00 f202 	lsl.w	r2, r0, r2
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fb6:	bf00      	nop
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	e000e100 	.word	0xe000e100

08000fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	6039      	str	r1, [r7, #0]
 8000fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	db0a      	blt.n	8000ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	b2da      	uxtb	r2, r3
 8000fe0:	490c      	ldr	r1, [pc, #48]	; (8001014 <__NVIC_SetPriority+0x4c>)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	0112      	lsls	r2, r2, #4
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	440b      	add	r3, r1
 8000fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ff0:	e00a      	b.n	8001008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4908      	ldr	r1, [pc, #32]	; (8001018 <__NVIC_SetPriority+0x50>)
 8000ff8:	79fb      	ldrb	r3, [r7, #7]
 8000ffa:	f003 030f 	and.w	r3, r3, #15
 8000ffe:	3b04      	subs	r3, #4
 8001000:	0112      	lsls	r2, r2, #4
 8001002:	b2d2      	uxtb	r2, r2
 8001004:	440b      	add	r3, r1
 8001006:	761a      	strb	r2, [r3, #24]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000e100 	.word	0xe000e100
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	; 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	60f8      	str	r0, [r7, #12]
 8001024:	60b9      	str	r1, [r7, #8]
 8001026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001030:	69fb      	ldr	r3, [r7, #28]
 8001032:	f1c3 0307 	rsb	r3, r3, #7
 8001036:	2b04      	cmp	r3, #4
 8001038:	bf28      	it	cs
 800103a:	2304      	movcs	r3, #4
 800103c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800103e:	69fb      	ldr	r3, [r7, #28]
 8001040:	3304      	adds	r3, #4
 8001042:	2b06      	cmp	r3, #6
 8001044:	d902      	bls.n	800104c <NVIC_EncodePriority+0x30>
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3b03      	subs	r3, #3
 800104a:	e000      	b.n	800104e <NVIC_EncodePriority+0x32>
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001050:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	fa02 f303 	lsl.w	r3, r2, r3
 800105a:	43da      	mvns	r2, r3
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	401a      	ands	r2, r3
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001064:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	fa01 f303 	lsl.w	r3, r1, r3
 800106e:	43d9      	mvns	r1, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001074:	4313      	orrs	r3, r2
         );
}
 8001076:	4618      	mov	r0, r3
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
	...

08001084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	3b01      	subs	r3, #1
 8001090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001094:	d301      	bcc.n	800109a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001096:	2301      	movs	r3, #1
 8001098:	e00f      	b.n	80010ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109a:	4a0a      	ldr	r2, [pc, #40]	; (80010c4 <SysTick_Config+0x40>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a2:	210f      	movs	r1, #15
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a8:	f7ff ff8e 	bl	8000fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ac:	4b05      	ldr	r3, [pc, #20]	; (80010c4 <SysTick_Config+0x40>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b2:	4b04      	ldr	r3, [pc, #16]	; (80010c4 <SysTick_Config+0x40>)
 80010b4:	2207      	movs	r2, #7
 80010b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	e000e010 	.word	0xe000e010

080010c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f7ff ff29 	bl	8000f28 <__NVIC_SetPriorityGrouping>
}
 80010d6:	bf00      	nop
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010de:	b580      	push	{r7, lr}
 80010e0:	b086      	sub	sp, #24
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	60b9      	str	r1, [r7, #8]
 80010e8:	607a      	str	r2, [r7, #4]
 80010ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010ec:	2300      	movs	r3, #0
 80010ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f0:	f7ff ff3e 	bl	8000f70 <__NVIC_GetPriorityGrouping>
 80010f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f6:	687a      	ldr	r2, [r7, #4]
 80010f8:	68b9      	ldr	r1, [r7, #8]
 80010fa:	6978      	ldr	r0, [r7, #20]
 80010fc:	f7ff ff8e 	bl	800101c <NVIC_EncodePriority>
 8001100:	4602      	mov	r2, r0
 8001102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001106:	4611      	mov	r1, r2
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff ff5d 	bl	8000fc8 <__NVIC_SetPriority>
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}

08001116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
 800111c:	4603      	mov	r3, r0
 800111e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff31 	bl	8000f8c <__NVIC_EnableIRQ>
}
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}

08001132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001132:	b580      	push	{r7, lr}
 8001134:	b082      	sub	sp, #8
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff ffa2 	bl	8001084 <SysTick_Config>
 8001140:	4603      	mov	r3, r0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3708      	adds	r7, #8
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001156:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001158:	f7ff feb6 	bl	8000ec8 <HAL_GetTick>
 800115c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001164:	b2db      	uxtb	r3, r3
 8001166:	2b02      	cmp	r3, #2
 8001168:	d008      	beq.n	800117c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2280      	movs	r2, #128	; 0x80
 800116e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e052      	b.n	8001222 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	681a      	ldr	r2, [r3, #0]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f022 0216 	bic.w	r2, r2, #22
 800118a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800119a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d103      	bne.n	80011ac <HAL_DMA_Abort+0x62>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f022 0208 	bic.w	r2, r2, #8
 80011ba:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f022 0201 	bic.w	r2, r2, #1
 80011ca:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011cc:	e013      	b.n	80011f6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80011ce:	f7ff fe7b 	bl	8000ec8 <HAL_GetTick>
 80011d2:	4602      	mov	r2, r0
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d90c      	bls.n	80011f6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2220      	movs	r2, #32
 80011e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2203      	movs	r2, #3
 80011e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80011f2:	2303      	movs	r3, #3
 80011f4:	e015      	b.n	8001222 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1e4      	bne.n	80011ce <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001208:	223f      	movs	r2, #63	; 0x3f
 800120a:	409a      	lsls	r2, r3
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2201      	movs	r2, #1
 8001214:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d004      	beq.n	8001248 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2280      	movs	r2, #128	; 0x80
 8001242:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	e00c      	b.n	8001262 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2205      	movs	r2, #5
 800124c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0201 	bic.w	r2, r2, #1
 800125e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800127c:	b2db      	uxtb	r3, r3
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e06c      	b.n	8001378 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d106      	bne.n	80012b6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2223      	movs	r2, #35	; 0x23
 80012ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012b0:	6878      	ldr	r0, [r7, #4]
 80012b2:	f7ff fb57 	bl	8000964 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	60bb      	str	r3, [r7, #8]
 80012ba:	4b31      	ldr	r3, [pc, #196]	; (8001380 <HAL_ETH_Init+0xf4>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	4a30      	ldr	r2, [pc, #192]	; (8001380 <HAL_ETH_Init+0xf4>)
 80012c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012c4:	6453      	str	r3, [r2, #68]	; 0x44
 80012c6:	4b2e      	ldr	r3, [pc, #184]	; (8001380 <HAL_ETH_Init+0xf4>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <HAL_ETH_Init+0xf8>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4a2b      	ldr	r2, [pc, #172]	; (8001384 <HAL_ETH_Init+0xf8>)
 80012d8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80012dc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80012de:	4b29      	ldr	r3, [pc, #164]	; (8001384 <HAL_ETH_Init+0xf8>)
 80012e0:	685a      	ldr	r2, [r3, #4]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4927      	ldr	r1, [pc, #156]	; (8001384 <HAL_ETH_Init+0xf8>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80012ec:	4b25      	ldr	r3, [pc, #148]	; (8001384 <HAL_ETH_Init+0xf8>)
 80012ee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	687a      	ldr	r2, [r7, #4]
 80012fc:	6812      	ldr	r2, [r2, #0]
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001306:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001308:	f7ff fdde 	bl	8000ec8 <HAL_GetTick>
 800130c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800130e:	e011      	b.n	8001334 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001310:	f7ff fdda 	bl	8000ec8 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800131e:	d909      	bls.n	8001334 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2204      	movs	r2, #4
 8001324:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	22e0      	movs	r2, #224	; 0xe0
 800132c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e021      	b.n	8001378 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0301 	and.w	r3, r3, #1
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1e4      	bne.n	8001310 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f000 f958 	bl	80015fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f000 f9ff 	bl	8001750 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f000 fa55 	bl	8001802 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	461a      	mov	r2, r3
 800135e:	2100      	movs	r1, #0
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f000 f9bd 	bl	80016e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2210      	movs	r2, #16
 8001372:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40023800 	.word	0x40023800
 8001384:	40013800 	.word	0x40013800

08001388 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800139a:	68fa      	ldr	r2, [r7, #12]
 800139c:	4b51      	ldr	r3, [pc, #324]	; (80014e4 <ETH_SetMACConfig+0x15c>)
 800139e:	4013      	ands	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	7c1b      	ldrb	r3, [r3, #16]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d102      	bne.n	80013b0 <ETH_SetMACConfig+0x28>
 80013aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013ae:	e000      	b.n	80013b2 <ETH_SetMACConfig+0x2a>
 80013b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	7c5b      	ldrb	r3, [r3, #17]
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d102      	bne.n	80013c0 <ETH_SetMACConfig+0x38>
 80013ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013be:	e000      	b.n	80013c2 <ETH_SetMACConfig+0x3a>
 80013c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80013c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80013c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	7fdb      	ldrb	r3, [r3, #31]
 80013ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80013d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80013d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013d8:	683a      	ldr	r2, [r7, #0]
 80013da:	7f92      	ldrb	r2, [r2, #30]
 80013dc:	2a00      	cmp	r2, #0
 80013de:	d102      	bne.n	80013e6 <ETH_SetMACConfig+0x5e>
 80013e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e4:	e000      	b.n	80013e8 <ETH_SetMACConfig+0x60>
 80013e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80013e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	7f1b      	ldrb	r3, [r3, #28]
 80013ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80013f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80013f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	791b      	ldrb	r3, [r3, #4]
 80013fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80013fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001400:	683a      	ldr	r2, [r7, #0]
 8001402:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001406:	2a00      	cmp	r2, #0
 8001408:	d102      	bne.n	8001410 <ETH_SetMACConfig+0x88>
 800140a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800140e:	e000      	b.n	8001412 <ETH_SetMACConfig+0x8a>
 8001410:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001412:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	7bdb      	ldrb	r3, [r3, #15]
 8001418:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800141a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001420:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001428:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800142a:	4313      	orrs	r3, r2
 800142c:	68fa      	ldr	r2, [r7, #12]
 800142e:	4313      	orrs	r3, r2
 8001430:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001442:	2001      	movs	r0, #1
 8001444:	f7ff fd4c 	bl	8000ee0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	68fa      	ldr	r2, [r7, #12]
 800144e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800145e:	4013      	ands	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001466:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800146e:	2a00      	cmp	r2, #0
 8001470:	d101      	bne.n	8001476 <ETH_SetMACConfig+0xee>
 8001472:	2280      	movs	r2, #128	; 0x80
 8001474:	e000      	b.n	8001478 <ETH_SetMACConfig+0xf0>
 8001476:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001478:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800147e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001486:	2a01      	cmp	r2, #1
 8001488:	d101      	bne.n	800148e <ETH_SetMACConfig+0x106>
 800148a:	2208      	movs	r2, #8
 800148c:	e000      	b.n	8001490 <ETH_SetMACConfig+0x108>
 800148e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001490:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001492:	683a      	ldr	r2, [r7, #0]
 8001494:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001498:	2a01      	cmp	r2, #1
 800149a:	d101      	bne.n	80014a0 <ETH_SetMACConfig+0x118>
 800149c:	2204      	movs	r2, #4
 800149e:	e000      	b.n	80014a2 <ETH_SetMACConfig+0x11a>
 80014a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80014a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80014aa:	2a01      	cmp	r2, #1
 80014ac:	d101      	bne.n	80014b2 <ETH_SetMACConfig+0x12a>
 80014ae:	2202      	movs	r2, #2
 80014b0:	e000      	b.n	80014b4 <ETH_SetMACConfig+0x12c>
 80014b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80014b4:	4313      	orrs	r3, r2
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80014cc:	2001      	movs	r0, #1
 80014ce:	f7ff fd07 	bl	8000ee0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	ff20810f 	.word	0xff20810f

080014e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b084      	sub	sp, #16
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014fa:	699b      	ldr	r3, [r3, #24]
 80014fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <ETH_SetDMAConfig+0x110>)
 8001502:	4013      	ands	r3, r2
 8001504:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	7b1b      	ldrb	r3, [r3, #12]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d102      	bne.n	8001514 <ETH_SetDMAConfig+0x2c>
 800150e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001512:	e000      	b.n	8001516 <ETH_SetDMAConfig+0x2e>
 8001514:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	7b5b      	ldrb	r3, [r3, #13]
 800151a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800151c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800151e:	683a      	ldr	r2, [r7, #0]
 8001520:	7f52      	ldrb	r2, [r2, #29]
 8001522:	2a00      	cmp	r2, #0
 8001524:	d102      	bne.n	800152c <ETH_SetDMAConfig+0x44>
 8001526:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800152a:	e000      	b.n	800152e <ETH_SetDMAConfig+0x46>
 800152c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800152e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	7b9b      	ldrb	r3, [r3, #14]
 8001534:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001536:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800153c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	7f1b      	ldrb	r3, [r3, #28]
 8001542:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001544:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	7f9b      	ldrb	r3, [r3, #30]
 800154a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800154c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001552:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800155a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800155c:	4313      	orrs	r3, r2
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4313      	orrs	r3, r2
 8001562:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	461a      	mov	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fcae 	bl	8000ee0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800158c:	461a      	mov	r2, r3
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800159c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80015a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80015a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80015b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80015ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80015c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80015dc:	2001      	movs	r0, #1
 80015de:	f7ff fc7f 	bl	8000ee0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	6013      	str	r3, [r2, #0]
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	f8de3f23 	.word	0xf8de3f23

080015fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0a6      	sub	sp, #152	; 0x98
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001604:	2301      	movs	r3, #1
 8001606:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800160a:	2301      	movs	r3, #1
 800160c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001614:	2300      	movs	r3, #0
 8001616:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001620:	2300      	movs	r3, #0
 8001622:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001626:	2301      	movs	r3, #1
 8001628:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800162c:	2300      	movs	r3, #0
 800162e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001632:	2300      	movs	r3, #0
 8001634:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001638:	2300      	movs	r3, #0
 800163a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001642:	2300      	movs	r3, #0
 8001644:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001646:	2300      	movs	r3, #0
 8001648:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800164c:	2300      	movs	r3, #0
 800164e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800165e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001662:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001664:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001668:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800166a:	2300      	movs	r3, #0
 800166c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001670:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001674:	4619      	mov	r1, r3
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f7ff fe86 	bl	8001388 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800167c:	2301      	movs	r3, #1
 800167e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001680:	2301      	movs	r3, #1
 8001682:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001684:	2301      	movs	r3, #1
 8001686:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800168a:	2301      	movs	r3, #1
 800168c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800168e:	2300      	movs	r3, #0
 8001690:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800169e:	2300      	movs	r3, #0
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80016a2:	2301      	movs	r3, #1
 80016a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80016a8:	2301      	movs	r3, #1
 80016aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80016ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80016b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80016b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80016b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80016be:	2301      	movs	r3, #1
 80016c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80016cc:	f107 0308 	add.w	r3, r7, #8
 80016d0:	4619      	mov	r1, r3
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f7ff ff08 	bl	80014e8 <ETH_SetDMAConfig>
}
 80016d8:	bf00      	nop
 80016da:	3798      	adds	r7, #152	; 0x98
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	60b9      	str	r1, [r7, #8]
 80016ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	3305      	adds	r3, #5
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	021b      	lsls	r3, r3, #8
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	3204      	adds	r2, #4
 80016f8:	7812      	ldrb	r2, [r2, #0]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80016fe:	68ba      	ldr	r2, [r7, #8]
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <ETH_MACAddressConfig+0x68>)
 8001702:	4413      	add	r3, r2
 8001704:	461a      	mov	r2, r3
 8001706:	697b      	ldr	r3, [r7, #20]
 8001708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	3303      	adds	r3, #3
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	061a      	lsls	r2, r3, #24
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	3302      	adds	r3, #2
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	041b      	lsls	r3, r3, #16
 800171a:	431a      	orrs	r2, r3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	3301      	adds	r3, #1
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	021b      	lsls	r3, r3, #8
 8001724:	4313      	orrs	r3, r2
 8001726:	687a      	ldr	r2, [r7, #4]
 8001728:	7812      	ldrb	r2, [r2, #0]
 800172a:	4313      	orrs	r3, r2
 800172c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <ETH_MACAddressConfig+0x6c>)
 8001732:	4413      	add	r3, r2
 8001734:	461a      	mov	r2, r3
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	6013      	str	r3, [r2, #0]
}
 800173a:	bf00      	nop
 800173c:	371c      	adds	r7, #28
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	40028040 	.word	0x40028040
 800174c:	40028044 	.word	0x40028044

08001750 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001750:	b480      	push	{r7}
 8001752:	b085      	sub	sp, #20
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001758:	2300      	movs	r3, #0
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e03e      	b.n	80017dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	68d9      	ldr	r1, [r3, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4613      	mov	r3, r2
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	4413      	add	r3, r2
 800176a:	00db      	lsls	r3, r3, #3
 800176c:	440b      	add	r3, r1
 800176e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2200      	movs	r2, #0
 800177a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	2200      	movs	r2, #0
 8001786:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001788:	68b9      	ldr	r1, [r7, #8]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68fa      	ldr	r2, [r7, #12]
 800178e:	3206      	adds	r2, #6
 8001790:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b02      	cmp	r3, #2
 80017a4:	d80c      	bhi.n	80017c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68d9      	ldr	r1, [r3, #12]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	00db      	lsls	r3, r3, #3
 80017b6:	440b      	add	r3, r1
 80017b8:	461a      	mov	r2, r3
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	60da      	str	r2, [r3, #12]
 80017be:	e004      	b.n	80017ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	68db      	ldr	r3, [r3, #12]
 80017c4:	461a      	mov	r2, r3
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	3301      	adds	r3, #1
 80017da:	60fb      	str	r3, [r7, #12]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	2b03      	cmp	r3, #3
 80017e0:	d9bd      	bls.n	800175e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f4:	611a      	str	r2, [r3, #16]
}
 80017f6:	bf00      	nop
 80017f8:	3714      	adds	r7, #20
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001802:	b480      	push	{r7}
 8001804:	b085      	sub	sp, #20
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	e046      	b.n	800189e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6919      	ldr	r1, [r3, #16]
 8001814:	68fa      	ldr	r2, [r7, #12]
 8001816:	4613      	mov	r3, r2
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	4413      	add	r3, r2
 800181c:	00db      	lsls	r3, r3, #3
 800181e:	440b      	add	r3, r1
 8001820:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	2200      	movs	r2, #0
 800182c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	2200      	movs	r2, #0
 8001832:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	2200      	movs	r2, #0
 8001838:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	2200      	movs	r2, #0
 800183e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	2200      	movs	r2, #0
 8001844:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001846:	68bb      	ldr	r3, [r7, #8]
 8001848:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800184c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001854:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800185e:	68bb      	ldr	r3, [r7, #8]
 8001860:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001862:	68b9      	ldr	r1, [r7, #8]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	3212      	adds	r2, #18
 800186a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	2b02      	cmp	r3, #2
 8001872:	d80c      	bhi.n	800188e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6919      	ldr	r1, [r3, #16]
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	1c5a      	adds	r2, r3, #1
 800187c:	4613      	mov	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	4413      	add	r3, r2
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	461a      	mov	r2, r3
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	60da      	str	r2, [r3, #12]
 800188c:	e004      	b.n	8001898 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	691b      	ldr	r3, [r3, #16]
 8001892:	461a      	mov	r2, r3
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b03      	cmp	r3, #3
 80018a2:	d9b5      	bls.n	8001810 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2200      	movs	r2, #0
 80018b4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	691a      	ldr	r2, [r3, #16]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018ce:	60da      	str	r2, [r3, #12]
}
 80018d0:	bf00      	nop
 80018d2:	3714      	adds	r7, #20
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr

080018dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	; 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018e6:	2300      	movs	r3, #0
 80018e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018ee:	2300      	movs	r3, #0
 80018f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f2:	2300      	movs	r3, #0
 80018f4:	61fb      	str	r3, [r7, #28]
 80018f6:	e177      	b.n	8001be8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018f8:	2201      	movs	r2, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4013      	ands	r3, r2
 800190a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	429a      	cmp	r2, r3
 8001912:	f040 8166 	bne.w	8001be2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f003 0303 	and.w	r3, r3, #3
 800191e:	2b01      	cmp	r3, #1
 8001920:	d005      	beq.n	800192e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800192a:	2b02      	cmp	r3, #2
 800192c:	d130      	bne.n	8001990 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	fa02 f303 	lsl.w	r3, r2, r3
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	68da      	ldr	r2, [r3, #12]
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	69ba      	ldr	r2, [r7, #24]
 800195c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001964:	2201      	movs	r2, #1
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	091b      	lsrs	r3, r3, #4
 800197a:	f003 0201 	and.w	r2, r3, #1
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	69ba      	ldr	r2, [r7, #24]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b03      	cmp	r3, #3
 800199a:	d017      	beq.n	80019cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	689a      	ldr	r2, [r3, #8]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	f003 0303 	and.w	r3, r3, #3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d123      	bne.n	8001a20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	08da      	lsrs	r2, r3, #3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	3208      	adds	r2, #8
 80019e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	f003 0307 	and.w	r3, r3, #7
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	220f      	movs	r2, #15
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	43db      	mvns	r3, r3
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	4013      	ands	r3, r2
 80019fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	691a      	ldr	r2, [r3, #16]
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f003 0307 	and.w	r3, r3, #7
 8001a06:	009b      	lsls	r3, r3, #2
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	69ba      	ldr	r2, [r7, #24]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	08da      	lsrs	r2, r3, #3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	3208      	adds	r2, #8
 8001a1a:	69b9      	ldr	r1, [r7, #24]
 8001a1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f003 0203 	and.w	r2, r3, #3
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	fa02 f303 	lsl.w	r3, r2, r3
 8001a48:	69ba      	ldr	r2, [r7, #24]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	f000 80c0 	beq.w	8001be2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60fb      	str	r3, [r7, #12]
 8001a66:	4b66      	ldr	r3, [pc, #408]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6a:	4a65      	ldr	r2, [pc, #404]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a70:	6453      	str	r3, [r2, #68]	; 0x44
 8001a72:	4b63      	ldr	r3, [pc, #396]	; (8001c00 <HAL_GPIO_Init+0x324>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a7e:	4a61      	ldr	r2, [pc, #388]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	f003 0303 	and.w	r3, r3, #3
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	220f      	movs	r2, #15
 8001a96:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a58      	ldr	r2, [pc, #352]	; (8001c08 <HAL_GPIO_Init+0x32c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d037      	beq.n	8001b1a <HAL_GPIO_Init+0x23e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a57      	ldr	r2, [pc, #348]	; (8001c0c <HAL_GPIO_Init+0x330>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d031      	beq.n	8001b16 <HAL_GPIO_Init+0x23a>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a56      	ldr	r2, [pc, #344]	; (8001c10 <HAL_GPIO_Init+0x334>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d02b      	beq.n	8001b12 <HAL_GPIO_Init+0x236>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a55      	ldr	r2, [pc, #340]	; (8001c14 <HAL_GPIO_Init+0x338>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d025      	beq.n	8001b0e <HAL_GPIO_Init+0x232>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a54      	ldr	r2, [pc, #336]	; (8001c18 <HAL_GPIO_Init+0x33c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d01f      	beq.n	8001b0a <HAL_GPIO_Init+0x22e>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a53      	ldr	r2, [pc, #332]	; (8001c1c <HAL_GPIO_Init+0x340>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d019      	beq.n	8001b06 <HAL_GPIO_Init+0x22a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a52      	ldr	r2, [pc, #328]	; (8001c20 <HAL_GPIO_Init+0x344>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d013      	beq.n	8001b02 <HAL_GPIO_Init+0x226>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a51      	ldr	r2, [pc, #324]	; (8001c24 <HAL_GPIO_Init+0x348>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d00d      	beq.n	8001afe <HAL_GPIO_Init+0x222>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a50      	ldr	r2, [pc, #320]	; (8001c28 <HAL_GPIO_Init+0x34c>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d007      	beq.n	8001afa <HAL_GPIO_Init+0x21e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a4f      	ldr	r2, [pc, #316]	; (8001c2c <HAL_GPIO_Init+0x350>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d101      	bne.n	8001af6 <HAL_GPIO_Init+0x21a>
 8001af2:	2309      	movs	r3, #9
 8001af4:	e012      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001af6:	230a      	movs	r3, #10
 8001af8:	e010      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afa:	2308      	movs	r3, #8
 8001afc:	e00e      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001afe:	2307      	movs	r3, #7
 8001b00:	e00c      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b02:	2306      	movs	r3, #6
 8001b04:	e00a      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e008      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0a:	2304      	movs	r3, #4
 8001b0c:	e006      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e004      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e002      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b16:	2301      	movs	r3, #1
 8001b18:	e000      	b.n	8001b1c <HAL_GPIO_Init+0x240>
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	69fa      	ldr	r2, [r7, #28]
 8001b1e:	f002 0203 	and.w	r2, r2, #3
 8001b22:	0092      	lsls	r2, r2, #2
 8001b24:	4093      	lsls	r3, r2
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b2c:	4935      	ldr	r1, [pc, #212]	; (8001c04 <HAL_GPIO_Init+0x328>)
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	089b      	lsrs	r3, r3, #2
 8001b32:	3302      	adds	r3, #2
 8001b34:	69ba      	ldr	r2, [r7, #24]
 8001b36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b3a:	4b3d      	ldr	r3, [pc, #244]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d003      	beq.n	8001b5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	693b      	ldr	r3, [r7, #16]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b5e:	4a34      	ldr	r2, [pc, #208]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b64:	4b32      	ldr	r3, [pc, #200]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	43db      	mvns	r3, r3
 8001b6e:	69ba      	ldr	r2, [r7, #24]
 8001b70:	4013      	ands	r3, r2
 8001b72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d003      	beq.n	8001b88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b88:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001b8e:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	43db      	mvns	r3, r3
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d003      	beq.n	8001bb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001baa:	69ba      	ldr	r2, [r7, #24]
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	4313      	orrs	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb2:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bb4:	69bb      	ldr	r3, [r7, #24]
 8001bb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	43db      	mvns	r3, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d003      	beq.n	8001bdc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <HAL_GPIO_Init+0x354>)
 8001bde:	69bb      	ldr	r3, [r7, #24]
 8001be0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	3301      	adds	r3, #1
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	2b0f      	cmp	r3, #15
 8001bec:	f67f ae84 	bls.w	80018f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bf0:	bf00      	nop
 8001bf2:	bf00      	nop
 8001bf4:	3724      	adds	r7, #36	; 0x24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40013800 	.word	0x40013800
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40020400 	.word	0x40020400
 8001c10:	40020800 	.word	0x40020800
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021000 	.word	0x40021000
 8001c1c:	40021400 	.word	0x40021400
 8001c20:	40021800 	.word	0x40021800
 8001c24:	40021c00 	.word	0x40021c00
 8001c28:	40022000 	.word	0x40022000
 8001c2c:	40022400 	.word	0x40022400
 8001c30:	40013c00 	.word	0x40013c00

08001c34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	807b      	strh	r3, [r7, #2]
 8001c40:	4613      	mov	r3, r2
 8001c42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c44:	787b      	ldrb	r3, [r7, #1]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c4a:	887a      	ldrh	r2, [r7, #2]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c50:	e003      	b.n	8001c5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c52:	887b      	ldrh	r3, [r7, #2]
 8001c54:	041a      	lsls	r2, r3, #16
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	619a      	str	r2, [r3, #24]
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr
	...

08001c68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b084      	sub	sp, #16
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e12b      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f7fe ff2e 	bl	8000af0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2224      	movs	r2, #36	; 0x24
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001cba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ccc:	f002 fbf4 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	4a81      	ldr	r2, [pc, #516]	; (8001edc <HAL_I2C_Init+0x274>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d807      	bhi.n	8001cec <HAL_I2C_Init+0x84>
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	4a80      	ldr	r2, [pc, #512]	; (8001ee0 <HAL_I2C_Init+0x278>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	bf94      	ite	ls
 8001ce4:	2301      	movls	r3, #1
 8001ce6:	2300      	movhi	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	e006      	b.n	8001cfa <HAL_I2C_Init+0x92>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	4a7d      	ldr	r2, [pc, #500]	; (8001ee4 <HAL_I2C_Init+0x27c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	bf94      	ite	ls
 8001cf4:	2301      	movls	r3, #1
 8001cf6:	2300      	movhi	r3, #0
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e0e7      	b.n	8001ed2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4a78      	ldr	r2, [pc, #480]	; (8001ee8 <HAL_I2C_Init+0x280>)
 8001d06:	fba2 2303 	umull	r2, r3, r2, r3
 8001d0a:	0c9b      	lsrs	r3, r3, #18
 8001d0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68ba      	ldr	r2, [r7, #8]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	6a1b      	ldr	r3, [r3, #32]
 8001d28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	4a6a      	ldr	r2, [pc, #424]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d802      	bhi.n	8001d3c <HAL_I2C_Init+0xd4>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	3301      	adds	r3, #1
 8001d3a:	e009      	b.n	8001d50 <HAL_I2C_Init+0xe8>
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	4a69      	ldr	r2, [pc, #420]	; (8001eec <HAL_I2C_Init+0x284>)
 8001d48:	fba2 2303 	umull	r2, r3, r2, r3
 8001d4c:	099b      	lsrs	r3, r3, #6
 8001d4e:	3301      	adds	r3, #1
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6812      	ldr	r2, [r2, #0]
 8001d54:	430b      	orrs	r3, r1
 8001d56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001d62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	495c      	ldr	r1, [pc, #368]	; (8001edc <HAL_I2C_Init+0x274>)
 8001d6c:	428b      	cmp	r3, r1
 8001d6e:	d819      	bhi.n	8001da4 <HAL_I2C_Init+0x13c>
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	1e59      	subs	r1, r3, #1
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d7e:	1c59      	adds	r1, r3, #1
 8001d80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001d84:	400b      	ands	r3, r1
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d00a      	beq.n	8001da0 <HAL_I2C_Init+0x138>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	1e59      	subs	r1, r3, #1
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001d98:	3301      	adds	r3, #1
 8001d9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d9e:	e051      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da0:	2304      	movs	r3, #4
 8001da2:	e04f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d111      	bne.n	8001dd0 <HAL_I2C_Init+0x168>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	1e58      	subs	r0, r3, #1
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6859      	ldr	r1, [r3, #4]
 8001db4:	460b      	mov	r3, r1
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	440b      	add	r3, r1
 8001dba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	bf0c      	ite	eq
 8001dc8:	2301      	moveq	r3, #1
 8001dca:	2300      	movne	r3, #0
 8001dcc:	b2db      	uxtb	r3, r3
 8001dce:	e012      	b.n	8001df6 <HAL_I2C_Init+0x18e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	1e58      	subs	r0, r3, #1
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6859      	ldr	r1, [r3, #4]
 8001dd8:	460b      	mov	r3, r1
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	440b      	add	r3, r1
 8001dde:	0099      	lsls	r1, r3, #2
 8001de0:	440b      	add	r3, r1
 8001de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001de6:	3301      	adds	r3, #1
 8001de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_I2C_Init+0x196>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e022      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d10e      	bne.n	8001e24 <HAL_I2C_Init+0x1bc>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	1e58      	subs	r0, r3, #1
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6859      	ldr	r1, [r3, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	440b      	add	r3, r1
 8001e14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e18:	3301      	adds	r3, #1
 8001e1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e22:	e00f      	b.n	8001e44 <HAL_I2C_Init+0x1dc>
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	1e58      	subs	r0, r3, #1
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	440b      	add	r3, r1
 8001e32:	0099      	lsls	r1, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e44:	6879      	ldr	r1, [r7, #4]
 8001e46:	6809      	ldr	r1, [r1, #0]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	69da      	ldr	r2, [r3, #28]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a1b      	ldr	r3, [r3, #32]
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001e72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6911      	ldr	r1, [r2, #16]
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68d2      	ldr	r2, [r2, #12]
 8001e7e:	4311      	orrs	r1, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6812      	ldr	r2, [r2, #0]
 8001e84:	430b      	orrs	r3, r1
 8001e86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	699b      	ldr	r3, [r3, #24]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	430a      	orrs	r2, r1
 8001ea2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f042 0201 	orr.w	r2, r2, #1
 8001eb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2220      	movs	r2, #32
 8001ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2200      	movs	r2, #0
 8001ecc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	000186a0 	.word	0x000186a0
 8001ee0:	001e847f 	.word	0x001e847f
 8001ee4:	003d08ff 	.word	0x003d08ff
 8001ee8:	431bde83 	.word	0x431bde83
 8001eec:	10624dd3 	.word	0x10624dd3

08001ef0 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b083      	sub	sp, #12
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d103      	bne.n	8001f0e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	611a      	str	r2, [r3, #16]
  }
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr

08001f1a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b088      	sub	sp, #32
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f32:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f3a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f42:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b10      	cmp	r3, #16
 8001f48:	d003      	beq.n	8001f52 <HAL_I2C_EV_IRQHandler+0x38>
 8001f4a:	7bfb      	ldrb	r3, [r7, #15]
 8001f4c:	2b40      	cmp	r3, #64	; 0x40
 8001f4e:	f040 80b1 	bne.w	80020b4 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	695b      	ldr	r3, [r3, #20]
 8001f60:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	f003 0301 	and.w	r3, r3, #1
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_I2C_EV_IRQHandler+0x6e>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8001f72:	d003      	beq.n	8001f7c <HAL_I2C_EV_IRQHandler+0x62>
 8001f74:	693b      	ldr	r3, [r7, #16]
 8001f76:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001f7a:	d101      	bne.n	8001f80 <HAL_I2C_EV_IRQHandler+0x66>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_I2C_EV_IRQHandler+0x68>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	f000 8114 	beq.w	80021b0 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x90>
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d006      	beq.n	8001faa <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	f001 fc75 	bl	800388c <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 fd7a 	bl	8002a9c <I2C_Master_SB>
 8001fa8:	e083      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f003 0308 	and.w	r3, r3, #8
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0xac>
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 fdf2 	bl	8002ba8 <I2C_Master_ADD10>
 8001fc4:	e075      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0xc8>
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fe0e 	bl	8002bfc <I2C_Master_ADDR>
 8001fe0:	e067      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d036      	beq.n	800205a <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ff6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001ffa:	f000 80db 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002004:	2b00      	cmp	r3, #0
 8002006:	d00d      	beq.n	8002024 <HAL_I2C_EV_IRQHandler+0x10a>
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800200e:	2b00      	cmp	r3, #0
 8002010:	d008      	beq.n	8002024 <HAL_I2C_EV_IRQHandler+0x10a>
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	f003 0304 	and.w	r3, r3, #4
 8002018:	2b00      	cmp	r3, #0
 800201a:	d103      	bne.n	8002024 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f9d6 	bl	80023ce <I2C_MasterTransmit_TXE>
 8002022:	e046      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	f003 0304 	and.w	r3, r3, #4
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 80c2 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 80bc 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800203c:	7bbb      	ldrb	r3, [r7, #14]
 800203e:	2b21      	cmp	r3, #33	; 0x21
 8002040:	d103      	bne.n	800204a <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f000 fa5f 	bl	8002506 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002048:	e0b4      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800204a:	7bfb      	ldrb	r3, [r7, #15]
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	f040 80b1 	bne.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f000 facd 	bl	80025f2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002058:	e0ac      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002068:	f000 80a4 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00d      	beq.n	8002092 <HAL_I2C_EV_IRQHandler+0x178>
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800207c:	2b00      	cmp	r3, #0
 800207e:	d008      	beq.n	8002092 <HAL_I2C_EV_IRQHandler+0x178>
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	2b00      	cmp	r3, #0
 8002088:	d103      	bne.n	8002092 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f000 fb49 	bl	8002722 <I2C_MasterReceive_RXNE>
 8002090:	e00f      	b.n	80020b2 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	f003 0304 	and.w	r3, r3, #4
 8002098:	2b00      	cmp	r3, #0
 800209a:	f000 808b 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
 800209e:	697b      	ldr	r3, [r7, #20]
 80020a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8085 	beq.w	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fc01 	bl	80028b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020b0:	e080      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
 80020b2:	e07f      	b.n	80021b4 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d004      	beq.n	80020c6 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	695b      	ldr	r3, [r3, #20]
 80020c2:	61fb      	str	r3, [r7, #28]
 80020c4:	e007      	b.n	80020d6 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	695b      	ldr	r3, [r3, #20]
 80020d4:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	f003 0302 	and.w	r3, r3, #2
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d011      	beq.n	8002104 <HAL_I2C_EV_IRQHandler+0x1ea>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d00c      	beq.n	8002104 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	699b      	ldr	r3, [r3, #24]
 80020f8:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 ffcc 	bl	800309a <I2C_Slave_ADDR>
 8002102:	e05a      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	2b00      	cmp	r3, #0
 800210c:	d008      	beq.n	8002120 <HAL_I2C_EV_IRQHandler+0x206>
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8002118:	6878      	ldr	r0, [r7, #4]
 800211a:	f001 f807 	bl	800312c <I2C_Slave_STOPF>
 800211e:	e04c      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002120:	7bbb      	ldrb	r3, [r7, #14]
 8002122:	2b21      	cmp	r3, #33	; 0x21
 8002124:	d002      	beq.n	800212c <HAL_I2C_EV_IRQHandler+0x212>
 8002126:	7bbb      	ldrb	r3, [r7, #14]
 8002128:	2b29      	cmp	r3, #41	; 0x29
 800212a:	d120      	bne.n	800216e <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00d      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x238>
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <HAL_I2C_EV_IRQHandler+0x238>
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	2b00      	cmp	r3, #0
 8002148:	d103      	bne.n	8002152 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fee7 	bl	8002f1e <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002150:	e032      	b.n	80021b8 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d02d      	beq.n	80021b8 <HAL_I2C_EV_IRQHandler+0x29e>
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 ff16 	bl	8002f98 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216c:	e024      	b.n	80021b8 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00d      	beq.n	8002194 <HAL_I2C_EV_IRQHandler+0x27a>
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800217e:	2b00      	cmp	r3, #0
 8002180:	d008      	beq.n	8002194 <HAL_I2C_EV_IRQHandler+0x27a>
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	f003 0304 	and.w	r3, r3, #4
 8002188:	2b00      	cmp	r3, #0
 800218a:	d103      	bne.n	8002194 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 ff24 	bl	8002fda <I2C_SlaveReceive_RXNE>
 8002192:	e012      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	f003 0304 	and.w	r3, r3, #4
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00d      	beq.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d008      	beq.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f000 ff54 	bl	8003056 <I2C_SlaveReceive_BTF>
 80021ae:	e004      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 80021b0:	bf00      	nop
 80021b2:	e002      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80021b4:	bf00      	nop
 80021b6:	e000      	b.n	80021ba <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80021b8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	695b      	ldr	r3, [r3, #20]
 80021ce:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80021d8:	2300      	movs	r3, #0
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80021e2:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80021e4:	6a3b      	ldr	r3, [r7, #32]
 80021e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00d      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x4a>
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d008      	beq.n	800220a <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 80021f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fa:	f043 0301 	orr.w	r3, r3, #1
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002208:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800220a:	6a3b      	ldr	r3, [r7, #32]
 800220c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_I2C_ER_IRQHandler+0x70>
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800221a:	2b00      	cmp	r3, #0
 800221c:	d008      	beq.n	8002230 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	f043 0302 	orr.w	r3, r3, #2
 8002224:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800222e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002230:	6a3b      	ldr	r3, [r7, #32]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	2b00      	cmp	r3, #0
 8002238:	d03e      	beq.n	80022b8 <HAL_I2C_ER_IRQHandler+0xf8>
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d039      	beq.n	80022b8 <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8002244:	7efb      	ldrb	r3, [r7, #27]
 8002246:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224c:	b29b      	uxth	r3, r3
 800224e:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002256:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800225c:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800225e:	7ebb      	ldrb	r3, [r7, #26]
 8002260:	2b20      	cmp	r3, #32
 8002262:	d112      	bne.n	800228a <HAL_I2C_ER_IRQHandler+0xca>
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10f      	bne.n	800228a <HAL_I2C_ER_IRQHandler+0xca>
 800226a:	7cfb      	ldrb	r3, [r7, #19]
 800226c:	2b21      	cmp	r3, #33	; 0x21
 800226e:	d008      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8002270:	7cfb      	ldrb	r3, [r7, #19]
 8002272:	2b29      	cmp	r3, #41	; 0x29
 8002274:	d005      	beq.n	8002282 <HAL_I2C_ER_IRQHandler+0xc2>
 8002276:	7cfb      	ldrb	r3, [r7, #19]
 8002278:	2b28      	cmp	r3, #40	; 0x28
 800227a:	d106      	bne.n	800228a <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2b21      	cmp	r3, #33	; 0x21
 8002280:	d103      	bne.n	800228a <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f001 f882 	bl	800338c <I2C_Slave_AF>
 8002288:	e016      	b.n	80022b8 <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002292:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8002294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002296:	f043 0304 	orr.w	r3, r3, #4
 800229a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800229c:	7efb      	ldrb	r3, [r7, #27]
 800229e:	2b10      	cmp	r3, #16
 80022a0:	d002      	beq.n	80022a8 <HAL_I2C_ER_IRQHandler+0xe8>
 80022a2:	7efb      	ldrb	r3, [r7, #27]
 80022a4:	2b40      	cmp	r3, #64	; 0x40
 80022a6:	d107      	bne.n	80022b8 <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b6:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80022b8:	6a3b      	ldr	r3, [r7, #32]
 80022ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d00d      	beq.n	80022de <HAL_I2C_ER_IRQHandler+0x11e>
 80022c2:	69fb      	ldr	r3, [r7, #28]
 80022c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d008      	beq.n	80022de <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	f043 0308 	orr.w	r3, r3, #8
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80022dc:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d008      	beq.n	80022f6 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	431a      	orrs	r2, r3
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f001 f8bf 	bl	8003474 <I2C_ITError>
  }
}
 80022f6:	bf00      	nop
 80022f8:	3728      	adds	r7, #40	; 0x28
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80022fe:	b480      	push	{r7}
 8002300:	b083      	sub	sp, #12
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002306:	bf00      	nop
 8002308:	370c      	adds	r7, #12
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr

08002312 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002312:	b480      	push	{r7}
 8002314:	b083      	sub	sp, #12
 8002316:	af00      	add	r7, sp, #0
 8002318:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr

08002326 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800232e:	bf00      	nop
 8002330:	370c      	adds	r7, #12
 8002332:	46bd      	mov	sp, r7
 8002334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002338:	4770      	bx	lr

0800233a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
 8002356:	460b      	mov	r3, r1
 8002358:	70fb      	strb	r3, [r7, #3]
 800235a:	4613      	mov	r3, r2
 800235c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800237e:	b480      	push	{r7}
 8002380:	b083      	sub	sp, #12
 8002382:	af00      	add	r7, sp, #0
 8002384:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8002386:	bf00      	nop
 8002388:	370c      	adds	r7, #12
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr

08002392 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002392:	b480      	push	{r7}
 8002394:	b083      	sub	sp, #12
 8002396:	af00      	add	r7, sp, #0
 8002398:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800239a:	bf00      	nop
 800239c:	370c      	adds	r7, #12
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr

080023a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80023a6:	b480      	push	{r7}
 80023a8:	b083      	sub	sp, #12
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80023ba:	b480      	push	{r7}
 80023bc:	b083      	sub	sp, #12
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr

080023ce <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80023ce:	b580      	push	{r7, lr}
 80023d0:	b084      	sub	sp, #16
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023e4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ea:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d150      	bne.n	8002496 <I2C_MasterTransmit_TXE+0xc8>
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	2b21      	cmp	r3, #33	; 0x21
 80023f8:	d14d      	bne.n	8002496 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d01d      	beq.n	800243c <I2C_MasterTransmit_TXE+0x6e>
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	2b20      	cmp	r3, #32
 8002404:	d01a      	beq.n	800243c <I2C_MasterTransmit_TXE+0x6e>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800240c:	d016      	beq.n	800243c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685a      	ldr	r2, [r3, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800241c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2211      	movs	r2, #17
 8002422:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f7ff ff62 	bl	80022fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800243a:	e060      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	685a      	ldr	r2, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800244a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800245a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2220      	movs	r2, #32
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b40      	cmp	r3, #64	; 0x40
 8002474:	d107      	bne.n	8002486 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ff7d 	bl	800237e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002484:	e03b      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff35 	bl	80022fe <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002494:	e033      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b21      	cmp	r3, #33	; 0x21
 800249a:	d005      	beq.n	80024a8 <I2C_MasterTransmit_TXE+0xda>
 800249c:	7bbb      	ldrb	r3, [r7, #14]
 800249e:	2b40      	cmp	r3, #64	; 0x40
 80024a0:	d12d      	bne.n	80024fe <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80024a2:	7bfb      	ldrb	r3, [r7, #15]
 80024a4:	2b22      	cmp	r3, #34	; 0x22
 80024a6:	d12a      	bne.n	80024fe <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d108      	bne.n	80024c4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024c0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80024c2:	e01c      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	2b40      	cmp	r3, #64	; 0x40
 80024ce:	d103      	bne.n	80024d8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f88e 	bl	80025f2 <I2C_MemoryTransmit_TXE_BTF>
}
 80024d6:	e012      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024dc:	781a      	ldrb	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e8:	1c5a      	adds	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	3b01      	subs	r3, #1
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80024fc:	e7ff      	b.n	80024fe <I2C_MasterTransmit_TXE+0x130>
 80024fe:	bf00      	nop
 8002500:	3710      	adds	r7, #16
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}

08002506 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002506:	b580      	push	{r7, lr}
 8002508:	b084      	sub	sp, #16
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002512:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800251a:	b2db      	uxtb	r3, r3
 800251c:	2b21      	cmp	r3, #33	; 0x21
 800251e:	d164      	bne.n	80025ea <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d012      	beq.n	8002550 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252e:	781a      	ldrb	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253a:	1c5a      	adds	r2, r3, #1
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800254e:	e04c      	b.n	80025ea <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b08      	cmp	r3, #8
 8002554:	d01d      	beq.n	8002592 <I2C_MasterTransmit_BTF+0x8c>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2b20      	cmp	r3, #32
 800255a:	d01a      	beq.n	8002592 <I2C_MasterTransmit_BTF+0x8c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002562:	d016      	beq.n	8002592 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	685a      	ldr	r2, [r3, #4]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002572:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2211      	movs	r2, #17
 8002578:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff feb7 	bl	80022fe <HAL_I2C_MasterTxCpltCallback>
}
 8002590:	e02b      	b.n	80025ea <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	685a      	ldr	r2, [r3, #4]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80025a0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681a      	ldr	r2, [r3, #0]
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025b0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2220      	movs	r2, #32
 80025bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b40      	cmp	r3, #64	; 0x40
 80025ca:	d107      	bne.n	80025dc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f7ff fed2 	bl	800237e <HAL_I2C_MemTxCpltCallback>
}
 80025da:	e006      	b.n	80025ea <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	f7ff fe8a 	bl	80022fe <HAL_I2C_MasterTxCpltCallback>
}
 80025ea:	bf00      	nop
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}

080025f2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80025f2:	b580      	push	{r7, lr}
 80025f4:	b084      	sub	sp, #16
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002600:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002606:	2b00      	cmp	r3, #0
 8002608:	d11d      	bne.n	8002646 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800260e:	2b01      	cmp	r3, #1
 8002610:	d10b      	bne.n	800262a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	b2da      	uxtb	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002628:	e077      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800262e:	b29b      	uxth	r3, r3
 8002630:	121b      	asrs	r3, r3, #8
 8002632:	b2da      	uxtb	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002644:	e069      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	2b01      	cmp	r3, #1
 800264c:	d10b      	bne.n	8002666 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002652:	b2da      	uxtb	r2, r3
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800265e:	1c5a      	adds	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002664:	e059      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800266a:	2b02      	cmp	r3, #2
 800266c:	d152      	bne.n	8002714 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800266e:	7bfb      	ldrb	r3, [r7, #15]
 8002670:	2b22      	cmp	r3, #34	; 0x22
 8002672:	d10d      	bne.n	8002690 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	681a      	ldr	r2, [r3, #0]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002682:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800268e:	e044      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002694:	b29b      	uxth	r3, r3
 8002696:	2b00      	cmp	r3, #0
 8002698:	d015      	beq.n	80026c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	2b21      	cmp	r3, #33	; 0x21
 800269e:	d112      	bne.n	80026c6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	781a      	ldrb	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	1c5a      	adds	r2, r3, #1
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	3b01      	subs	r3, #1
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80026c4:	e029      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d124      	bne.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b21      	cmp	r3, #33	; 0x21
 80026d4:	d121      	bne.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80026e4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681a      	ldr	r2, [r3, #0]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	f7ff fe36 	bl	800237e <HAL_I2C_MemTxCpltCallback>
}
 8002712:	e002      	b.n	800271a <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f7ff fbeb 	bl	8001ef0 <I2C_Flush_DR>
}
 800271a:	bf00      	nop
 800271c:	3710      	adds	r7, #16
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b084      	sub	sp, #16
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b22      	cmp	r3, #34	; 0x22
 8002734:	f040 80b9 	bne.w	80028aa <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d921      	bls.n	8002790 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002768:	b29b      	uxth	r3, r3
 800276a:	3b01      	subs	r3, #1
 800276c:	b29a      	uxth	r2, r3
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002776:	b29b      	uxth	r3, r3
 8002778:	2b03      	cmp	r3, #3
 800277a:	f040 8096 	bne.w	80028aa <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800278c:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800278e:	e08c      	b.n	80028aa <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	2b02      	cmp	r3, #2
 8002796:	d07f      	beq.n	8002898 <I2C_MasterReceive_RXNE+0x176>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d002      	beq.n	80027a4 <I2C_MasterReceive_RXNE+0x82>
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d179      	bne.n	8002898 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f001 f83f 	bl	8003828 <I2C_WaitOnSTOPRequestThroughIT>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d14c      	bne.n	800284a <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027be:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	685a      	ldr	r2, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80027ce:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691a      	ldr	r2, [r3, #16]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e2:	1c5a      	adds	r2, r3, #1
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2220      	movs	r2, #32
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b40      	cmp	r3, #64	; 0x40
 8002808:	d10a      	bne.n	8002820 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7ff fdba 	bl	8002392 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800281e:	e044      	b.n	80028aa <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2200      	movs	r2, #0
 8002824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2b08      	cmp	r3, #8
 800282c:	d002      	beq.n	8002834 <I2C_MasterReceive_RXNE+0x112>
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b20      	cmp	r3, #32
 8002832:	d103      	bne.n	800283c <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
 800283a:	e002      	b.n	8002842 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2212      	movs	r2, #18
 8002840:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7ff fd65 	bl	8002312 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002848:	e02f      	b.n	80028aa <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002858:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691a      	ldr	r2, [r3, #16]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	b2d2      	uxtb	r2, r2
 8002866:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800286c:	1c5a      	adds	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002876:	b29b      	uxth	r3, r3
 8002878:	3b01      	subs	r3, #1
 800287a:	b29a      	uxth	r2, r3
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2220      	movs	r2, #32
 8002884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f7ff fd88 	bl	80023a6 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002896:	e008      	b.n	80028aa <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	685a      	ldr	r2, [r3, #4]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a6:	605a      	str	r2, [r3, #4]
}
 80028a8:	e7ff      	b.n	80028aa <I2C_MasterReceive_RXNE+0x188>
 80028aa:	bf00      	nop
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b084      	sub	sp, #16
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028c4:	b29b      	uxth	r3, r3
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d11b      	bne.n	8002902 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	685a      	ldr	r2, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	691a      	ldr	r2, [r3, #16]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	b2d2      	uxtb	r2, r2
 80028e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002900:	e0c8      	b.n	8002a94 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2b03      	cmp	r3, #3
 800290a:	d129      	bne.n	8002960 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	685a      	ldr	r2, [r3, #4]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800291a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b04      	cmp	r3, #4
 8002920:	d00a      	beq.n	8002938 <I2C_MasterReceive_BTF+0x86>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2b02      	cmp	r3, #2
 8002926:	d007      	beq.n	8002938 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002936:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	691a      	ldr	r2, [r3, #16]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002942:	b2d2      	uxtb	r2, r2
 8002944:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294a:	1c5a      	adds	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	3b01      	subs	r3, #1
 8002958:	b29a      	uxth	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800295e:	e099      	b.n	8002a94 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29b      	uxth	r3, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	f040 8081 	bne.w	8002a6e <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b01      	cmp	r3, #1
 8002970:	d002      	beq.n	8002978 <I2C_MasterReceive_BTF+0xc6>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2b10      	cmp	r3, #16
 8002976:	d108      	bne.n	800298a <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	e019      	b.n	80029be <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2b04      	cmp	r3, #4
 800298e:	d002      	beq.n	8002996 <I2C_MasterReceive_BTF+0xe4>
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2b02      	cmp	r3, #2
 8002994:	d108      	bne.n	80029a8 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	e00a      	b.n	80029be <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d007      	beq.n	80029be <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029bc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691a      	ldr	r2, [r3, #16]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	b2d2      	uxtb	r2, r2
 80029ca:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	1c5a      	adds	r2, r3, #1
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3b01      	subs	r3, #1
 80029de:	b29a      	uxth	r2, r3
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691a      	ldr	r2, [r3, #16]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	3b01      	subs	r3, #1
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002a18:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2220      	movs	r2, #32
 8002a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b40      	cmp	r3, #64	; 0x40
 8002a2c:	d10a      	bne.n	8002a44 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002a3c:	6878      	ldr	r0, [r7, #4]
 8002a3e:	f7ff fca8 	bl	8002392 <HAL_I2C_MemRxCpltCallback>
}
 8002a42:	e027      	b.n	8002a94 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b08      	cmp	r3, #8
 8002a50:	d002      	beq.n	8002a58 <I2C_MasterReceive_BTF+0x1a6>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2b20      	cmp	r3, #32
 8002a56:	d103      	bne.n	8002a60 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8002a5e:	e002      	b.n	8002a66 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2212      	movs	r2, #18
 8002a64:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f7ff fc53 	bl	8002312 <HAL_I2C_MasterRxCpltCallback>
}
 8002a6c:	e012      	b.n	8002a94 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691a      	ldr	r2, [r3, #16]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	b2d2      	uxtb	r2, r2
 8002a7a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a80:	1c5a      	adds	r2, r3, #1
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a94:	bf00      	nop
 8002a96:	3710      	adds	r7, #16
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	bd80      	pop	{r7, pc}

08002a9c <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	2b40      	cmp	r3, #64	; 0x40
 8002aae:	d117      	bne.n	8002ae0 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d109      	bne.n	8002acc <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ac8:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002aca:	e067      	b.n	8002b9c <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	f043 0301 	orr.w	r3, r3, #1
 8002ad6:	b2da      	uxtb	r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	611a      	str	r2, [r3, #16]
}
 8002ade:	e05d      	b.n	8002b9c <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	691b      	ldr	r3, [r3, #16]
 8002ae4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ae8:	d133      	bne.n	8002b52 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b21      	cmp	r3, #33	; 0x21
 8002af4:	d109      	bne.n	8002b0a <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afa:	b2db      	uxtb	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b06:	611a      	str	r2, [r3, #16]
 8002b08:	e008      	b.n	8002b1c <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	f043 0301 	orr.w	r3, r3, #1
 8002b14:	b2da      	uxtb	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d004      	beq.n	8002b2e <I2C_Master_SB+0x92>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d108      	bne.n	8002b40 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d032      	beq.n	8002b9c <I2C_Master_SB+0x100>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d02d      	beq.n	8002b9c <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b4e:	605a      	str	r2, [r3, #4]
}
 8002b50:	e024      	b.n	8002b9c <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10e      	bne.n	8002b78 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	11db      	asrs	r3, r3, #7
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	f003 0306 	and.w	r3, r3, #6
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	f063 030f 	orn	r3, r3, #15
 8002b6e:	b2da      	uxtb	r2, r3
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	611a      	str	r2, [r3, #16]
}
 8002b76:	e011      	b.n	8002b9c <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10d      	bne.n	8002b9c <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	11db      	asrs	r3, r3, #7
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f003 0306 	and.w	r3, r3, #6
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	f063 030e 	orn	r3, r3, #14
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d004      	beq.n	8002bce <I2C_Master_ADD10+0x26>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d108      	bne.n	8002be0 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00c      	beq.n	8002bf0 <I2C_Master_ADD10+0x48>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	685a      	ldr	r2, [r3, #4]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bee:	605a      	str	r2, [r3, #4]
  }
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b091      	sub	sp, #68	; 0x44
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c0a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	2b22      	cmp	r3, #34	; 0x22
 8002c24:	f040 8169 	bne.w	8002efa <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d10f      	bne.n	8002c50 <I2C_Master_ADDR+0x54>
 8002c30:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002c34:	2b40      	cmp	r3, #64	; 0x40
 8002c36:	d10b      	bne.n	8002c50 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c38:	2300      	movs	r3, #0
 8002c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	633b      	str	r3, [r7, #48]	; 0x30
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	699b      	ldr	r3, [r3, #24]
 8002c4a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4e:	e160      	b.n	8002f12 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11d      	bne.n	8002c94 <I2C_Master_ADDR+0x98>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002c60:	d118      	bne.n	8002c94 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c62:	2300      	movs	r3, #0
 8002c64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	695b      	ldr	r3, [r3, #20]
 8002c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	699b      	ldr	r3, [r3, #24]
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c86:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	1c5a      	adds	r2, r3, #1
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	651a      	str	r2, [r3, #80]	; 0x50
 8002c92:	e13e      	b.n	8002f12 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d113      	bne.n	8002cc6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699b      	ldr	r3, [r3, #24]
 8002cb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cb2:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	e115      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	f040 808a 	bne.w	8002de6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002cd8:	d137      	bne.n	8002d4a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ce8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cf8:	d113      	bne.n	8002d22 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d08:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	627b      	str	r3, [r7, #36]	; 0x24
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	e0e7      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	623b      	str	r3, [r7, #32]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	623b      	str	r3, [r7, #32]
 8002d36:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	681a      	ldr	r2, [r3, #0]
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d46:	601a      	str	r2, [r3, #0]
 8002d48:	e0d3      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8002d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4c:	2b08      	cmp	r3, #8
 8002d4e:	d02e      	beq.n	8002dae <I2C_Master_ADDR+0x1b2>
 8002d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d02b      	beq.n	8002dae <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d58:	2b12      	cmp	r3, #18
 8002d5a:	d102      	bne.n	8002d62 <I2C_Master_ADDR+0x166>
 8002d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d125      	bne.n	8002dae <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d00e      	beq.n	8002d86 <I2C_Master_ADDR+0x18a>
 8002d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d00b      	beq.n	8002d86 <I2C_Master_ADDR+0x18a>
 8002d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d70:	2b10      	cmp	r3, #16
 8002d72:	d008      	beq.n	8002d86 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	e007      	b.n	8002d96 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]
 8002dac:	e0a1      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dbc:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	61bb      	str	r3, [r7, #24]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	695b      	ldr	r3, [r3, #20]
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	699b      	ldr	r3, [r3, #24]
 8002dd0:	61bb      	str	r3, [r7, #24]
 8002dd2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002de2:	601a      	str	r2, [r3, #0]
 8002de4:	e085      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d14d      	bne.n	8002e8c <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df2:	2b04      	cmp	r3, #4
 8002df4:	d016      	beq.n	8002e24 <I2C_Master_ADDR+0x228>
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d013      	beq.n	8002e24 <I2C_Master_ADDR+0x228>
 8002dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dfe:	2b10      	cmp	r3, #16
 8002e00:	d010      	beq.n	8002e24 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e10:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	e007      	b.n	8002e34 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681a      	ldr	r2, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e32:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e42:	d117      	bne.n	8002e74 <I2C_Master_ADDR+0x278>
 8002e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e46:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e4a:	d00b      	beq.n	8002e64 <I2C_Master_ADDR+0x268>
 8002e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d008      	beq.n	8002e64 <I2C_Master_ADDR+0x268>
 8002e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d005      	beq.n	8002e64 <I2C_Master_ADDR+0x268>
 8002e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e5a:	2b10      	cmp	r3, #16
 8002e5c:	d002      	beq.n	8002e64 <I2C_Master_ADDR+0x268>
 8002e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d107      	bne.n	8002e74 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	685a      	ldr	r2, [r3, #4]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002e72:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	617b      	str	r3, [r7, #20]
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	e032      	b.n	8002ef2 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e9a:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eaa:	d117      	bne.n	8002edc <I2C_Master_ADDR+0x2e0>
 8002eac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002eb2:	d00b      	beq.n	8002ecc <I2C_Master_ADDR+0x2d0>
 8002eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d008      	beq.n	8002ecc <I2C_Master_ADDR+0x2d0>
 8002eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d005      	beq.n	8002ecc <I2C_Master_ADDR+0x2d0>
 8002ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec2:	2b10      	cmp	r3, #16
 8002ec4:	d002      	beq.n	8002ecc <I2C_Master_ADDR+0x2d0>
 8002ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec8:	2b20      	cmp	r3, #32
 8002eca:	d107      	bne.n	8002edc <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002eda:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002edc:	2300      	movs	r3, #0
 8002ede:	613b      	str	r3, [r7, #16]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	613b      	str	r3, [r7, #16]
 8002ef0:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8002ef8:	e00b      	b.n	8002f12 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	695b      	ldr	r3, [r3, #20]
 8002f04:	60fb      	str	r3, [r7, #12]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	60fb      	str	r3, [r7, #12]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
}
 8002f10:	e7ff      	b.n	8002f12 <I2C_Master_ADDR+0x316>
 8002f12:	bf00      	nop
 8002f14:	3744      	adds	r7, #68	; 0x44
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f2c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d02b      	beq.n	8002f90 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	1c5a      	adds	r2, r3, #1
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d114      	bne.n	8002f90 <I2C_SlaveTransmit_TXE+0x72>
 8002f66:	7bfb      	ldrb	r3, [r7, #15]
 8002f68:	2b29      	cmp	r3, #41	; 0x29
 8002f6a:	d111      	bne.n	8002f90 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2221      	movs	r2, #33	; 0x21
 8002f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2228      	movs	r2, #40	; 0x28
 8002f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f7ff f9cb 	bl	8002326 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002f90:	bf00      	nop
 8002f92:	3710      	adds	r7, #16
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d011      	beq.n	8002fce <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	781a      	ldrb	r2, [r3, #0]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	1c5a      	adds	r2, r3, #1
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002fce:	bf00      	nop
 8002fd0:	370c      	adds	r7, #12
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr

08002fda <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002fda:	b580      	push	{r7, lr}
 8002fdc:	b084      	sub	sp, #16
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d02c      	beq.n	800304e <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003010:	b29b      	uxth	r3, r3
 8003012:	3b01      	subs	r3, #1
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	d114      	bne.n	800304e <I2C_SlaveReceive_RXNE+0x74>
 8003024:	7bfb      	ldrb	r3, [r7, #15]
 8003026:	2b2a      	cmp	r3, #42	; 0x2a
 8003028:	d111      	bne.n	800304e <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685a      	ldr	r2, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003038:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2222      	movs	r2, #34	; 0x22
 800303e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2228      	movs	r2, #40	; 0x28
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f7ff f976 	bl	800233a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800304e:	bf00      	nop
 8003050:	3710      	adds	r7, #16
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003056:	b480      	push	{r7}
 8003058:	b083      	sub	sp, #12
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003062:	b29b      	uxth	r3, r3
 8003064:	2b00      	cmp	r3, #0
 8003066:	d012      	beq.n	800308e <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003072:	b2d2      	uxtb	r2, r2
 8003074:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800307a:	1c5a      	adds	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003084:	b29b      	uxth	r3, r3
 8003086:	3b01      	subs	r3, #1
 8003088:	b29a      	uxth	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr

0800309a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b084      	sub	sp, #16
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80030a4:	2300      	movs	r3, #0
 80030a6:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b4:	2b28      	cmp	r3, #40	; 0x28
 80030b6:	d125      	bne.n	8003104 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	685a      	ldr	r2, [r3, #4]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030c6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d101      	bne.n	80030d6 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80030d2:	2301      	movs	r3, #1
 80030d4:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	81bb      	strh	r3, [r7, #12]
 80030e6:	e002      	b.n	80030ee <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80030f6:	89ba      	ldrh	r2, [r7, #12]
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
 80030fa:	4619      	mov	r1, r3
 80030fc:	6878      	ldr	r0, [r7, #4]
 80030fe:	f7ff f926 	bl	800234e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003102:	e00e      	b.n	8003122 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003104:	2300      	movs	r3, #0
 8003106:	60bb      	str	r3, [r7, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	60bb      	str	r3, [r7, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	699b      	ldr	r3, [r3, #24]
 8003116:	60bb      	str	r3, [r7, #8]
 8003118:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8003122:	bf00      	nop
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800313a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685a      	ldr	r2, [r3, #4]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800314a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800314c:	2300      	movs	r3, #0
 800314e:	60bb      	str	r3, [r7, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	60bb      	str	r3, [r7, #8]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0201 	orr.w	r2, r2, #1
 8003166:	601a      	str	r2, [r3, #0]
 8003168:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003178:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003184:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003188:	d172      	bne.n	8003270 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800318a:	7bfb      	ldrb	r3, [r7, #15]
 800318c:	2b22      	cmp	r3, #34	; 0x22
 800318e:	d002      	beq.n	8003196 <I2C_Slave_STOPF+0x6a>
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b2a      	cmp	r3, #42	; 0x2a
 8003194:	d135      	bne.n	8003202 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	b29a      	uxth	r2, r3
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d005      	beq.n	80031ba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0204 	orr.w	r2, r3, #4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fe f84d 	bl	800126e <HAL_DMA_GetState>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b01      	cmp	r3, #1
 80031d8:	d049      	beq.n	800326e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031de:	4a69      	ldr	r2, [pc, #420]	; (8003384 <I2C_Slave_STOPF+0x258>)
 80031e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe f81f 	bl	800122a <HAL_DMA_Abort_IT>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d03d      	beq.n	800326e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031fc:	4610      	mov	r0, r2
 80031fe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003200:	e035      	b.n	800326e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	b29a      	uxth	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d005      	beq.n	8003226 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321e:	f043 0204 	orr.w	r2, r3, #4
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003234:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800323a:	4618      	mov	r0, r3
 800323c:	f7fe f817 	bl	800126e <HAL_DMA_GetState>
 8003240:	4603      	mov	r3, r0
 8003242:	2b01      	cmp	r3, #1
 8003244:	d014      	beq.n	8003270 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	4a4e      	ldr	r2, [pc, #312]	; (8003384 <I2C_Slave_STOPF+0x258>)
 800324c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd ffe9 	bl	800122a <HAL_DMA_Abort_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d008      	beq.n	8003270 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003262:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003268:	4610      	mov	r0, r2
 800326a:	4798      	blx	r3
 800326c:	e000      	b.n	8003270 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800326e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003274:	b29b      	uxth	r3, r3
 8003276:	2b00      	cmp	r3, #0
 8003278:	d03e      	beq.n	80032f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695b      	ldr	r3, [r3, #20]
 8003280:	f003 0304 	and.w	r3, r3, #4
 8003284:	2b04      	cmp	r3, #4
 8003286:	d112      	bne.n	80032ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	691a      	ldr	r2, [r3, #16]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329a:	1c5a      	adds	r2, r3, #1
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	3b01      	subs	r3, #1
 80032a8:	b29a      	uxth	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	695b      	ldr	r3, [r3, #20]
 80032b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b8:	2b40      	cmp	r3, #64	; 0x40
 80032ba:	d112      	bne.n	80032e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	691a      	ldr	r2, [r3, #16]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	1c5a      	adds	r2, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032d8:	b29b      	uxth	r3, r3
 80032da:	3b01      	subs	r3, #1
 80032dc:	b29a      	uxth	r2, r3
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f0:	f043 0204 	orr.w	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d003      	beq.n	8003308 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f8b7 	bl	8003474 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8003306:	e039      	b.n	800337c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003308:	7bfb      	ldrb	r3, [r7, #15]
 800330a:	2b2a      	cmp	r3, #42	; 0x2a
 800330c:	d109      	bne.n	8003322 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2228      	movs	r2, #40	; 0x28
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7ff f80c 	bl	800233a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003328:	b2db      	uxtb	r3, r3
 800332a:	2b28      	cmp	r3, #40	; 0x28
 800332c:	d111      	bne.n	8003352 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a15      	ldr	r2, [pc, #84]	; (8003388 <I2C_Slave_STOPF+0x25c>)
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f7ff f80d 	bl	800236a <HAL_I2C_ListenCpltCallback>
}
 8003350:	e014      	b.n	800337c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	2b22      	cmp	r3, #34	; 0x22
 8003358:	d002      	beq.n	8003360 <I2C_Slave_STOPF+0x234>
 800335a:	7bfb      	ldrb	r3, [r7, #15]
 800335c:	2b22      	cmp	r3, #34	; 0x22
 800335e:	d10d      	bne.n	800337c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2220      	movs	r2, #32
 800336a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003376:	6878      	ldr	r0, [r7, #4]
 8003378:	f7fe ffdf 	bl	800233a <HAL_I2C_SlaveRxCpltCallback>
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	080036d9 	.word	0x080036d9
 8003388:	ffff0000 	.word	0xffff0000

0800338c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800339a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	2b08      	cmp	r3, #8
 80033a6:	d002      	beq.n	80033ae <I2C_Slave_AF+0x22>
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	2b20      	cmp	r3, #32
 80033ac:	d129      	bne.n	8003402 <I2C_Slave_AF+0x76>
 80033ae:	7bfb      	ldrb	r3, [r7, #15]
 80033b0:	2b28      	cmp	r3, #40	; 0x28
 80033b2:	d126      	bne.n	8003402 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a2e      	ldr	r2, [pc, #184]	; (8003470 <I2C_Slave_AF+0xe4>)
 80033b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	685a      	ldr	r2, [r3, #4]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80033c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2200      	movs	r2, #0
 80033e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2220      	movs	r2, #32
 80033ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f7fe ffb5 	bl	800236a <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003400:	e031      	b.n	8003466 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b21      	cmp	r3, #33	; 0x21
 8003406:	d129      	bne.n	800345c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a19      	ldr	r2, [pc, #100]	; (8003470 <I2C_Slave_AF+0xe4>)
 800340c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2221      	movs	r2, #33	; 0x21
 8003412:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003432:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800343c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681a      	ldr	r2, [r3, #0]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f7fe fd4e 	bl	8001ef0 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7fe ff66 	bl	8002326 <HAL_I2C_SlaveTxCpltCallback>
}
 800345a:	e004      	b.n	8003466 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003464:	615a      	str	r2, [r3, #20]
}
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	ffff0000 	.word	0xffff0000

08003474 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800348a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800348c:	7bbb      	ldrb	r3, [r7, #14]
 800348e:	2b10      	cmp	r3, #16
 8003490:	d002      	beq.n	8003498 <I2C_ITError+0x24>
 8003492:	7bbb      	ldrb	r3, [r7, #14]
 8003494:	2b40      	cmp	r3, #64	; 0x40
 8003496:	d10a      	bne.n	80034ae <I2C_ITError+0x3a>
 8003498:	7bfb      	ldrb	r3, [r7, #15]
 800349a:	2b22      	cmp	r3, #34	; 0x22
 800349c:	d107      	bne.n	80034ae <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80034ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034ae:	7bfb      	ldrb	r3, [r7, #15]
 80034b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034b4:	2b28      	cmp	r3, #40	; 0x28
 80034b6:	d107      	bne.n	80034c8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2200      	movs	r2, #0
 80034bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2228      	movs	r2, #40	; 0x28
 80034c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80034c6:	e015      	b.n	80034f4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034d6:	d00a      	beq.n	80034ee <I2C_ITError+0x7a>
 80034d8:	7bfb      	ldrb	r3, [r7, #15]
 80034da:	2b60      	cmp	r3, #96	; 0x60
 80034dc:	d007      	beq.n	80034ee <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2220      	movs	r2, #32
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003502:	d162      	bne.n	80035ca <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	685a      	ldr	r2, [r3, #4]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003512:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003518:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b01      	cmp	r3, #1
 8003520:	d020      	beq.n	8003564 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003526:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <I2C_ITError+0x25c>)
 8003528:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800352e:	4618      	mov	r0, r3
 8003530:	f7fd fe7b 	bl	800122a <HAL_DMA_Abort_IT>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8089 	beq.w	800364e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f022 0201 	bic.w	r2, r2, #1
 800354a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800355e:	4610      	mov	r0, r2
 8003560:	4798      	blx	r3
 8003562:	e074      	b.n	800364e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003568:	4a59      	ldr	r2, [pc, #356]	; (80036d0 <I2C_ITError+0x25c>)
 800356a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003570:	4618      	mov	r0, r3
 8003572:	f7fd fe5a 	bl	800122a <HAL_DMA_Abort_IT>
 8003576:	4603      	mov	r3, r0
 8003578:	2b00      	cmp	r3, #0
 800357a:	d068      	beq.n	800364e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003586:	2b40      	cmp	r3, #64	; 0x40
 8003588:	d10b      	bne.n	80035a2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003594:	b2d2      	uxtb	r2, r2
 8003596:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	1c5a      	adds	r2, r3, #1
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 0201 	bic.w	r2, r2, #1
 80035b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035c4:	4610      	mov	r0, r2
 80035c6:	4798      	blx	r3
 80035c8:	e041      	b.n	800364e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	2b60      	cmp	r3, #96	; 0x60
 80035d4:	d125      	bne.n	8003622 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2220      	movs	r2, #32
 80035da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2200      	movs	r2, #0
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d10b      	bne.n	800360a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	691a      	ldr	r2, [r3, #16]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035fc:	b2d2      	uxtb	r2, r2
 80035fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003604:	1c5a      	adds	r2, r3, #1
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0201 	bic.w	r2, r2, #1
 8003618:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800361a:	6878      	ldr	r0, [r7, #4]
 800361c:	f7fe fecd 	bl	80023ba <HAL_I2C_AbortCpltCallback>
 8003620:	e015      	b.n	800364e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	695b      	ldr	r3, [r3, #20]
 8003628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362c:	2b40      	cmp	r3, #64	; 0x40
 800362e:	d10b      	bne.n	8003648 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363a:	b2d2      	uxtb	r2, r2
 800363c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	1c5a      	adds	r2, r3, #1
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	f7fe feac 	bl	80023a6 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003652:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	2b00      	cmp	r3, #0
 800365c:	d10e      	bne.n	800367c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003664:	2b00      	cmp	r3, #0
 8003666:	d109      	bne.n	800367c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800366e:	2b00      	cmp	r3, #0
 8003670:	d104      	bne.n	800367c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003678:	2b00      	cmp	r3, #0
 800367a:	d007      	beq.n	800368c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	685a      	ldr	r2, [r3, #4]
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800368a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b04      	cmp	r3, #4
 800369e:	d113      	bne.n	80036c8 <I2C_ITError+0x254>
 80036a0:	7bfb      	ldrb	r3, [r7, #15]
 80036a2:	2b28      	cmp	r3, #40	; 0x28
 80036a4:	d110      	bne.n	80036c8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <I2C_ITError+0x260>)
 80036aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2200      	movs	r2, #0
 80036b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2200      	movs	r2, #0
 80036be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f7fe fe51 	bl	800236a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	080036d9 	.word	0x080036d9
 80036d4:	ffff0000 	.word	0xffff0000

080036d8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b086      	sub	sp, #24
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80036f2:	4b4b      	ldr	r3, [pc, #300]	; (8003820 <I2C_DMAAbort+0x148>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	08db      	lsrs	r3, r3, #3
 80036f8:	4a4a      	ldr	r2, [pc, #296]	; (8003824 <I2C_DMAAbort+0x14c>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0a1a      	lsrs	r2, r3, #8
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	00da      	lsls	r2, r3, #3
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003712:	697b      	ldr	r3, [r7, #20]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0220 	orr.w	r2, r3, #32
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800371e:	e00a      	b.n	8003736 <I2C_DMAAbort+0x5e>
    }
    count--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3b01      	subs	r3, #1
 8003724:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003726:	697b      	ldr	r3, [r7, #20]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003734:	d0ea      	beq.n	800370c <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003742:	2200      	movs	r2, #0
 8003744:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003752:	2200      	movs	r2, #0
 8003754:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003764:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003778:	2200      	movs	r2, #0
 800377a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	2200      	movs	r2, #0
 800378a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b60      	cmp	r3, #96	; 0x60
 80037a6:	d10e      	bne.n	80037c6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2220      	movs	r2, #32
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	2200      	movs	r2, #0
 80037bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80037be:	6978      	ldr	r0, [r7, #20]
 80037c0:	f7fe fdfb 	bl	80023ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80037c4:	e027      	b.n	8003816 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c6:	7cfb      	ldrb	r3, [r7, #19]
 80037c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037cc:	2b28      	cmp	r3, #40	; 0x28
 80037ce:	d117      	bne.n	8003800 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037ee:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	2200      	movs	r2, #0
 80037f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	2228      	movs	r2, #40	; 0x28
 80037fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80037fe:	e007      	b.n	8003810 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	2220      	movs	r2, #32
 8003804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8003810:	6978      	ldr	r0, [r7, #20]
 8003812:	f7fe fdc8 	bl	80023a6 <HAL_I2C_ErrorCallback>
}
 8003816:	bf00      	nop
 8003818:	3718      	adds	r7, #24
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000
 8003824:	14f8b589 	.word	0x14f8b589

08003828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003830:	2300      	movs	r3, #0
 8003832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003834:	4b13      	ldr	r3, [pc, #76]	; (8003884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	08db      	lsrs	r3, r3, #3
 800383a:	4a13      	ldr	r2, [pc, #76]	; (8003888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	0a1a      	lsrs	r2, r3, #8
 8003842:	4613      	mov	r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4413      	add	r3, r2
 8003848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	3b01      	subs	r3, #1
 800384e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d107      	bne.n	8003866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e008      	b.n	8003878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003874:	d0e9      	beq.n	800384a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3714      	adds	r7, #20
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr
 8003884:	20000000 	.word	0x20000000
 8003888:	14f8b589 	.word	0x14f8b589

0800388c <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003898:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800389c:	d103      	bne.n	80038a6 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2201      	movs	r2, #1
 80038a2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80038a4:	e007      	b.n	80038b6 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038aa:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80038ae:	d102      	bne.n	80038b6 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2208      	movs	r2, #8
 80038b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80038b6:	bf00      	nop
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr

080038c2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b20      	cmp	r3, #32
 80038d6:	d129      	bne.n	800392c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2224      	movs	r2, #36	; 0x24
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0201 	bic.w	r2, r2, #1
 80038ee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f022 0210 	bic.w	r2, r2, #16
 80038fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2220      	movs	r2, #32
 8003924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
 800392a:	e000      	b.n	800392e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800392c:	2302      	movs	r3, #2
  }
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr

0800393a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800393a:	b480      	push	{r7}
 800393c:	b085      	sub	sp, #20
 800393e:	af00      	add	r7, sp, #0
 8003940:	6078      	str	r0, [r7, #4]
 8003942:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003944:	2300      	movs	r3, #0
 8003946:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800394e:	b2db      	uxtb	r3, r3
 8003950:	2b20      	cmp	r3, #32
 8003952:	d12a      	bne.n	80039aa <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2224      	movs	r2, #36	; 0x24
 8003958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f022 0201 	bic.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003972:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003974:	89fb      	ldrh	r3, [r7, #14]
 8003976:	f023 030f 	bic.w	r3, r3, #15
 800397a:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	b29a      	uxth	r2, r3
 8003980:	89fb      	ldrh	r3, [r7, #14]
 8003982:	4313      	orrs	r3, r2
 8003984:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	89fa      	ldrh	r2, [r7, #14]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	681a      	ldr	r2, [r3, #0]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f042 0201 	orr.w	r2, r2, #1
 800399c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039a6:	2300      	movs	r3, #0
 80039a8:	e000      	b.n	80039ac <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80039aa:	2302      	movs	r3, #2
  }
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3714      	adds	r7, #20
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af02      	add	r7, sp, #8
 80039be:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039c6:	2301      	movs	r3, #1
 80039c8:	e101      	b.n	8003bce <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7fd f92b 	bl	8000c40 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2203      	movs	r2, #3
 80039ee:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d102      	bne.n	8003a00 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f001 fd01 	bl	800540c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6818      	ldr	r0, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	7c1a      	ldrb	r2, [r3, #16]
 8003a12:	f88d 2000 	strb.w	r2, [sp]
 8003a16:	3304      	adds	r3, #4
 8003a18:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a1a:	f001 fc93 	bl	8005344 <USB_CoreInit>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d005      	beq.n	8003a30 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2202      	movs	r2, #2
 8003a28:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0ce      	b.n	8003bce <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2100      	movs	r1, #0
 8003a36:	4618      	mov	r0, r3
 8003a38:	f001 fcf9 	bl	800542e <USB_SetCurrentMode>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d005      	beq.n	8003a4e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e0bf      	b.n	8003bce <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
 8003a52:	e04a      	b.n	8003aea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a54:	7bfa      	ldrb	r2, [r7, #15]
 8003a56:	6879      	ldr	r1, [r7, #4]
 8003a58:	4613      	mov	r3, r2
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	440b      	add	r3, r1
 8003a62:	3315      	adds	r3, #21
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a68:	7bfa      	ldrb	r2, [r7, #15]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	4413      	add	r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	3314      	adds	r3, #20
 8003a78:	7bfa      	ldrb	r2, [r7, #15]
 8003a7a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a7c:	7bfa      	ldrb	r2, [r7, #15]
 8003a7e:	7bfb      	ldrb	r3, [r7, #15]
 8003a80:	b298      	uxth	r0, r3
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	4413      	add	r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	332e      	adds	r3, #46	; 0x2e
 8003a90:	4602      	mov	r2, r0
 8003a92:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a94:	7bfa      	ldrb	r2, [r7, #15]
 8003a96:	6879      	ldr	r1, [r7, #4]
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3318      	adds	r3, #24
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003aa8:	7bfa      	ldrb	r2, [r7, #15]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	331c      	adds	r3, #28
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003abc:	7bfa      	ldrb	r2, [r7, #15]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	3320      	adds	r3, #32
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ad0:	7bfa      	ldrb	r2, [r7, #15]
 8003ad2:	6879      	ldr	r1, [r7, #4]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	00db      	lsls	r3, r3, #3
 8003ad8:	4413      	add	r3, r2
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	440b      	add	r3, r1
 8003ade:	3324      	adds	r3, #36	; 0x24
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	3301      	adds	r3, #1
 8003ae8:	73fb      	strb	r3, [r7, #15]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	791b      	ldrb	r3, [r3, #4]
 8003aee:	7bfa      	ldrb	r2, [r7, #15]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d3af      	bcc.n	8003a54 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	73fb      	strb	r3, [r7, #15]
 8003af8:	e044      	b.n	8003b84 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	f203 2355 	addw	r3, r3, #597	; 0x255
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b10:	7bfa      	ldrb	r2, [r7, #15]
 8003b12:	6879      	ldr	r1, [r7, #4]
 8003b14:	4613      	mov	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 7315 	add.w	r3, r3, #596	; 0x254
 8003b22:	7bfa      	ldrb	r2, [r7, #15]
 8003b24:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b26:	7bfa      	ldrb	r2, [r7, #15]
 8003b28:	6879      	ldr	r1, [r7, #4]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b3c:	7bfa      	ldrb	r2, [r7, #15]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	00db      	lsls	r3, r3, #3
 8003b44:	4413      	add	r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b52:	7bfa      	ldrb	r2, [r7, #15]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	00db      	lsls	r3, r3, #3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003b64:	2200      	movs	r2, #0
 8003b66:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b68:	7bfa      	ldrb	r2, [r7, #15]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	00db      	lsls	r3, r3, #3
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b7e:	7bfb      	ldrb	r3, [r7, #15]
 8003b80:	3301      	adds	r3, #1
 8003b82:	73fb      	strb	r3, [r7, #15]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	791b      	ldrb	r3, [r3, #4]
 8003b88:	7bfa      	ldrb	r2, [r7, #15]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d3b5      	bcc.n	8003afa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	7c1a      	ldrb	r2, [r3, #16]
 8003b96:	f88d 2000 	strb.w	r2, [sp]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b9e:	f001 fc93 	bl	80054c8 <USB_DevInit>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d005      	beq.n	8003bb4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2202      	movs	r2, #2
 8003bac:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e00c      	b.n	8003bce <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f001 fe5b 	bl	8005882 <USB_DevDisconnect>

  return HAL_OK;
 8003bcc:	2300      	movs	r3, #0
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	3710      	adds	r7, #16
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
	...

08003bd8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b086      	sub	sp, #24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e267      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d075      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bf6:	4b88      	ldr	r3, [pc, #544]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f003 030c 	and.w	r3, r3, #12
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d00c      	beq.n	8003c1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c02:	4b85      	ldr	r3, [pc, #532]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d112      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c0e:	4b82      	ldr	r3, [pc, #520]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c1a:	d10b      	bne.n	8003c34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c1c:	4b7e      	ldr	r3, [pc, #504]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <HAL_RCC_OscConfig+0x108>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d157      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e242      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c3c:	d106      	bne.n	8003c4c <HAL_RCC_OscConfig+0x74>
 8003c3e:	4b76      	ldr	r3, [pc, #472]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a75      	ldr	r2, [pc, #468]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e01d      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c54:	d10c      	bne.n	8003c70 <HAL_RCC_OscConfig+0x98>
 8003c56:	4b70      	ldr	r3, [pc, #448]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a6f      	ldr	r2, [pc, #444]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c60:	6013      	str	r3, [r2, #0]
 8003c62:	4b6d      	ldr	r3, [pc, #436]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a6c      	ldr	r2, [pc, #432]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00b      	b.n	8003c88 <HAL_RCC_OscConfig+0xb0>
 8003c70:	4b69      	ldr	r3, [pc, #420]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a68      	ldr	r2, [pc, #416]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	6013      	str	r3, [r2, #0]
 8003c7c:	4b66      	ldr	r3, [pc, #408]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a65      	ldr	r2, [pc, #404]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003c82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d013      	beq.n	8003cb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c90:	f7fd f91a 	bl	8000ec8 <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c98:	f7fd f916 	bl	8000ec8 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b64      	cmp	r3, #100	; 0x64
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e207      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003caa:	4b5b      	ldr	r3, [pc, #364]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0xc0>
 8003cb6:	e014      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cb8:	f7fd f906 	bl	8000ec8 <HAL_GetTick>
 8003cbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cbe:	e008      	b.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cc0:	f7fd f902 	bl	8000ec8 <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	2b64      	cmp	r3, #100	; 0x64
 8003ccc:	d901      	bls.n	8003cd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e1f3      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cd2:	4b51      	ldr	r3, [pc, #324]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d1f0      	bne.n	8003cc0 <HAL_RCC_OscConfig+0xe8>
 8003cde:	e000      	b.n	8003ce2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ce0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d063      	beq.n	8003db6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cee:	4b4a      	ldr	r3, [pc, #296]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d00b      	beq.n	8003d12 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cfa:	4b47      	ldr	r3, [pc, #284]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003d02:	2b08      	cmp	r3, #8
 8003d04:	d11c      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b44      	ldr	r3, [pc, #272]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d116      	bne.n	8003d40 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d12:	4b41      	ldr	r3, [pc, #260]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d005      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d001      	beq.n	8003d2a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e1c7      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2a:	4b3b      	ldr	r3, [pc, #236]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	00db      	lsls	r3, r3, #3
 8003d38:	4937      	ldr	r1, [pc, #220]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d3e:	e03a      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d020      	beq.n	8003d8a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d48:	4b34      	ldr	r3, [pc, #208]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d4e:	f7fd f8bb 	bl	8000ec8 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d54:	e008      	b.n	8003d68 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d56:	f7fd f8b7 	bl	8000ec8 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	2b02      	cmp	r3, #2
 8003d62:	d901      	bls.n	8003d68 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d64:	2303      	movs	r3, #3
 8003d66:	e1a8      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d68:	4b2b      	ldr	r3, [pc, #172]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d0f0      	beq.n	8003d56 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d74:	4b28      	ldr	r3, [pc, #160]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	00db      	lsls	r3, r3, #3
 8003d82:	4925      	ldr	r1, [pc, #148]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	600b      	str	r3, [r1, #0]
 8003d88:	e015      	b.n	8003db6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <HAL_RCC_OscConfig+0x244>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d90:	f7fd f89a 	bl	8000ec8 <HAL_GetTick>
 8003d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d98:	f7fd f896 	bl	8000ec8 <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e187      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003daa:	4b1b      	ldr	r3, [pc, #108]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f003 0302 	and.w	r3, r3, #2
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d1f0      	bne.n	8003d98 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d036      	beq.n	8003e30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d016      	beq.n	8003df8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dca:	4b15      	ldr	r3, [pc, #84]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dcc:	2201      	movs	r2, #1
 8003dce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dd0:	f7fd f87a 	bl	8000ec8 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd6:	e008      	b.n	8003dea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dd8:	f7fd f876 	bl	8000ec8 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d901      	bls.n	8003dea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003de6:	2303      	movs	r3, #3
 8003de8:	e167      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dea:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_RCC_OscConfig+0x240>)
 8003dec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dee:	f003 0302 	and.w	r3, r3, #2
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d0f0      	beq.n	8003dd8 <HAL_RCC_OscConfig+0x200>
 8003df6:	e01b      	b.n	8003e30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b09      	ldr	r3, [pc, #36]	; (8003e20 <HAL_RCC_OscConfig+0x248>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dfe:	f7fd f863 	bl	8000ec8 <HAL_GetTick>
 8003e02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e04:	e00e      	b.n	8003e24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e06:	f7fd f85f 	bl	8000ec8 <HAL_GetTick>
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	1ad3      	subs	r3, r2, r3
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d907      	bls.n	8003e24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e14:	2303      	movs	r3, #3
 8003e16:	e150      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8003e18:	40023800 	.word	0x40023800
 8003e1c:	42470000 	.word	0x42470000
 8003e20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e24:	4b88      	ldr	r3, [pc, #544]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e28:	f003 0302 	and.w	r3, r3, #2
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1ea      	bne.n	8003e06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0304 	and.w	r3, r3, #4
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	f000 8097 	beq.w	8003f6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e42:	4b81      	ldr	r3, [pc, #516]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d10f      	bne.n	8003e6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	4b7d      	ldr	r3, [pc, #500]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e56:	4a7c      	ldr	r2, [pc, #496]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e5e:	4b7a      	ldr	r3, [pc, #488]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6e:	4b77      	ldr	r3, [pc, #476]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d118      	bne.n	8003eac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e7a:	4b74      	ldr	r3, [pc, #464]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4a73      	ldr	r2, [pc, #460]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003e80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fd f81f 	bl	8000ec8 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e8e:	f7fd f81b 	bl	8000ec8 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e10c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea0:	4b6a      	ldr	r3, [pc, #424]	; (800404c <HAL_RCC_OscConfig+0x474>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d106      	bne.n	8003ec2 <HAL_RCC_OscConfig+0x2ea>
 8003eb4:	4b64      	ldr	r3, [pc, #400]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb8:	4a63      	ldr	r2, [pc, #396]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eba:	f043 0301 	orr.w	r3, r3, #1
 8003ebe:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec0:	e01c      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	689b      	ldr	r3, [r3, #8]
 8003ec6:	2b05      	cmp	r3, #5
 8003ec8:	d10c      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x30c>
 8003eca:	4b5f      	ldr	r3, [pc, #380]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ece:	4a5e      	ldr	r2, [pc, #376]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed6:	4b5c      	ldr	r3, [pc, #368]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eda:	4a5b      	ldr	r2, [pc, #364]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003edc:	f043 0301 	orr.w	r3, r3, #1
 8003ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee2:	e00b      	b.n	8003efc <HAL_RCC_OscConfig+0x324>
 8003ee4:	4b58      	ldr	r3, [pc, #352]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee8:	4a57      	ldr	r2, [pc, #348]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003eea:	f023 0301 	bic.w	r3, r3, #1
 8003eee:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef0:	4b55      	ldr	r3, [pc, #340]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ef4:	4a54      	ldr	r2, [pc, #336]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003ef6:	f023 0304 	bic.w	r3, r3, #4
 8003efa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d015      	beq.n	8003f30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f04:	f7fc ffe0 	bl	8000ec8 <HAL_GetTick>
 8003f08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f0a:	e00a      	b.n	8003f22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f0c:	f7fc ffdc 	bl	8000ec8 <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d901      	bls.n	8003f22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	e0cb      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f22:	4b49      	ldr	r3, [pc, #292]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d0ee      	beq.n	8003f0c <HAL_RCC_OscConfig+0x334>
 8003f2e:	e014      	b.n	8003f5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f30:	f7fc ffca 	bl	8000ec8 <HAL_GetTick>
 8003f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f36:	e00a      	b.n	8003f4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f38:	f7fc ffc6 	bl	8000ec8 <HAL_GetTick>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	1ad3      	subs	r3, r2, r3
 8003f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e0b5      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f4e:	4b3e      	ldr	r3, [pc, #248]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1ee      	bne.n	8003f38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f5a:	7dfb      	ldrb	r3, [r7, #23]
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d105      	bne.n	8003f6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f60:	4b39      	ldr	r3, [pc, #228]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f64:	4a38      	ldr	r2, [pc, #224]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80a1 	beq.w	80040b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f76:	4b34      	ldr	r3, [pc, #208]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	f003 030c 	and.w	r3, r3, #12
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d05c      	beq.n	800403c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	699b      	ldr	r3, [r3, #24]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d141      	bne.n	800400e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f8a:	4b31      	ldr	r3, [pc, #196]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f90:	f7fc ff9a 	bl	8000ec8 <HAL_GetTick>
 8003f94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f96:	e008      	b.n	8003faa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f98:	f7fc ff96 	bl	8000ec8 <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	693b      	ldr	r3, [r7, #16]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b02      	cmp	r3, #2
 8003fa4:	d901      	bls.n	8003faa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	e087      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003faa:	4b27      	ldr	r3, [pc, #156]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d1f0      	bne.n	8003f98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	69da      	ldr	r2, [r3, #28]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc4:	019b      	lsls	r3, r3, #6
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fcc:	085b      	lsrs	r3, r3, #1
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	041b      	lsls	r3, r3, #16
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd8:	061b      	lsls	r3, r3, #24
 8003fda:	491b      	ldr	r1, [pc, #108]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fe0:	4b1b      	ldr	r3, [pc, #108]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe6:	f7fc ff6f 	bl	8000ec8 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fec:	e008      	b.n	8004000 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fee:	f7fc ff6b 	bl	8000ec8 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d901      	bls.n	8004000 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e05c      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004000:	4b11      	ldr	r3, [pc, #68]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d0f0      	beq.n	8003fee <HAL_RCC_OscConfig+0x416>
 800400c:	e054      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800400e:	4b10      	ldr	r3, [pc, #64]	; (8004050 <HAL_RCC_OscConfig+0x478>)
 8004010:	2200      	movs	r2, #0
 8004012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fc ff58 	bl	8000ec8 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800401c:	f7fc ff54 	bl	8000ec8 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e045      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800402e:	4b06      	ldr	r3, [pc, #24]	; (8004048 <HAL_RCC_OscConfig+0x470>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0x444>
 800403a:	e03d      	b.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d107      	bne.n	8004054 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e038      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004054:	4b1b      	ldr	r3, [pc, #108]	; (80040c4 <HAL_RCC_OscConfig+0x4ec>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	2b01      	cmp	r3, #1
 8004060:	d028      	beq.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800406c:	429a      	cmp	r2, r3
 800406e:	d121      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d11a      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004084:	4013      	ands	r3, r2
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800408a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800408c:	4293      	cmp	r3, r2
 800408e:	d111      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800409a:	085b      	lsrs	r3, r3, #1
 800409c:	3b01      	subs	r3, #1
 800409e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d107      	bne.n	80040b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d001      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e000      	b.n	80040ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3718      	adds	r7, #24
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	40023800 	.word	0x40023800

080040c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e0cc      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040dc:	4b68      	ldr	r3, [pc, #416]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 030f 	and.w	r3, r3, #15
 80040e4:	683a      	ldr	r2, [r7, #0]
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d90c      	bls.n	8004104 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ea:	4b65      	ldr	r3, [pc, #404]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040ec:	683a      	ldr	r2, [r7, #0]
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f2:	4b63      	ldr	r3, [pc, #396]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	683a      	ldr	r2, [r7, #0]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d001      	beq.n	8004104 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e0b8      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d020      	beq.n	8004152 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0304 	and.w	r3, r3, #4
 8004118:	2b00      	cmp	r3, #0
 800411a:	d005      	beq.n	8004128 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800411c:	4b59      	ldr	r3, [pc, #356]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	4a58      	ldr	r2, [pc, #352]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004126:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d005      	beq.n	8004140 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004134:	4b53      	ldr	r3, [pc, #332]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	4a52      	ldr	r2, [pc, #328]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800413a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800413e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004140:	4b50      	ldr	r3, [pc, #320]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	689b      	ldr	r3, [r3, #8]
 8004144:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	494d      	ldr	r1, [pc, #308]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	4313      	orrs	r3, r2
 8004150:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	d044      	beq.n	80041e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	2b01      	cmp	r3, #1
 8004164:	d107      	bne.n	8004176 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004166:	4b47      	ldr	r3, [pc, #284]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d119      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e07f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	2b02      	cmp	r3, #2
 800417c:	d003      	beq.n	8004186 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004182:	2b03      	cmp	r3, #3
 8004184:	d107      	bne.n	8004196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004186:	4b3f      	ldr	r3, [pc, #252]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d109      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e06f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004196:	4b3b      	ldr	r3, [pc, #236]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0302 	and.w	r3, r3, #2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	e067      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041a6:	4b37      	ldr	r3, [pc, #220]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f023 0203 	bic.w	r2, r3, #3
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	4934      	ldr	r1, [pc, #208]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041b8:	f7fc fe86 	bl	8000ec8 <HAL_GetTick>
 80041bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041be:	e00a      	b.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041c0:	f7fc fe82 	bl	8000ec8 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e04f      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 020c 	and.w	r2, r3, #12
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d1eb      	bne.n	80041c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041e8:	4b25      	ldr	r3, [pc, #148]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 030f 	and.w	r3, r3, #15
 80041f0:	683a      	ldr	r2, [r7, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d20c      	bcs.n	8004210 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041f6:	4b22      	ldr	r3, [pc, #136]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 80041f8:	683a      	ldr	r2, [r7, #0]
 80041fa:	b2d2      	uxtb	r2, r2
 80041fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041fe:	4b20      	ldr	r3, [pc, #128]	; (8004280 <HAL_RCC_ClockConfig+0x1b8>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 030f 	and.w	r3, r3, #15
 8004206:	683a      	ldr	r2, [r7, #0]
 8004208:	429a      	cmp	r2, r3
 800420a:	d001      	beq.n	8004210 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e032      	b.n	8004276 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0304 	and.w	r3, r3, #4
 8004218:	2b00      	cmp	r3, #0
 800421a:	d008      	beq.n	800422e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800421c:	4b19      	ldr	r3, [pc, #100]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68db      	ldr	r3, [r3, #12]
 8004228:	4916      	ldr	r1, [pc, #88]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0308 	and.w	r3, r3, #8
 8004236:	2b00      	cmp	r3, #0
 8004238:	d009      	beq.n	800424e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800423a:	4b12      	ldr	r3, [pc, #72]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	691b      	ldr	r3, [r3, #16]
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 800424a:	4313      	orrs	r3, r2
 800424c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800424e:	f000 f821 	bl	8004294 <HAL_RCC_GetSysClockFreq>
 8004252:	4602      	mov	r2, r0
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <HAL_RCC_ClockConfig+0x1bc>)
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	091b      	lsrs	r3, r3, #4
 800425a:	f003 030f 	and.w	r3, r3, #15
 800425e:	490a      	ldr	r1, [pc, #40]	; (8004288 <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	5ccb      	ldrb	r3, [r1, r3]
 8004262:	fa22 f303 	lsr.w	r3, r2, r3
 8004266:	4a09      	ldr	r2, [pc, #36]	; (800428c <HAL_RCC_ClockConfig+0x1c4>)
 8004268:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800426a:	4b09      	ldr	r3, [pc, #36]	; (8004290 <HAL_RCC_ClockConfig+0x1c8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4618      	mov	r0, r3
 8004270:	f7fc fde6 	bl	8000e40 <HAL_InitTick>

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	40023c00 	.word	0x40023c00
 8004284:	40023800 	.word	0x40023800
 8004288:	080059b4 	.word	0x080059b4
 800428c:	20000000 	.word	0x20000000
 8004290:	20000004 	.word	0x20000004

08004294 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004294:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004298:	b094      	sub	sp, #80	; 0x50
 800429a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800429c:	2300      	movs	r3, #0
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
 80042a0:	2300      	movs	r3, #0
 80042a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042a4:	2300      	movs	r3, #0
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80042ac:	4b79      	ldr	r3, [pc, #484]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 030c 	and.w	r3, r3, #12
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d00d      	beq.n	80042d4 <HAL_RCC_GetSysClockFreq+0x40>
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	f200 80e1 	bhi.w	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_RCC_GetSysClockFreq+0x34>
 80042c2:	2b04      	cmp	r3, #4
 80042c4:	d003      	beq.n	80042ce <HAL_RCC_GetSysClockFreq+0x3a>
 80042c6:	e0db      	b.n	8004480 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042c8:	4b73      	ldr	r3, [pc, #460]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042cc:	e0db      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042ce:	4b73      	ldr	r3, [pc, #460]	; (800449c <HAL_RCC_GetSysClockFreq+0x208>)
 80042d0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042d2:	e0d8      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042dc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042de:	4b6d      	ldr	r3, [pc, #436]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d063      	beq.n	80043b2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b6a      	ldr	r3, [pc, #424]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	2200      	movs	r2, #0
 80042f2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042f4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042fc:	633b      	str	r3, [r7, #48]	; 0x30
 80042fe:	2300      	movs	r3, #0
 8004300:	637b      	str	r3, [r7, #52]	; 0x34
 8004302:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004306:	4622      	mov	r2, r4
 8004308:	462b      	mov	r3, r5
 800430a:	f04f 0000 	mov.w	r0, #0
 800430e:	f04f 0100 	mov.w	r1, #0
 8004312:	0159      	lsls	r1, r3, #5
 8004314:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004318:	0150      	lsls	r0, r2, #5
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4621      	mov	r1, r4
 8004320:	1a51      	subs	r1, r2, r1
 8004322:	6139      	str	r1, [r7, #16]
 8004324:	4629      	mov	r1, r5
 8004326:	eb63 0301 	sbc.w	r3, r3, r1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	f04f 0200 	mov.w	r2, #0
 8004330:	f04f 0300 	mov.w	r3, #0
 8004334:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004338:	4659      	mov	r1, fp
 800433a:	018b      	lsls	r3, r1, #6
 800433c:	4651      	mov	r1, sl
 800433e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004342:	4651      	mov	r1, sl
 8004344:	018a      	lsls	r2, r1, #6
 8004346:	4651      	mov	r1, sl
 8004348:	ebb2 0801 	subs.w	r8, r2, r1
 800434c:	4659      	mov	r1, fp
 800434e:	eb63 0901 	sbc.w	r9, r3, r1
 8004352:	f04f 0200 	mov.w	r2, #0
 8004356:	f04f 0300 	mov.w	r3, #0
 800435a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800435e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004366:	4690      	mov	r8, r2
 8004368:	4699      	mov	r9, r3
 800436a:	4623      	mov	r3, r4
 800436c:	eb18 0303 	adds.w	r3, r8, r3
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	462b      	mov	r3, r5
 8004374:	eb49 0303 	adc.w	r3, r9, r3
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	f04f 0200 	mov.w	r2, #0
 800437e:	f04f 0300 	mov.w	r3, #0
 8004382:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004386:	4629      	mov	r1, r5
 8004388:	024b      	lsls	r3, r1, #9
 800438a:	4621      	mov	r1, r4
 800438c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004390:	4621      	mov	r1, r4
 8004392:	024a      	lsls	r2, r1, #9
 8004394:	4610      	mov	r0, r2
 8004396:	4619      	mov	r1, r3
 8004398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800439a:	2200      	movs	r2, #0
 800439c:	62bb      	str	r3, [r7, #40]	; 0x28
 800439e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043a4:	f7fb ff22 	bl	80001ec <__aeabi_uldivmod>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4613      	mov	r3, r2
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	e058      	b.n	8004464 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043b2:	4b38      	ldr	r3, [pc, #224]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	2200      	movs	r2, #0
 80043ba:	4618      	mov	r0, r3
 80043bc:	4611      	mov	r1, r2
 80043be:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	2300      	movs	r3, #0
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
 80043c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043cc:	4642      	mov	r2, r8
 80043ce:	464b      	mov	r3, r9
 80043d0:	f04f 0000 	mov.w	r0, #0
 80043d4:	f04f 0100 	mov.w	r1, #0
 80043d8:	0159      	lsls	r1, r3, #5
 80043da:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043de:	0150      	lsls	r0, r2, #5
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4641      	mov	r1, r8
 80043e6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043ea:	4649      	mov	r1, r9
 80043ec:	eb63 0b01 	sbc.w	fp, r3, r1
 80043f0:	f04f 0200 	mov.w	r2, #0
 80043f4:	f04f 0300 	mov.w	r3, #0
 80043f8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043fc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004400:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004404:	ebb2 040a 	subs.w	r4, r2, sl
 8004408:	eb63 050b 	sbc.w	r5, r3, fp
 800440c:	f04f 0200 	mov.w	r2, #0
 8004410:	f04f 0300 	mov.w	r3, #0
 8004414:	00eb      	lsls	r3, r5, #3
 8004416:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800441a:	00e2      	lsls	r2, r4, #3
 800441c:	4614      	mov	r4, r2
 800441e:	461d      	mov	r5, r3
 8004420:	4643      	mov	r3, r8
 8004422:	18e3      	adds	r3, r4, r3
 8004424:	603b      	str	r3, [r7, #0]
 8004426:	464b      	mov	r3, r9
 8004428:	eb45 0303 	adc.w	r3, r5, r3
 800442c:	607b      	str	r3, [r7, #4]
 800442e:	f04f 0200 	mov.w	r2, #0
 8004432:	f04f 0300 	mov.w	r3, #0
 8004436:	e9d7 4500 	ldrd	r4, r5, [r7]
 800443a:	4629      	mov	r1, r5
 800443c:	028b      	lsls	r3, r1, #10
 800443e:	4621      	mov	r1, r4
 8004440:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004444:	4621      	mov	r1, r4
 8004446:	028a      	lsls	r2, r1, #10
 8004448:	4610      	mov	r0, r2
 800444a:	4619      	mov	r1, r3
 800444c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800444e:	2200      	movs	r2, #0
 8004450:	61bb      	str	r3, [r7, #24]
 8004452:	61fa      	str	r2, [r7, #28]
 8004454:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004458:	f7fb fec8 	bl	80001ec <__aeabi_uldivmod>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4613      	mov	r3, r2
 8004462:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004464:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCC_GetSysClockFreq+0x200>)
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	f003 0303 	and.w	r3, r3, #3
 800446e:	3301      	adds	r3, #1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004474:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800447e:	e002      	b.n	8004486 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004480:	4b05      	ldr	r3, [pc, #20]	; (8004498 <HAL_RCC_GetSysClockFreq+0x204>)
 8004482:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004484:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004486:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004488:	4618      	mov	r0, r3
 800448a:	3750      	adds	r7, #80	; 0x50
 800448c:	46bd      	mov	sp, r7
 800448e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004492:	bf00      	nop
 8004494:	40023800 	.word	0x40023800
 8004498:	00f42400 	.word	0x00f42400
 800449c:	007a1200 	.word	0x007a1200

080044a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044a4:	4b03      	ldr	r3, [pc, #12]	; (80044b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80044a6:	681b      	ldr	r3, [r3, #0]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	20000000 	.word	0x20000000

080044b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044bc:	f7ff fff0 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044c0:	4602      	mov	r2, r0
 80044c2:	4b05      	ldr	r3, [pc, #20]	; (80044d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	0a9b      	lsrs	r3, r3, #10
 80044c8:	f003 0307 	and.w	r3, r3, #7
 80044cc:	4903      	ldr	r1, [pc, #12]	; (80044dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044ce:	5ccb      	ldrb	r3, [r1, r3]
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40023800 	.word	0x40023800
 80044dc:	080059c4 	.word	0x080059c4

080044e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044e4:	f7ff ffdc 	bl	80044a0 <HAL_RCC_GetHCLKFreq>
 80044e8:	4602      	mov	r2, r0
 80044ea:	4b05      	ldr	r3, [pc, #20]	; (8004500 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	0b5b      	lsrs	r3, r3, #13
 80044f0:	f003 0307 	and.w	r3, r3, #7
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044f6:	5ccb      	ldrb	r3, [r1, r3]
 80044f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40023800 	.word	0x40023800
 8004504:	080059c4 	.word	0x080059c4

08004508 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b082      	sub	sp, #8
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e042      	b.n	80045a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d106      	bne.n	8004534 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2200      	movs	r2, #0
 800452a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f7fc fb36 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2224      	movs	r2, #36	; 0x24
 8004538:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	68da      	ldr	r2, [r3, #12]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800454a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800454c:	6878      	ldr	r0, [r7, #4]
 800454e:	f000 fc85 	bl	8004e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004560:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	695a      	ldr	r2, [r3, #20]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004570:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	68da      	ldr	r2, [r3, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004580:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2220      	movs	r2, #32
 8004594:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800459e:	2300      	movs	r3, #0
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3708      	adds	r7, #8
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bd80      	pop	{r7, pc}

080045a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b0ba      	sub	sp, #232	; 0xe8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68db      	ldr	r3, [r3, #12]
 80045c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045d4:	2300      	movs	r3, #0
 80045d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045de:	f003 030f 	and.w	r3, r3, #15
 80045e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10f      	bne.n	800460e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_UART_IRQHandler+0x66>
 80045fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d003      	beq.n	800460e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 fb69 	bl	8004cde <UART_Receive_IT>
      return;
 800460c:	e25b      	b.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800460e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 80de 	beq.w	80047d4 <HAL_UART_IRQHandler+0x22c>
 8004618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800461c:	f003 0301 	and.w	r3, r3, #1
 8004620:	2b00      	cmp	r3, #0
 8004622:	d106      	bne.n	8004632 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004628:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800462c:	2b00      	cmp	r3, #0
 800462e:	f000 80d1 	beq.w	80047d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00b      	beq.n	8004656 <HAL_UART_IRQHandler+0xae>
 800463e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d005      	beq.n	8004656 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464e:	f043 0201 	orr.w	r2, r3, #1
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800465a:	f003 0304 	and.w	r3, r3, #4
 800465e:	2b00      	cmp	r3, #0
 8004660:	d00b      	beq.n	800467a <HAL_UART_IRQHandler+0xd2>
 8004662:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004666:	f003 0301 	and.w	r3, r3, #1
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004672:	f043 0202 	orr.w	r2, r3, #2
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800467a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800467e:	f003 0302 	and.w	r3, r3, #2
 8004682:	2b00      	cmp	r3, #0
 8004684:	d00b      	beq.n	800469e <HAL_UART_IRQHandler+0xf6>
 8004686:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468a:	f003 0301 	and.w	r3, r3, #1
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004696:	f043 0204 	orr.w	r2, r3, #4
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800469e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d011      	beq.n	80046ce <HAL_UART_IRQHandler+0x126>
 80046aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d105      	bne.n	80046c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	f043 0208 	orr.w	r2, r3, #8
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 81f2 	beq.w	8004abc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d008      	beq.n	80046f6 <HAL_UART_IRQHandler+0x14e>
 80046e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046e8:	f003 0320 	and.w	r3, r3, #32
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046f0:	6878      	ldr	r0, [r7, #4]
 80046f2:	f000 faf4 	bl	8004cde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	695b      	ldr	r3, [r3, #20]
 80046fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004700:	2b40      	cmp	r3, #64	; 0x40
 8004702:	bf0c      	ite	eq
 8004704:	2301      	moveq	r3, #1
 8004706:	2300      	movne	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d103      	bne.n	8004722 <HAL_UART_IRQHandler+0x17a>
 800471a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d04f      	beq.n	80047c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f9fc 	bl	8004b20 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d141      	bne.n	80047ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3314      	adds	r3, #20
 800473c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004740:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004744:	e853 3f00 	ldrex	r3, [r3]
 8004748:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800474c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004750:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004754:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	3314      	adds	r3, #20
 800475e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004762:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004766:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800476e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004772:	e841 2300 	strex	r3, r2, [r1]
 8004776:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800477a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d1d9      	bne.n	8004736 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478e:	4a7e      	ldr	r2, [pc, #504]	; (8004988 <HAL_UART_IRQHandler+0x3e0>)
 8004790:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004796:	4618      	mov	r0, r3
 8004798:	f7fc fd47 	bl	800122a <HAL_DMA_Abort_IT>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d016      	beq.n	80047d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ac:	4610      	mov	r0, r2
 80047ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b0:	e00e      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 f99e 	bl	8004af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b8:	e00a      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 f99a 	bl	8004af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c0:	e006      	b.n	80047d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f996 	bl	8004af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047ce:	e175      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	bf00      	nop
    return;
 80047d2:	e173      	b.n	8004abc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d8:	2b01      	cmp	r3, #1
 80047da:	f040 814f 	bne.w	8004a7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 0310 	and.w	r3, r3, #16
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	f000 8148 	beq.w	8004a7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	f000 8141 	beq.w	8004a7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	60bb      	str	r3, [r7, #8]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	60bb      	str	r3, [r7, #8]
 800480e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481a:	2b40      	cmp	r3, #64	; 0x40
 800481c:	f040 80b6 	bne.w	800498c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	685b      	ldr	r3, [r3, #4]
 8004828:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800482c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 8145 	beq.w	8004ac0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800483a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483e:	429a      	cmp	r2, r3
 8004840:	f080 813e 	bcs.w	8004ac0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800484a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004856:	f000 8088 	beq.w	800496a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	330c      	adds	r3, #12
 8004860:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004868:	e853 3f00 	ldrex	r3, [r3]
 800486c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004870:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004874:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004878:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004886:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800488a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800488e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004892:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004896:	e841 2300 	strex	r3, r2, [r1]
 800489a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800489e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d1d9      	bne.n	800485a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	3314      	adds	r3, #20
 80048ac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048b0:	e853 3f00 	ldrex	r3, [r3]
 80048b4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048b8:	f023 0301 	bic.w	r3, r3, #1
 80048bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	3314      	adds	r3, #20
 80048c6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048ca:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048ce:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048d2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048d6:	e841 2300 	strex	r3, r2, [r1]
 80048da:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1e1      	bne.n	80048a6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	3314      	adds	r3, #20
 80048e8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048ec:	e853 3f00 	ldrex	r3, [r3]
 80048f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3314      	adds	r3, #20
 8004902:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004906:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004908:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800490a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800490c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004914:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004916:	2b00      	cmp	r3, #0
 8004918:	d1e3      	bne.n	80048e2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2220      	movs	r2, #32
 800491e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	330c      	adds	r3, #12
 800492e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004938:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	330c      	adds	r3, #12
 8004948:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800494c:	65ba      	str	r2, [r7, #88]	; 0x58
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e3      	bne.n	8004928 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004964:	4618      	mov	r0, r3
 8004966:	f7fc fbf0 	bl	800114a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2202      	movs	r2, #2
 800496e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004978:	b29b      	uxth	r3, r3
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	b29b      	uxth	r3, r3
 800497e:	4619      	mov	r1, r3
 8004980:	6878      	ldr	r0, [r7, #4]
 8004982:	f000 f8c1 	bl	8004b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004986:	e09b      	b.n	8004ac0 <HAL_UART_IRQHandler+0x518>
 8004988:	08004be7 	.word	0x08004be7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80049a0:	b29b      	uxth	r3, r3
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 808e 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8089 	beq.w	8004ac4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	330c      	adds	r3, #12
 80049b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049c4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	330c      	adds	r3, #12
 80049d2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049d6:	647a      	str	r2, [r7, #68]	; 0x44
 80049d8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049de:	e841 2300 	strex	r3, r2, [r1]
 80049e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1e3      	bne.n	80049b2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	3314      	adds	r3, #20
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f4:	e853 3f00 	ldrex	r3, [r3]
 80049f8:	623b      	str	r3, [r7, #32]
   return(result);
 80049fa:	6a3b      	ldr	r3, [r7, #32]
 80049fc:	f023 0301 	bic.w	r3, r3, #1
 8004a00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a0e:	633a      	str	r2, [r7, #48]	; 0x30
 8004a10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	e841 2300 	strex	r3, r2, [r1]
 8004a1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d1e3      	bne.n	80049ea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	330c      	adds	r3, #12
 8004a36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0310 	bic.w	r3, r3, #16
 8004a46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	330c      	adds	r3, #12
 8004a50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a54:	61fa      	str	r2, [r7, #28]
 8004a56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a58:	69b9      	ldr	r1, [r7, #24]
 8004a5a:	69fa      	ldr	r2, [r7, #28]
 8004a5c:	e841 2300 	strex	r3, r2, [r1]
 8004a60:	617b      	str	r3, [r7, #20]
   return(result);
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d1e3      	bne.n	8004a30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a72:	4619      	mov	r1, r3
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f847 	bl	8004b08 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a7a:	e023      	b.n	8004ac4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d009      	beq.n	8004a9c <HAL_UART_IRQHandler+0x4f4>
 8004a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8ba 	bl	8004c0e <UART_Transmit_IT>
    return;
 8004a9a:	e014      	b.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d00e      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d008      	beq.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f8fa 	bl	8004cae <UART_EndTransmit_IT>
    return;
 8004aba:	e004      	b.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004abc:	bf00      	nop
 8004abe:	e002      	b.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ac0:	bf00      	nop
 8004ac2:	e000      	b.n	8004ac6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ac4:	bf00      	nop
  }
}
 8004ac6:	37e8      	adds	r7, #232	; 0xe8
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd80      	pop	{r7, pc}

08004acc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b083      	sub	sp, #12
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ae8:	bf00      	nop
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr

08004af4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b083      	sub	sp, #12
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr

08004b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b083      	sub	sp, #12
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
 8004b10:	460b      	mov	r3, r1
 8004b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b14:	bf00      	nop
 8004b16:	370c      	adds	r7, #12
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1e:	4770      	bx	lr

08004b20 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b095      	sub	sp, #84	; 0x54
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b32:	e853 3f00 	ldrex	r3, [r3]
 8004b36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004b38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	330c      	adds	r3, #12
 8004b46:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004b48:	643a      	str	r2, [r7, #64]	; 0x40
 8004b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004b4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004b50:	e841 2300 	strex	r3, r2, [r1]
 8004b54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d1e5      	bne.n	8004b28 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	3314      	adds	r3, #20
 8004b62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	6a3b      	ldr	r3, [r7, #32]
 8004b66:	e853 3f00 	ldrex	r3, [r3]
 8004b6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	f023 0301 	bic.w	r3, r3, #1
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	3314      	adds	r3, #20
 8004b7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b84:	e841 2300 	strex	r3, r2, [r1]
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1e5      	bne.n	8004b5c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	d119      	bne.n	8004bcc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	f023 0310 	bic.w	r3, r3, #16
 8004bae:	647b      	str	r3, [r7, #68]	; 0x44
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bb8:	61ba      	str	r2, [r7, #24]
 8004bba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	613b      	str	r3, [r7, #16]
   return(result);
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004bda:	bf00      	nop
 8004bdc:	3754      	adds	r7, #84	; 0x54
 8004bde:	46bd      	mov	sp, r7
 8004be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be4:	4770      	bx	lr

08004be6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be6:	b580      	push	{r7, lr}
 8004be8:	b084      	sub	sp, #16
 8004bea:	af00      	add	r7, sp, #0
 8004bec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c00:	68f8      	ldr	r0, [r7, #12]
 8004c02:	f7ff ff77 	bl	8004af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c06:	bf00      	nop
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b085      	sub	sp, #20
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	2b21      	cmp	r3, #33	; 0x21
 8004c20:	d13e      	bne.n	8004ca0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c2a:	d114      	bne.n	8004c56 <UART_Transmit_IT+0x48>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d110      	bne.n	8004c56 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6a1b      	ldr	r3, [r3, #32]
 8004c38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	881b      	ldrh	r3, [r3, #0]
 8004c3e:	461a      	mov	r2, r3
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	1c9a      	adds	r2, r3, #2
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e008      	b.n	8004c68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	1c59      	adds	r1, r3, #1
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6211      	str	r1, [r2, #32]
 8004c60:	781a      	ldrb	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	3b01      	subs	r3, #1
 8004c70:	b29b      	uxth	r3, r3
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	4619      	mov	r1, r3
 8004c76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d10f      	bne.n	8004c9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68da      	ldr	r2, [r3, #12]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	68da      	ldr	r2, [r3, #12]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	e000      	b.n	8004ca2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004ca0:	2302      	movs	r3, #2
  }
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3714      	adds	r7, #20
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr

08004cae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004cae:	b580      	push	{r7, lr}
 8004cb0:	b082      	sub	sp, #8
 8004cb2:	af00      	add	r7, sp, #0
 8004cb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2220      	movs	r2, #32
 8004cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f7ff fefc 	bl	8004acc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3708      	adds	r7, #8
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}

08004cde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004cde:	b580      	push	{r7, lr}
 8004ce0:	b08c      	sub	sp, #48	; 0x30
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2b22      	cmp	r3, #34	; 0x22
 8004cf0:	f040 80ae 	bne.w	8004e50 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cfc:	d117      	bne.n	8004d2e <UART_Receive_IT+0x50>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d113      	bne.n	8004d2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004d06:	2300      	movs	r3, #0
 8004d08:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d1c:	b29a      	uxth	r2, r3
 8004d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	1c9a      	adds	r2, r3, #2
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	629a      	str	r2, [r3, #40]	; 0x28
 8004d2c:	e026      	b.n	8004d7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d32:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004d34:	2300      	movs	r3, #0
 8004d36:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d40:	d007      	beq.n	8004d52 <UART_Receive_IT+0x74>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10a      	bne.n	8004d60 <UART_Receive_IT+0x82>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	b2da      	uxtb	r2, r3
 8004d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d5c:	701a      	strb	r2, [r3, #0]
 8004d5e:	e008      	b.n	8004d72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d76:	1c5a      	adds	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	3b01      	subs	r3, #1
 8004d84:	b29b      	uxth	r3, r3
 8004d86:	687a      	ldr	r2, [r7, #4]
 8004d88:	4619      	mov	r1, r3
 8004d8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d15d      	bne.n	8004e4c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68da      	ldr	r2, [r3, #12]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0220 	bic.w	r2, r2, #32
 8004d9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	695a      	ldr	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f022 0201 	bic.w	r2, r2, #1
 8004dbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d135      	bne.n	8004e42 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	330c      	adds	r3, #12
 8004de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	613b      	str	r3, [r7, #16]
   return(result);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 0310 	bic.w	r3, r3, #16
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	330c      	adds	r3, #12
 8004dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfc:	623a      	str	r2, [r7, #32]
 8004dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d10a      	bne.n	8004e34 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e1e:	2300      	movs	r3, #0
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	60fb      	str	r3, [r7, #12]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	60fb      	str	r3, [r7, #12]
 8004e32:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e38:	4619      	mov	r1, r3
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f7ff fe64 	bl	8004b08 <HAL_UARTEx_RxEventCallback>
 8004e40:	e002      	b.n	8004e48 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fe4c 	bl	8004ae0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	e002      	b.n	8004e52 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	e000      	b.n	8004e52 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004e50:	2302      	movs	r3, #2
  }
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3730      	adds	r7, #48	; 0x30
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
	...

08004e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e60:	b0c0      	sub	sp, #256	; 0x100
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e78:	68d9      	ldr	r1, [r3, #12]
 8004e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	ea40 0301 	orr.w	r3, r0, r1
 8004e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	431a      	orrs	r2, r3
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ea0:	69db      	ldr	r3, [r3, #28]
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004eb4:	f021 010c 	bic.w	r1, r1, #12
 8004eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004ec2:	430b      	orrs	r3, r1
 8004ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ed6:	6999      	ldr	r1, [r3, #24]
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	ea40 0301 	orr.w	r3, r0, r1
 8004ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	4b8f      	ldr	r3, [pc, #572]	; (8005128 <UART_SetConfig+0x2cc>)
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d005      	beq.n	8004efc <UART_SetConfig+0xa0>
 8004ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ef4:	681a      	ldr	r2, [r3, #0]
 8004ef6:	4b8d      	ldr	r3, [pc, #564]	; (800512c <UART_SetConfig+0x2d0>)
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d104      	bne.n	8004f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004efc:	f7ff faf0 	bl	80044e0 <HAL_RCC_GetPCLK2Freq>
 8004f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004f04:	e003      	b.n	8004f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004f06:	f7ff fad7 	bl	80044b8 <HAL_RCC_GetPCLK1Freq>
 8004f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f18:	f040 810c 	bne.w	8005134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f20:	2200      	movs	r2, #0
 8004f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004f2e:	4622      	mov	r2, r4
 8004f30:	462b      	mov	r3, r5
 8004f32:	1891      	adds	r1, r2, r2
 8004f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8004f36:	415b      	adcs	r3, r3
 8004f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f3e:	4621      	mov	r1, r4
 8004f40:	eb12 0801 	adds.w	r8, r2, r1
 8004f44:	4629      	mov	r1, r5
 8004f46:	eb43 0901 	adc.w	r9, r3, r1
 8004f4a:	f04f 0200 	mov.w	r2, #0
 8004f4e:	f04f 0300 	mov.w	r3, #0
 8004f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004f5e:	4690      	mov	r8, r2
 8004f60:	4699      	mov	r9, r3
 8004f62:	4623      	mov	r3, r4
 8004f64:	eb18 0303 	adds.w	r3, r8, r3
 8004f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004f6c:	462b      	mov	r3, r5
 8004f6e:	eb49 0303 	adc.w	r3, r9, r3
 8004f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	18db      	adds	r3, r3, r3
 8004f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8004f90:	4613      	mov	r3, r2
 8004f92:	eb42 0303 	adc.w	r3, r2, r3
 8004f96:	657b      	str	r3, [r7, #84]	; 0x54
 8004f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004fa0:	f7fb f924 	bl	80001ec <__aeabi_uldivmod>
 8004fa4:	4602      	mov	r2, r0
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	4b61      	ldr	r3, [pc, #388]	; (8005130 <UART_SetConfig+0x2d4>)
 8004faa:	fba3 2302 	umull	r2, r3, r3, r2
 8004fae:	095b      	lsrs	r3, r3, #5
 8004fb0:	011c      	lsls	r4, r3, #4
 8004fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004fc4:	4642      	mov	r2, r8
 8004fc6:	464b      	mov	r3, r9
 8004fc8:	1891      	adds	r1, r2, r2
 8004fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8004fcc:	415b      	adcs	r3, r3
 8004fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004fd4:	4641      	mov	r1, r8
 8004fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8004fda:	4649      	mov	r1, r9
 8004fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8004fe0:	f04f 0200 	mov.w	r2, #0
 8004fe4:	f04f 0300 	mov.w	r3, #0
 8004fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ff4:	4692      	mov	sl, r2
 8004ff6:	469b      	mov	fp, r3
 8004ff8:	4643      	mov	r3, r8
 8004ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8004ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005002:	464b      	mov	r3, r9
 8005004:	eb4b 0303 	adc.w	r3, fp, r3
 8005008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800500c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800501c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005020:	460b      	mov	r3, r1
 8005022:	18db      	adds	r3, r3, r3
 8005024:	643b      	str	r3, [r7, #64]	; 0x40
 8005026:	4613      	mov	r3, r2
 8005028:	eb42 0303 	adc.w	r3, r2, r3
 800502c:	647b      	str	r3, [r7, #68]	; 0x44
 800502e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005036:	f7fb f8d9 	bl	80001ec <__aeabi_uldivmod>
 800503a:	4602      	mov	r2, r0
 800503c:	460b      	mov	r3, r1
 800503e:	4611      	mov	r1, r2
 8005040:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <UART_SetConfig+0x2d4>)
 8005042:	fba3 2301 	umull	r2, r3, r3, r1
 8005046:	095b      	lsrs	r3, r3, #5
 8005048:	2264      	movs	r2, #100	; 0x64
 800504a:	fb02 f303 	mul.w	r3, r2, r3
 800504e:	1acb      	subs	r3, r1, r3
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005056:	4b36      	ldr	r3, [pc, #216]	; (8005130 <UART_SetConfig+0x2d4>)
 8005058:	fba3 2302 	umull	r2, r3, r3, r2
 800505c:	095b      	lsrs	r3, r3, #5
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005064:	441c      	add	r4, r3
 8005066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800506a:	2200      	movs	r2, #0
 800506c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005078:	4642      	mov	r2, r8
 800507a:	464b      	mov	r3, r9
 800507c:	1891      	adds	r1, r2, r2
 800507e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005080:	415b      	adcs	r3, r3
 8005082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005088:	4641      	mov	r1, r8
 800508a:	1851      	adds	r1, r2, r1
 800508c:	6339      	str	r1, [r7, #48]	; 0x30
 800508e:	4649      	mov	r1, r9
 8005090:	414b      	adcs	r3, r1
 8005092:	637b      	str	r3, [r7, #52]	; 0x34
 8005094:	f04f 0200 	mov.w	r2, #0
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80050a0:	4659      	mov	r1, fp
 80050a2:	00cb      	lsls	r3, r1, #3
 80050a4:	4651      	mov	r1, sl
 80050a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050aa:	4651      	mov	r1, sl
 80050ac:	00ca      	lsls	r2, r1, #3
 80050ae:	4610      	mov	r0, r2
 80050b0:	4619      	mov	r1, r3
 80050b2:	4603      	mov	r3, r0
 80050b4:	4642      	mov	r2, r8
 80050b6:	189b      	adds	r3, r3, r2
 80050b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80050bc:	464b      	mov	r3, r9
 80050be:	460a      	mov	r2, r1
 80050c0:	eb42 0303 	adc.w	r3, r2, r3
 80050c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80050c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80050d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80050d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80050dc:	460b      	mov	r3, r1
 80050de:	18db      	adds	r3, r3, r3
 80050e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80050e2:	4613      	mov	r3, r2
 80050e4:	eb42 0303 	adc.w	r3, r2, r3
 80050e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80050ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80050ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80050f2:	f7fb f87b 	bl	80001ec <__aeabi_uldivmod>
 80050f6:	4602      	mov	r2, r0
 80050f8:	460b      	mov	r3, r1
 80050fa:	4b0d      	ldr	r3, [pc, #52]	; (8005130 <UART_SetConfig+0x2d4>)
 80050fc:	fba3 1302 	umull	r1, r3, r3, r2
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	2164      	movs	r1, #100	; 0x64
 8005104:	fb01 f303 	mul.w	r3, r1, r3
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	00db      	lsls	r3, r3, #3
 800510c:	3332      	adds	r3, #50	; 0x32
 800510e:	4a08      	ldr	r2, [pc, #32]	; (8005130 <UART_SetConfig+0x2d4>)
 8005110:	fba2 2303 	umull	r2, r3, r2, r3
 8005114:	095b      	lsrs	r3, r3, #5
 8005116:	f003 0207 	and.w	r2, r3, #7
 800511a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4422      	add	r2, r4
 8005122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005124:	e106      	b.n	8005334 <UART_SetConfig+0x4d8>
 8005126:	bf00      	nop
 8005128:	40011000 	.word	0x40011000
 800512c:	40011400 	.word	0x40011400
 8005130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005138:	2200      	movs	r2, #0
 800513a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800513e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005146:	4642      	mov	r2, r8
 8005148:	464b      	mov	r3, r9
 800514a:	1891      	adds	r1, r2, r2
 800514c:	6239      	str	r1, [r7, #32]
 800514e:	415b      	adcs	r3, r3
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
 8005152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005156:	4641      	mov	r1, r8
 8005158:	1854      	adds	r4, r2, r1
 800515a:	4649      	mov	r1, r9
 800515c:	eb43 0501 	adc.w	r5, r3, r1
 8005160:	f04f 0200 	mov.w	r2, #0
 8005164:	f04f 0300 	mov.w	r3, #0
 8005168:	00eb      	lsls	r3, r5, #3
 800516a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800516e:	00e2      	lsls	r2, r4, #3
 8005170:	4614      	mov	r4, r2
 8005172:	461d      	mov	r5, r3
 8005174:	4643      	mov	r3, r8
 8005176:	18e3      	adds	r3, r4, r3
 8005178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800517c:	464b      	mov	r3, r9
 800517e:	eb45 0303 	adc.w	r3, r5, r3
 8005182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	2200      	movs	r2, #0
 800518e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005196:	f04f 0200 	mov.w	r2, #0
 800519a:	f04f 0300 	mov.w	r3, #0
 800519e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80051a2:	4629      	mov	r1, r5
 80051a4:	008b      	lsls	r3, r1, #2
 80051a6:	4621      	mov	r1, r4
 80051a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051ac:	4621      	mov	r1, r4
 80051ae:	008a      	lsls	r2, r1, #2
 80051b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80051b4:	f7fb f81a 	bl	80001ec <__aeabi_uldivmod>
 80051b8:	4602      	mov	r2, r0
 80051ba:	460b      	mov	r3, r1
 80051bc:	4b60      	ldr	r3, [pc, #384]	; (8005340 <UART_SetConfig+0x4e4>)
 80051be:	fba3 2302 	umull	r2, r3, r3, r2
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	011c      	lsls	r4, r3, #4
 80051c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80051d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80051d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80051d8:	4642      	mov	r2, r8
 80051da:	464b      	mov	r3, r9
 80051dc:	1891      	adds	r1, r2, r2
 80051de:	61b9      	str	r1, [r7, #24]
 80051e0:	415b      	adcs	r3, r3
 80051e2:	61fb      	str	r3, [r7, #28]
 80051e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e8:	4641      	mov	r1, r8
 80051ea:	1851      	adds	r1, r2, r1
 80051ec:	6139      	str	r1, [r7, #16]
 80051ee:	4649      	mov	r1, r9
 80051f0:	414b      	adcs	r3, r1
 80051f2:	617b      	str	r3, [r7, #20]
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005200:	4659      	mov	r1, fp
 8005202:	00cb      	lsls	r3, r1, #3
 8005204:	4651      	mov	r1, sl
 8005206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800520a:	4651      	mov	r1, sl
 800520c:	00ca      	lsls	r2, r1, #3
 800520e:	4610      	mov	r0, r2
 8005210:	4619      	mov	r1, r3
 8005212:	4603      	mov	r3, r0
 8005214:	4642      	mov	r2, r8
 8005216:	189b      	adds	r3, r3, r2
 8005218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800521c:	464b      	mov	r3, r9
 800521e:	460a      	mov	r2, r1
 8005220:	eb42 0303 	adc.w	r3, r2, r3
 8005224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	67bb      	str	r3, [r7, #120]	; 0x78
 8005232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	f04f 0300 	mov.w	r3, #0
 800523c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005240:	4649      	mov	r1, r9
 8005242:	008b      	lsls	r3, r1, #2
 8005244:	4641      	mov	r1, r8
 8005246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800524a:	4641      	mov	r1, r8
 800524c:	008a      	lsls	r2, r1, #2
 800524e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005252:	f7fa ffcb 	bl	80001ec <__aeabi_uldivmod>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	4611      	mov	r1, r2
 800525c:	4b38      	ldr	r3, [pc, #224]	; (8005340 <UART_SetConfig+0x4e4>)
 800525e:	fba3 2301 	umull	r2, r3, r3, r1
 8005262:	095b      	lsrs	r3, r3, #5
 8005264:	2264      	movs	r2, #100	; 0x64
 8005266:	fb02 f303 	mul.w	r3, r2, r3
 800526a:	1acb      	subs	r3, r1, r3
 800526c:	011b      	lsls	r3, r3, #4
 800526e:	3332      	adds	r3, #50	; 0x32
 8005270:	4a33      	ldr	r2, [pc, #204]	; (8005340 <UART_SetConfig+0x4e4>)
 8005272:	fba2 2303 	umull	r2, r3, r2, r3
 8005276:	095b      	lsrs	r3, r3, #5
 8005278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800527c:	441c      	add	r4, r3
 800527e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005282:	2200      	movs	r2, #0
 8005284:	673b      	str	r3, [r7, #112]	; 0x70
 8005286:	677a      	str	r2, [r7, #116]	; 0x74
 8005288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800528c:	4642      	mov	r2, r8
 800528e:	464b      	mov	r3, r9
 8005290:	1891      	adds	r1, r2, r2
 8005292:	60b9      	str	r1, [r7, #8]
 8005294:	415b      	adcs	r3, r3
 8005296:	60fb      	str	r3, [r7, #12]
 8005298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800529c:	4641      	mov	r1, r8
 800529e:	1851      	adds	r1, r2, r1
 80052a0:	6039      	str	r1, [r7, #0]
 80052a2:	4649      	mov	r1, r9
 80052a4:	414b      	adcs	r3, r1
 80052a6:	607b      	str	r3, [r7, #4]
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80052b4:	4659      	mov	r1, fp
 80052b6:	00cb      	lsls	r3, r1, #3
 80052b8:	4651      	mov	r1, sl
 80052ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052be:	4651      	mov	r1, sl
 80052c0:	00ca      	lsls	r2, r1, #3
 80052c2:	4610      	mov	r0, r2
 80052c4:	4619      	mov	r1, r3
 80052c6:	4603      	mov	r3, r0
 80052c8:	4642      	mov	r2, r8
 80052ca:	189b      	adds	r3, r3, r2
 80052cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80052ce:	464b      	mov	r3, r9
 80052d0:	460a      	mov	r2, r1
 80052d2:	eb42 0303 	adc.w	r3, r2, r3
 80052d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	663b      	str	r3, [r7, #96]	; 0x60
 80052e2:	667a      	str	r2, [r7, #100]	; 0x64
 80052e4:	f04f 0200 	mov.w	r2, #0
 80052e8:	f04f 0300 	mov.w	r3, #0
 80052ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80052f0:	4649      	mov	r1, r9
 80052f2:	008b      	lsls	r3, r1, #2
 80052f4:	4641      	mov	r1, r8
 80052f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052fa:	4641      	mov	r1, r8
 80052fc:	008a      	lsls	r2, r1, #2
 80052fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005302:	f7fa ff73 	bl	80001ec <__aeabi_uldivmod>
 8005306:	4602      	mov	r2, r0
 8005308:	460b      	mov	r3, r1
 800530a:	4b0d      	ldr	r3, [pc, #52]	; (8005340 <UART_SetConfig+0x4e4>)
 800530c:	fba3 1302 	umull	r1, r3, r3, r2
 8005310:	095b      	lsrs	r3, r3, #5
 8005312:	2164      	movs	r1, #100	; 0x64
 8005314:	fb01 f303 	mul.w	r3, r1, r3
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	011b      	lsls	r3, r3, #4
 800531c:	3332      	adds	r3, #50	; 0x32
 800531e:	4a08      	ldr	r2, [pc, #32]	; (8005340 <UART_SetConfig+0x4e4>)
 8005320:	fba2 2303 	umull	r2, r3, r2, r3
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	f003 020f 	and.w	r2, r3, #15
 800532a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4422      	add	r2, r4
 8005332:	609a      	str	r2, [r3, #8]
}
 8005334:	bf00      	nop
 8005336:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800533a:	46bd      	mov	sp, r7
 800533c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005340:	51eb851f 	.word	0x51eb851f

08005344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005344:	b084      	sub	sp, #16
 8005346:	b580      	push	{r7, lr}
 8005348:	b084      	sub	sp, #16
 800534a:	af00      	add	r7, sp, #0
 800534c:	6078      	str	r0, [r7, #4]
 800534e:	f107 001c 	add.w	r0, r7, #28
 8005352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005356:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800535a:	2b01      	cmp	r3, #1
 800535c:	d123      	bne.n	80053a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005372:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005376:	687a      	ldr	r2, [r7, #4]
 8005378:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005386:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800538a:	2b01      	cmp	r3, #1
 800538c:	d105      	bne.n	800539a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 faa0 	bl	80058e0 <USB_CoreReset>
 80053a0:	4603      	mov	r3, r0
 80053a2:	73fb      	strb	r3, [r7, #15]
 80053a4:	e01b      	b.n	80053de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	68db      	ldr	r3, [r3, #12]
 80053aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fa94 	bl	80058e0 <USB_CoreReset>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80053bc:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d106      	bne.n	80053d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	639a      	str	r2, [r3, #56]	; 0x38
 80053d0:	e005      	b.n	80053de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80053de:	7fbb      	ldrb	r3, [r7, #30]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d10b      	bne.n	80053fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f043 0206 	orr.w	r2, r3, #6
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f043 0220 	orr.w	r2, r3, #32
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80053fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3710      	adds	r7, #16
 8005402:	46bd      	mov	sp, r7
 8005404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005408:	b004      	add	sp, #16
 800540a:	4770      	bx	lr

0800540c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	f023 0201 	bic.w	r2, r3, #1
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800542e:	b580      	push	{r7, lr}
 8005430:	b084      	sub	sp, #16
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
 8005436:	460b      	mov	r3, r1
 8005438:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800543a:	2300      	movs	r3, #0
 800543c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	68db      	ldr	r3, [r3, #12]
 8005442:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800544a:	78fb      	ldrb	r3, [r7, #3]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d115      	bne.n	800547c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800545c:	200a      	movs	r0, #10
 800545e:	f7fb fd3f 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	330a      	adds	r3, #10
 8005466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 fa2b 	bl	80058c4 <USB_GetMode>
 800546e:	4603      	mov	r3, r0
 8005470:	2b01      	cmp	r3, #1
 8005472:	d01e      	beq.n	80054b2 <USB_SetCurrentMode+0x84>
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	2bc7      	cmp	r3, #199	; 0xc7
 8005478:	d9f0      	bls.n	800545c <USB_SetCurrentMode+0x2e>
 800547a:	e01a      	b.n	80054b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800547c:	78fb      	ldrb	r3, [r7, #3]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d115      	bne.n	80054ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	68db      	ldr	r3, [r3, #12]
 8005486:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800548e:	200a      	movs	r0, #10
 8005490:	f7fb fd26 	bl	8000ee0 <HAL_Delay>
      ms += 10U;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	330a      	adds	r3, #10
 8005498:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 fa12 	bl	80058c4 <USB_GetMode>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <USB_SetCurrentMode+0x84>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2bc7      	cmp	r3, #199	; 0xc7
 80054aa:	d9f0      	bls.n	800548e <USB_SetCurrentMode+0x60>
 80054ac:	e001      	b.n	80054b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	e005      	b.n	80054be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2bc8      	cmp	r3, #200	; 0xc8
 80054b6:	d101      	bne.n	80054bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
	...

080054c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054c8:	b084      	sub	sp, #16
 80054ca:	b580      	push	{r7, lr}
 80054cc:	b086      	sub	sp, #24
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054da:	2300      	movs	r3, #0
 80054dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80054e2:	2300      	movs	r3, #0
 80054e4:	613b      	str	r3, [r7, #16]
 80054e6:	e009      	b.n	80054fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	3340      	adds	r3, #64	; 0x40
 80054ee:	009b      	lsls	r3, r3, #2
 80054f0:	4413      	add	r3, r2
 80054f2:	2200      	movs	r2, #0
 80054f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3301      	adds	r3, #1
 80054fa:	613b      	str	r3, [r7, #16]
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	2b0e      	cmp	r3, #14
 8005500:	d9f2      	bls.n	80054e8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005502:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005506:	2b00      	cmp	r3, #0
 8005508:	d11c      	bne.n	8005544 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	639a      	str	r2, [r3, #56]	; 0x38
 8005542:	e00b      	b.n	800555c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005548:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005554:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005562:	461a      	mov	r2, r3
 8005564:	2300      	movs	r3, #0
 8005566:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005568:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800556c:	2b01      	cmp	r3, #1
 800556e:	d10d      	bne.n	800558c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005570:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005574:	2b00      	cmp	r3, #0
 8005576:	d104      	bne.n	8005582 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005578:	2100      	movs	r1, #0
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f000 f968 	bl	8005850 <USB_SetDevSpeed>
 8005580:	e008      	b.n	8005594 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005582:	2101      	movs	r1, #1
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f963 	bl	8005850 <USB_SetDevSpeed>
 800558a:	e003      	b.n	8005594 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800558c:	2103      	movs	r1, #3
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f95e 	bl	8005850 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005594:	2110      	movs	r1, #16
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f8fa 	bl	8005790 <USB_FlushTxFifo>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d001      	beq.n	80055a6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f924 	bl	80057f4 <USB_FlushRxFifo>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d001      	beq.n	80055b6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80055b2:	2301      	movs	r3, #1
 80055b4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055bc:	461a      	mov	r2, r3
 80055be:	2300      	movs	r3, #0
 80055c0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c8:	461a      	mov	r2, r3
 80055ca:	2300      	movs	r3, #0
 80055cc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d4:	461a      	mov	r2, r3
 80055d6:	2300      	movs	r3, #0
 80055d8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80055da:	2300      	movs	r3, #0
 80055dc:	613b      	str	r3, [r7, #16]
 80055de:	e043      	b.n	8005668 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055f6:	d118      	bne.n	800562a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10a      	bne.n	8005614 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560a:	461a      	mov	r2, r3
 800560c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005610:	6013      	str	r3, [r2, #0]
 8005612:	e013      	b.n	800563c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	015a      	lsls	r2, r3, #5
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	4413      	add	r3, r2
 800561c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005620:	461a      	mov	r2, r3
 8005622:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	e008      	b.n	800563c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	015a      	lsls	r2, r3, #5
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	4413      	add	r3, r2
 8005632:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005636:	461a      	mov	r2, r3
 8005638:	2300      	movs	r3, #0
 800563a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	461a      	mov	r2, r3
 800564a:	2300      	movs	r3, #0
 800564c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	3301      	adds	r3, #1
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800566c:	461a      	mov	r2, r3
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	4293      	cmp	r3, r2
 8005672:	d3b5      	bcc.n	80055e0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005674:	2300      	movs	r3, #0
 8005676:	613b      	str	r3, [r7, #16]
 8005678:	e043      	b.n	8005702 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	015a      	lsls	r2, r3, #5
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4413      	add	r3, r2
 8005682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800568c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005690:	d118      	bne.n	80056c4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056a4:	461a      	mov	r2, r3
 80056a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	e013      	b.n	80056d6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056ba:	461a      	mov	r2, r3
 80056bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80056c0:	6013      	str	r3, [r2, #0]
 80056c2:	e008      	b.n	80056d6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056d0:	461a      	mov	r2, r3
 80056d2:	2300      	movs	r3, #0
 80056d4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	015a      	lsls	r2, r3, #5
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056e2:	461a      	mov	r2, r3
 80056e4:	2300      	movs	r3, #0
 80056e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80056e8:	693b      	ldr	r3, [r7, #16]
 80056ea:	015a      	lsls	r2, r3, #5
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	4413      	add	r3, r2
 80056f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f4:	461a      	mov	r2, r3
 80056f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80056fa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	3301      	adds	r3, #1
 8005700:	613b      	str	r3, [r7, #16]
 8005702:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005706:	461a      	mov	r2, r3
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	4293      	cmp	r3, r2
 800570c:	d3b5      	bcc.n	800567a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800571c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005720:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2200      	movs	r2, #0
 8005726:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800572e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005730:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005734:	2b00      	cmp	r3, #0
 8005736:	d105      	bne.n	8005744 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f043 0210 	orr.w	r2, r3, #16
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	699a      	ldr	r2, [r3, #24]
 8005748:	4b10      	ldr	r3, [pc, #64]	; (800578c <USB_DevInit+0x2c4>)
 800574a:	4313      	orrs	r3, r2
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005750:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8005754:	2b00      	cmp	r3, #0
 8005756:	d005      	beq.n	8005764 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	699b      	ldr	r3, [r3, #24]
 800575c:	f043 0208 	orr.w	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005764:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8005768:	2b01      	cmp	r3, #1
 800576a:	d107      	bne.n	800577c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005774:	f043 0304 	orr.w	r3, r3, #4
 8005778:	687a      	ldr	r2, [r7, #4]
 800577a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800577c:	7dfb      	ldrb	r3, [r7, #23]
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005788:	b004      	add	sp, #16
 800578a:	4770      	bx	lr
 800578c:	803c3800 	.word	0x803c3800

08005790 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005790:	b480      	push	{r7}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	3301      	adds	r3, #1
 80057a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057aa:	d901      	bls.n	80057b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80057ac:	2303      	movs	r3, #3
 80057ae:	e01b      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	daf2      	bge.n	800579e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80057bc:	683b      	ldr	r3, [r7, #0]
 80057be:	019b      	lsls	r3, r3, #6
 80057c0:	f043 0220 	orr.w	r2, r3, #32
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	3301      	adds	r3, #1
 80057cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80057d4:	d901      	bls.n	80057da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e006      	b.n	80057e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0320 	and.w	r3, r3, #32
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	d0f0      	beq.n	80057c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80057fc:	2300      	movs	r3, #0
 80057fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	3301      	adds	r3, #1
 8005804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800580c:	d901      	bls.n	8005812 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e018      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	daf2      	bge.n	8005800 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2210      	movs	r2, #16
 8005822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	3301      	adds	r3, #1
 8005828:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005830:	d901      	bls.n	8005836 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005832:	2303      	movs	r3, #3
 8005834:	e006      	b.n	8005844 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	f003 0310 	and.w	r3, r3, #16
 800583e:	2b10      	cmp	r3, #16
 8005840:	d0f0      	beq.n	8005824 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	460b      	mov	r3, r1
 800585a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	78fb      	ldrb	r3, [r7, #3]
 800586a:	68f9      	ldr	r1, [r7, #12]
 800586c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005870:	4313      	orrs	r3, r2
 8005872:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	f003 0301 	and.w	r3, r3, #1
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	370c      	adds	r7, #12
 80058d8:	46bd      	mov	sp, r7
 80058da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058de:	4770      	bx	lr

080058e0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80058e8:	2300      	movs	r3, #0
 80058ea:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	3301      	adds	r3, #1
 80058f0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80058f8:	d901      	bls.n	80058fe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e01b      	b.n	8005936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	daf2      	bge.n	80058ec <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f043 0201 	orr.w	r2, r3, #1
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	3301      	adds	r3, #1
 800591a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8005922:	d901      	bls.n	8005928 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e006      	b.n	8005936 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	691b      	ldr	r3, [r3, #16]
 800592c:	f003 0301 	and.w	r3, r3, #1
 8005930:	2b01      	cmp	r3, #1
 8005932:	d0f0      	beq.n	8005916 <USB_CoreReset+0x36>

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr

08005942 <memset>:
 8005942:	4402      	add	r2, r0
 8005944:	4603      	mov	r3, r0
 8005946:	4293      	cmp	r3, r2
 8005948:	d100      	bne.n	800594c <memset+0xa>
 800594a:	4770      	bx	lr
 800594c:	f803 1b01 	strb.w	r1, [r3], #1
 8005950:	e7f9      	b.n	8005946 <memset+0x4>
	...

08005954 <__libc_init_array>:
 8005954:	b570      	push	{r4, r5, r6, lr}
 8005956:	4d0d      	ldr	r5, [pc, #52]	; (800598c <__libc_init_array+0x38>)
 8005958:	4c0d      	ldr	r4, [pc, #52]	; (8005990 <__libc_init_array+0x3c>)
 800595a:	1b64      	subs	r4, r4, r5
 800595c:	10a4      	asrs	r4, r4, #2
 800595e:	2600      	movs	r6, #0
 8005960:	42a6      	cmp	r6, r4
 8005962:	d109      	bne.n	8005978 <__libc_init_array+0x24>
 8005964:	4d0b      	ldr	r5, [pc, #44]	; (8005994 <__libc_init_array+0x40>)
 8005966:	4c0c      	ldr	r4, [pc, #48]	; (8005998 <__libc_init_array+0x44>)
 8005968:	f000 f818 	bl	800599c <_init>
 800596c:	1b64      	subs	r4, r4, r5
 800596e:	10a4      	asrs	r4, r4, #2
 8005970:	2600      	movs	r6, #0
 8005972:	42a6      	cmp	r6, r4
 8005974:	d105      	bne.n	8005982 <__libc_init_array+0x2e>
 8005976:	bd70      	pop	{r4, r5, r6, pc}
 8005978:	f855 3b04 	ldr.w	r3, [r5], #4
 800597c:	4798      	blx	r3
 800597e:	3601      	adds	r6, #1
 8005980:	e7ee      	b.n	8005960 <__libc_init_array+0xc>
 8005982:	f855 3b04 	ldr.w	r3, [r5], #4
 8005986:	4798      	blx	r3
 8005988:	3601      	adds	r6, #1
 800598a:	e7f2      	b.n	8005972 <__libc_init_array+0x1e>
 800598c:	080059d4 	.word	0x080059d4
 8005990:	080059d4 	.word	0x080059d4
 8005994:	080059d4 	.word	0x080059d4
 8005998:	080059d8 	.word	0x080059d8

0800599c <_init>:
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	bf00      	nop
 80059a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059a2:	bc08      	pop	{r3}
 80059a4:	469e      	mov	lr, r3
 80059a6:	4770      	bx	lr

080059a8 <_fini>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr
